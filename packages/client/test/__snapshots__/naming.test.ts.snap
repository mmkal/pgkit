// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`scan the whole repo 1`] = `
[
  {
    "filepath": "packages/admin/test/seed.test.ts",
    "raw": "drop database if exists \${sql.identifier([dbName])}",
    "untemplated": "drop database if exists $1",
    "nickname": "drop_db"
  },
  {
    "filepath": "packages/admin/test/seed.test.ts",
    "raw": "create database \${sql.identifier([dbName])}",
    "untemplated": "create database $1",
    "nickname": "create_db"
  },
  {
    "filepath": "packages/client/src/storage.ts",
    "raw": "select 1",
    "untemplated": "select 1",
    "nickname": "select"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "drop table if exists usage_test;\\n    create table usage_test(id int unique, name text);\\n    insert into usage_test values (1, 'one'), (2, 'two'), (3, 'three');",
    "untemplated": "drop table if exists usage_test;\\n    create table usage_test(id int unique, name text);\\n    insert into usage_test values (1, 'one'), (2, 'two'), (3, 'three');",
    "nickname": "drop_if_exists_usage_test-create_usage_test-insert-usage_test"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "select *\\n    from usage_test\\n    where name = any(\${sql.array(['one', 'two'], 'text')})",
    "untemplated": "select *\\n    from usage_test\\n    where name = any($1)",
    "nickname": "select-usage_test-filtered"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "select id from usage_test\\n      where name = any(\${sql.array(['one', 'two'], 'text')})",
    "untemplated": "select id from usage_test\\n      where name = any($1)",
    "nickname": "select-usage_test-filtered"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "select id\\n      from usage_test\\n      where \${isInGroupConditionSql}",
    "untemplated": "select id\\n      from usage_test\\n      where $1",
    "nickname": "select-usage_test-by_id"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "select id from usage_test\\n      where name = any(\${sql.array(['one', 'two'], 'text')})",
    "untemplated": "select id from usage_test\\n      where name = any($1)",
    "nickname": "select-usage_test-filtered"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "select id\\n      from usage_test\\n      where \${isInGroupConditionSql}",
    "untemplated": "select id\\n      from usage_test\\n      where $1",
    "nickname": "select-usage_test-by_id"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "select id from usage_test\\n      where name = 'one' or name in (\${name2})",
    "untemplated": "select id from usage_test\\n      where name = 'one' or name in ($1)",
    "nickname": "select-usage_test-filtered"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "select id\\n      from usage_test\\n      where \${isInGroupConditionSql}",
    "untemplated": "select id\\n      from usage_test\\n      where $1",
    "nickname": "select-usage_test-by_id"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "select count(1)\\n    from \${sql.identifier(['public', 'usage_test'])}",
    "untemplated": "select count(1)\\n    from $1",
    "nickname": "count"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "insert into usage_test(id, name)\\n    select *\\n    from \${sql.unnest(\\n      values.map(({id, name}) => [id, name]),\\n      ['int4', 'text'],\\n    )}\\n    returning *",
    "untemplated": "insert into usage_test(id, name)\\n    select *\\n    from $1\\n    returning *",
    "nickname": "insert-usage_test-select-returning_all"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "insert into usage_test\\n    select *\\n    from jsonb_populate_recordset(\\n      null::usage_test,\\n      \${JSON.stringify(records, null, 2)}\\n    )\\n    returning *",
    "untemplated": "insert into usage_test\\n    select *\\n    from jsonb_populate_recordset(\\n      null::usage_test,\\n      $1\\n    )\\n    returning *",
    "nickname": "bulk_insert-usage_test-jsonb_populate_recordset-returning_all"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "insert into usage_test\\n    select *\\n    from jsonb_to_recordset(\\n      \${JSON.stringify(records, null, 2)}\\n    ) as x(id int, name text)\\n    returning *",
    "untemplated": "insert into usage_test\\n    select *\\n    from jsonb_to_recordset(\\n      $1\\n    ) as x(id int, name text)\\n    returning *",
    "nickname": "bulk_insert-usage_test-jsonb_to_recordset-returning_all"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "update usage_test\\n    set \${sql.join([sql\`name = 'one hundred'\`, sql\`id = 100\`], sql\`, \`)}\\n    where id = 1\\n    returning *",
    "untemplated": "update usage_test\\n    set $1\\n    where id = 1\\n    returning *",
    "nickname": "update-usage_test-by_id-returning_all"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "select * from usage_test where \${idGreaterThan(1)}",
    "untemplated": "select * from usage_test where $1",
    "nickname": "select-usage_test-by_id"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "select * from usage_test where \${idGreaterThan(1)}",
    "untemplated": "select * from usage_test where $1",
    "nickname": "select-usage_test-by_id"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "select '2000-01-01T12:00:00Z'::timestamptz + \${sql.interval({days: 1, hours: 1})} as ts",
    "untemplated": "select '2000-01-01T12:00:00Z'::timestamptz + $1 as ts",
    "nickname": "select"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "select \${sql.interval({days: 1})}",
    "untemplated": "select $1",
    "nickname": "select"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "select \${sql.binary(Buffer.from('hello'))} as b",
    "untemplated": "select $1 as b",
    "nickname": "select"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "drop table if exists jsonb_test;\\n    create table jsonb_test (id int, data jsonb);",
    "untemplated": "drop table if exists jsonb_test;\\n    create table jsonb_test (id int, data jsonb);",
    "nickname": "drop_if_exists_jsonb_test-create_jsonb_test"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "insert into jsonb_test values (1, \${sql.json({foo: 'bar'})})\\n    returning *",
    "untemplated": "insert into jsonb_test values (1, $1)\\n    returning *",
    "nickname": "insert-jsonb_test-returning_all"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "insert into jsonb_test values (1, \${sql.jsonb({foo: 'bar'})})\\n    returning *",
    "untemplated": "insert into jsonb_test values (1, $1)\\n    returning *",
    "nickname": "insert-jsonb_test-returning_all"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "insert into jsonb_test values (1, \${JSON.stringify({foo: 'bar'})})\\n    returning *",
    "untemplated": "insert into jsonb_test values (1, $1)\\n    returning *",
    "nickname": "insert-jsonb_test-returning_all"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "delete from usage_test",
    "untemplated": "delete from usage_test",
    "nickname": "delete-from"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "insert into usage_test(id, name) values (10, 'ten')",
    "untemplated": "insert into usage_test(id, name) values (10, 'ten')",
    "nickname": "insert-usage_test"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "select count(1) from usage_test",
    "untemplated": "select count(1) from usage_test",
    "nickname": "count-usage_test"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "insert into usage_test(id, name) values (11, 'eleven')",
    "untemplated": "insert into usage_test(id, name) values (11, 'eleven')",
    "nickname": "insert-usage_test"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "select count(1) from usage_test",
    "untemplated": "select count(1) from usage_test",
    "nickname": "count-usage_test"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "select count(1) from usage_test",
    "untemplated": "select count(1) from usage_test",
    "nickname": "count-usage_test"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "select * from usage_test where id >= 10",
    "untemplated": "select * from usage_test where id >= 10",
    "nickname": "select-usage_test-filtered"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "select 1 as a, 2 as b",
    "untemplated": "select 1 as a, 2 as b",
    "nickname": "select"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "select 1",
    "untemplated": "select 1",
    "nickname": "select"
  },
  {
    "filepath": "packages/client/test/api-usage.test.ts",
    "raw": "select 1 as a, 2 as b",
    "untemplated": "select 1 as a, 2 as b",
    "nickname": "select"
  },
  {
    "filepath": "packages/client/test/bugs.test.ts",
    "raw": "drop table if exists edge_cases_test;\\n    create table edge_cases_test(id int unique, name text);\\n    insert into edge_cases_test values (1, 'one'), (2, 'two'), (3, 'three');",
    "untemplated": "drop table if exists edge_cases_test;\\n    create table edge_cases_test(id int unique, name text);\\n    insert into edge_cases_test values (1, 'one'), (2, 'two'), (3, 'three');",
    "nickname": "drop_if_exists_edge_cases_test-create_edge_cases_test-insert"
  },
  {
    "filepath": "packages/client/test/bugs.test.ts",
    "raw": "drop table if exists jsonb_array_test;\\n    create table jsonb_array_test(id int, jsons jsonb[]);",
    "untemplated": "drop table if exists jsonb_array_test;\\n    create table jsonb_array_test(id int, jsons jsonb[]);",
    "nickname": "drop_if_exists_jsonb_array_test-create_jsonb_array_test"
  },
  {
    "filepath": "packages/client/test/bugs.test.ts",
    "raw": "insert into jsonb_array_test\\n    values (1, \${sql.array(\\n      values.map(v => JSON.stringify(v)),\\n      'jsonb',\\n    )})\\n    returning *",
    "untemplated": "insert into jsonb_array_test\\n    values (1, $1)\\n    returning *",
    "nickname": "insert-jsonb_array_test-returning_all"
  },
  {
    "filepath": "packages/client/test/bugs.test.ts",
    "raw": "drop table if exists jsonb_array_test;\\n    create table jsonb_array_test(id int, jsons jsonb[]);",
    "untemplated": "drop table if exists jsonb_array_test;\\n    create table jsonb_array_test(id int, jsons jsonb[]);",
    "nickname": "drop_if_exists_jsonb_array_test-create_jsonb_array_test"
  },
  {
    "filepath": "packages/client/test/bugs.test.ts",
    "raw": "insert into jsonb_array_test\\n    values (1, \${sql.array(\\n      values.map(v => JSON.stringify(v)),\\n      'jsonb',\\n    )})\\n    returning *",
    "untemplated": "insert into jsonb_array_test\\n    values (1, $1)\\n    returning *",
    "nickname": "insert-jsonb_array_test-returning_all"
  },
  {
    "filepath": "packages/client/test/bugs.test.ts",
    "raw": "select * from jsonb_array_test\\n    where id = any(\${sql.array([], 'int8')})",
    "untemplated": "select * from jsonb_array_test\\n    where id = any($1)",
    "nickname": "select-jsonb_array_test-by_id"
  },
  {
    "filepath": "packages/client/test/bugs.test.ts",
    "raw": "insert into edge_cases_test values (4, \${'four'})\\n    \${sql\`on conflict (id) do update set name = \${'four!'}",
    "untemplated": "insert into edge_cases_test values (4, $1)\\n    $2ql\`on conflict (id) do update set name = $3",
    "nickname": "upsert-edge_cases_test"
  },
  {
    "filepath": "packages/client/test/bugs.test.ts",
    "raw": "on conflict (id) do update set name = \${'four!'}",
    "untemplated": "on conflict (id) do update set name = $1",
    "nickname": "update-set-name"
  },
  {
    "filepath": "packages/client/test/bugs.test.ts",
    "raw": "insert into edge_cases_test values (4, \${'four'})\\n    \${sql.fragment\`on conflict (id) do update set name = \${'four!'}",
    "untemplated": "insert into edge_cases_test values (4, $1)\\n    $2ql.fragment\`on conflict (id) do update set name = $3",
    "nickname": "upsert-edge_cases_test"
  },
  {
    "filepath": "packages/client/test/bugs.test.ts",
    "raw": "update edge_cases_test\\n    set \${sql.join(parts, sql\`, \`)}\\n    where id = \${1}",
    "untemplated": "update edge_cases_test\\n    set $1\\n    where id = $2",
    "nickname": "update-edge_cases_test-by_id"
  },
  {
    "filepath": "packages/client/test/bugs.test.ts",
    "raw": "select * from edge_cases_test where id = \${11}",
    "untemplated": "select * from edge_cases_test where id = $1",
    "nickname": "select-edge_cases_test-by_id"
  },
  {
    "filepath": "packages/client/test/bugs.test.ts",
    "raw": "select \${sql.join(parts, sql\`, \`)}",
    "untemplated": "select $1",
    "nickname": "select"
  },
  {
    "filepath": "packages/client/test/errors.test.ts",
    "raw": "select * from test_errors where id > 1",
    "untemplated": "select * from test_errors where id > 1",
    "nickname": "select-test_errors-filtered"
  },
  {
    "filepath": "packages/client/test/errors.test.ts",
    "raw": "select * from test_errors where id > 1",
    "untemplated": "select * from test_errors where id > 1",
    "nickname": "select-test_errors-filtered"
  },
  {
    "filepath": "packages/client/test/errors.test.ts",
    "raw": "select * from test_errors where id > 100",
    "untemplated": "select * from test_errors where id > 100",
    "nickname": "select-test_errors-filtered"
  },
  {
    "filepath": "packages/client/test/errors.test.ts",
    "raw": "select * frooom test_errors",
    "untemplated": "select * frooom test_errors",
    "nickname": "select"
  },
  {
    "filepath": "packages/client/test/errors.test.ts",
    "raw": "select * frooom test_errors",
    "untemplated": "select * frooom test_errors",
    "nickname": "select"
  },
  {
    "filepath": "packages/client/test/pg-promise-usage.test.ts",
    "raw": "select 1::int8 as one",
    "untemplated": "select 1::int8 as one",
    "nickname": "select"
  },
  {
    "filepath": "packages/client/test/pg-promise-usage.test.ts",
    "raw": "select 1::int8 as two",
    "untemplated": "select 1::int8 as two",
    "nickname": "select"
  },
  {
    "filepath": "packages/client/test/recipes.test.ts",
    "raw": "drop table if exists recipes_test;\\n    create table recipes_test(id int, name text);\\n    insert into recipes_test values (1, 'one'), (2, 'two'), (3, 'three');",
    "untemplated": "drop table if exists recipes_test;\\n    create table recipes_test(id int, name text);\\n    insert into recipes_test values (1, 'one'), (2, 'two'), (3, 'three');",
    "nickname": "drop_if_exists_recipes_test-create_recipes_test-insert"
  },
  {
    "filepath": "packages/client/test/recipes.test.ts",
    "raw": "insert into recipes_test(id, name)\\n    select *\\n    from \${sql.unnest(\\n      [\\n        [1, 'one'],\\n        [2, 'two'],\\n        [3, 'three'],\\n      ],\\n      ['int4', 'text'],\\n    )}",
    "untemplated": "insert into recipes_test(id, name)\\n    select *\\n    from $1",
    "nickname": "insert-recipes_test-select"
  },
  {
    "filepath": "packages/client/test/recipes.test.ts",
    "raw": "select * from recipes_test",
    "untemplated": "select * from recipes_test",
    "nickname": "select-recipes_test"
  },
  {
    "filepath": "packages/client/test/recipes.test.ts",
    "raw": "select pg_sleep(\${sleepSeconds})",
    "untemplated": "select pg_sleep($1)",
    "nickname": "select-pg_sleep"
  },
  {
    "filepath": "packages/client/test/recipes.test.ts",
    "raw": "select pg_sleep(\${sleepSeconds})",
    "untemplated": "select pg_sleep($1)",
    "nickname": "select-pg_sleep"
  },
  {
    "filepath": "packages/client/test/recipes.test.ts",
    "raw": "select pg_sleep(\${sleepSeconds})",
    "untemplated": "select pg_sleep($1)",
    "nickname": "select-pg_sleep"
  },
  {
    "filepath": "packages/client/test/recipes.test.ts",
    "raw": "with delay as (\\n        select pg_sleep(\${sleepSeconds})\\n      )\\n      insert into recipes_test (id, name)\\n      values (10, 'ten')\\n      returning *",
    "untemplated": "with delay as (\\n        select pg_sleep($1)\\n      )\\n      insert into recipes_test (id, name)\\n      values (10, 'ten')\\n      returning *",
    "nickname": "with-delay-select-pg_sleep-insert-recipes_test-returning_all"
  },
  {
    "filepath": "packages/client/test/recipes.test.ts",
    "raw": "create table recipes_test(id int, name text)",
    "untemplated": "create table recipes_test(id int, name text)",
    "nickname": "create_recipes_test"
  },
  {
    "filepath": "packages/client/test/recipes.test.ts",
    "raw": "insert into recipes_test(id, name) values (\${10}, 'ten') returning *",
    "untemplated": "insert into recipes_test(id, name) values ($1, 'ten') returning *",
    "nickname": "insert-recipes_test-returning_all"
  },
  {
    "filepath": "packages/client/test/recipes.test.ts",
    "raw": "select name from recipes_test",
    "untemplated": "select name from recipes_test",
    "nickname": "select-recipes_test"
  },
  {
    "filepath": "packages/client/test/slonik23.test.ts",
    "raw": "drop table if exists test_slonik23;\\n    create table test_slonik23(id int unique, name text);\\n    insert into test_slonik23 values (1, 'one'), (2, 'two'), (3, 'three');",
    "untemplated": "drop table if exists test_slonik23;\\n    create table test_slonik23(id int unique, name text);\\n    insert into test_slonik23 values (1, 'one'), (2, 'two'), (3, 'three');",
    "nickname": "drop_if_exists_test_slonik23-create_test_slonik23-insert"
  },
  {
    "filepath": "packages/client/test/slonik23.test.ts",
    "raw": "select *\\n    from test_slonik23\\n    where name = any(\${sql.array(['one', 'two'], 'text')})",
    "untemplated": "select *\\n    from test_slonik23\\n    where name = any($1)",
    "nickname": "select-test_slonik23-filtered"
  },
  {
    "filepath": "packages/client/test/slonik23.test.ts",
    "raw": "select id from test_slonik23\\n      where name = any(\${sql.array(['one', 'two'], 'text')})",
    "untemplated": "select id from test_slonik23\\n      where name = any($1)",
    "nickname": "select-test_slonik23-filtered"
  },
  {
    "filepath": "packages/client/test/slonik23.test.ts",
    "raw": "select id\\n      from test_slonik23\\n      where \${isInGroupConditionSql}",
    "untemplated": "select id\\n      from test_slonik23\\n      where $1",
    "nickname": "select-test_slonik23-by_id"
  },
  {
    "filepath": "packages/client/test/slonik23.test.ts",
    "raw": "select count(1)\\n    from \${sql.identifier(['public', 'test_slonik23'])}",
    "untemplated": "select count(1)\\n    from $1",
    "nickname": "count"
  },
  {
    "filepath": "packages/client/test/slonik23.test.ts",
    "raw": "insert into test_slonik23(id, name)\\n    select *\\n    from \${sql.unnest(\\n      values.map(({id, name}) => [id, name]),\\n      ['int4', 'text'],\\n    )}\\n    returning *",
    "untemplated": "insert into test_slonik23(id, name)\\n    select *\\n    from $1\\n    returning *",
    "nickname": "insert-test_slonik23-select-returning_all"
  },
  {
    "filepath": "packages/client/test/slonik23.test.ts",
    "raw": "insert into test_slonik23\\n    select *\\n    from jsonb_populate_recordset(\\n      null::test_slonik23,\\n      \${JSON.stringify(records, null, 2)}\\n    )\\n    returning *",
    "untemplated": "insert into test_slonik23\\n    select *\\n    from jsonb_populate_recordset(\\n      null::test_slonik23,\\n      $1\\n    )\\n    returning *",
    "nickname": "bulk_insert-test_slonik23-jsonb_populate_recordset"
  },
  {
    "filepath": "packages/client/test/slonik23.test.ts",
    "raw": "insert into test_slonik23\\n    select *\\n    from jsonb_to_recordset(\\n      \${JSON.stringify(records, null, 2)}\\n    ) as x(id int, name text)\\n    returning *",
    "untemplated": "insert into test_slonik23\\n    select *\\n    from jsonb_to_recordset(\\n      $1\\n    ) as x(id int, name text)\\n    returning *",
    "nickname": "bulk_insert-test_slonik23-jsonb_to_recordset-returning_all"
  },
  {
    "filepath": "packages/client/test/slonik23.test.ts",
    "raw": "update test_slonik23\\n    set \${sql.join([sql\`name = 'one hundred'\`, sql\`id = 100\`], sql\`, \`)}\\n    where id = 1\\n    returning *",
    "untemplated": "update test_slonik23\\n    set $1\\n    where id = 1\\n    returning *",
    "nickname": "update-test_slonik23-by_id-returning_all"
  },
  {
    "filepath": "packages/client/test/slonik23.test.ts",
    "raw": "select * from test_slonik23 where \${idGreaterThan(1)}",
    "untemplated": "select * from test_slonik23 where $1",
    "nickname": "select-test_slonik23-by_id"
  },
  {
    "filepath": "packages/client/test/slonik23.test.ts",
    "raw": "select \${sql.binary(Buffer.from('hello'))} as b",
    "untemplated": "select $1 as b",
    "nickname": "select"
  },
  {
    "filepath": "packages/client/test/slonik23.test.ts",
    "raw": "drop table if exists jsonb_test;\\n    create table jsonb_test (id int, data jsonb);",
    "untemplated": "drop table if exists jsonb_test;\\n    create table jsonb_test (id int, data jsonb);",
    "nickname": "drop_if_exists_jsonb_test-create_jsonb_test"
  },
  {
    "filepath": "packages/client/test/slonik23.test.ts",
    "raw": "insert into jsonb_test values (1, \${sql.json({foo: 'bar'})})\\n    returning *",
    "untemplated": "insert into jsonb_test values (1, $1)\\n    returning *",
    "nickname": "insert-jsonb_test-returning_all"
  },
  {
    "filepath": "packages/client/test/slonik23.test.ts",
    "raw": "insert into jsonb_test values (1, \${JSON.stringify({foo: 'bar'})})\\n    returning *",
    "untemplated": "insert into jsonb_test values (1, $1)\\n    returning *",
    "nickname": "insert-jsonb_test-returning_all"
  },
  {
    "filepath": "packages/client/test/slonik23.test.ts",
    "raw": "delete from test_slonik23",
    "untemplated": "delete from test_slonik23",
    "nickname": "delete-from"
  },
  {
    "filepath": "packages/client/test/slonik23.test.ts",
    "raw": "insert into test_slonik23(id, name) values (10, 'ten')",
    "untemplated": "insert into test_slonik23(id, name) values (10, 'ten')",
    "nickname": "insert-test_slonik23"
  },
  {
    "filepath": "packages/client/test/slonik23.test.ts",
    "raw": "select count(1) from test_slonik23",
    "untemplated": "select count(1) from test_slonik23",
    "nickname": "count-test_slonik23"
  },
  {
    "filepath": "packages/client/test/slonik23.test.ts",
    "raw": "insert into test_slonik23(id, name) values (11, 'eleven')",
    "untemplated": "insert into test_slonik23(id, name) values (11, 'eleven')",
    "nickname": "insert-test_slonik23"
  },
  {
    "filepath": "packages/client/test/slonik23.test.ts",
    "raw": "select count(1) from test_slonik23",
    "untemplated": "select count(1) from test_slonik23",
    "nickname": "count-test_slonik23"
  },
  {
    "filepath": "packages/client/test/slonik23.test.ts",
    "raw": "select count(1) from test_slonik23",
    "untemplated": "select count(1) from test_slonik23",
    "nickname": "count-test_slonik23"
  },
  {
    "filepath": "packages/client/test/slonik23.test.ts",
    "raw": "select * from test_slonik23 where id >= 10",
    "untemplated": "select * from test_slonik23 where id >= 10",
    "nickname": "select-test_slonik23-filtered"
  },
  {
    "filepath": "packages/client/test/slonik23.test.ts",
    "raw": "select\\n      '1 day'::interval as day_interval,\\n      '1 hour'::interval as hour_interval,\\n      '2000-01-01T12:00:00Z'::timestamptz as timestamptz,\\n      '2000-01-01T12:00:00Z'::timestamp as timestamp,\\n      '2000-01-01T12:00:00Z'::date as date,\\n      (select count(*) from test_slonik23 where id = -1) as count",
    "untemplated": "select\\n      '1 day'::interval as day_interval,\\n      '1 hour'::interval as hour_interval,\\n      '2000-01-01T12:00:00Z'::timestamptz as timestamptz,\\n      '2000-01-01T12:00:00Z'::timestamp as timestamp,\\n      '2000-01-01T12:00:00Z'::date as date,\\n      (select count(*) from test_slonik23 where id = -1) as count",
    "nickname": "count-test_slonik23-by_id"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "drop table if exists test_slonik37;\\n    create table test_slonik37(id int unique, name text);\\n    insert into test_slonik37 values (1, 'one'), (2, 'two'), (3, 'three');",
    "untemplated": "drop table if exists test_slonik37;\\n    create table test_slonik37(id int unique, name text);\\n    insert into test_slonik37 values (1, 'one'), (2, 'two'), (3, 'three');",
    "nickname": "drop_if_exists_test_slonik37-create_test_slonik37-insert"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "select *\\n    from test_slonik37\\n    where name = any(\${sql.array(['one', 'two'], 'text')})",
    "untemplated": "select *\\n    from test_slonik37\\n    where name = any($1)",
    "nickname": "select-test_slonik37-filtered"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "select id from test_slonik37\\n      where name = any(\${sql.array(['one', 'two'], 'text')})",
    "untemplated": "select id from test_slonik37\\n      where name = any($1)",
    "nickname": "select-test_slonik37-filtered"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "select id\\n      from test_slonik37\\n      where \${isInGroupConditionSql}",
    "untemplated": "select id\\n      from test_slonik37\\n      where $1",
    "nickname": "select-test_slonik37-by_id"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "select id from test_slonik37\\n      where name = any(\${sql.array(['one', 'two'], 'text')})",
    "untemplated": "select id from test_slonik37\\n      where name = any($1)",
    "nickname": "select-test_slonik37-filtered"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "select id\\n      from test_slonik37\\n      where \${isInGroupConditionSql}",
    "untemplated": "select id\\n      from test_slonik37\\n      where $1",
    "nickname": "select-test_slonik37-by_id"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "select id from test_slonik37\\n      where name = 'one' or name in (\${name2})",
    "untemplated": "select id from test_slonik37\\n      where name = 'one' or name in ($1)",
    "nickname": "select-test_slonik37-filtered"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "select id\\n      from test_slonik37\\n      where \${isInGroupConditionSql}",
    "untemplated": "select id\\n      from test_slonik37\\n      where $1",
    "nickname": "select-test_slonik37-by_id"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "select count(1)\\n    from \${sql.identifier(['public', 'test_slonik37'])}",
    "untemplated": "select count(1)\\n    from $1",
    "nickname": "count"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "insert into test_slonik37(id, name)\\n    select *\\n    from \${sql.unnest(\\n      values.map(({id, name}) => [id, name]),\\n      ['int4', 'text'],\\n    )}\\n    returning *",
    "untemplated": "insert into test_slonik37(id, name)\\n    select *\\n    from $1\\n    returning *",
    "nickname": "insert-test_slonik37-select-returning_all"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "insert into test_slonik37\\n    select *\\n    from jsonb_populate_recordset(\\n      null::test_slonik37,\\n      \${JSON.stringify(records, null, 2)}\\n    )\\n    returning *",
    "untemplated": "insert into test_slonik37\\n    select *\\n    from jsonb_populate_recordset(\\n      null::test_slonik37,\\n      $1\\n    )\\n    returning *",
    "nickname": "bulk_insert-test_slonik37-jsonb_populate_recordset"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "insert into test_slonik37\\n    select *\\n    from jsonb_to_recordset(\\n      \${JSON.stringify(records, null, 2)}\\n    ) as x(id int, name text)\\n    returning *",
    "untemplated": "insert into test_slonik37\\n    select *\\n    from jsonb_to_recordset(\\n      $1\\n    ) as x(id int, name text)\\n    returning *",
    "nickname": "bulk_insert-test_slonik37-jsonb_to_recordset-returning_all"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "update test_slonik37\\n    set \${sql.join([sql\`name = 'one hundred'\`, sql\`id = 100\`], sql\`, \`)}\\n    where id = 1\\n    returning *",
    "untemplated": "update test_slonik37\\n    set $1\\n    where id = 1\\n    returning *",
    "nickname": "update-test_slonik37-by_id-returning_all"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "select * from test_slonik37 where \${idGreaterThan(1)}",
    "untemplated": "select * from test_slonik37 where $1",
    "nickname": "select-test_slonik37-by_id"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "select * from test_slonik37 where \${idGreaterThan(1)}",
    "untemplated": "select * from test_slonik37 where $1",
    "nickname": "select-test_slonik37-by_id"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "select '2000-01-01T12:00:00Z'::timestamptz + \${sql.interval({days: 1, hours: 1})} as ts",
    "untemplated": "select '2000-01-01T12:00:00Z'::timestamptz + $1 as ts",
    "nickname": "select"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "select \${sql.interval({days: 1})}",
    "untemplated": "select $1",
    "nickname": "select"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "select \${sql.binary(Buffer.from('hello'))} as b",
    "untemplated": "select $1 as b",
    "nickname": "select"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "drop table if exists jsonb_test;\\n    create table jsonb_test (id int, data jsonb);",
    "untemplated": "drop table if exists jsonb_test;\\n    create table jsonb_test (id int, data jsonb);",
    "nickname": "drop_if_exists_jsonb_test-create_jsonb_test"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "insert into jsonb_test values (1, \${sql.json({foo: 'bar'})})\\n    returning *",
    "untemplated": "insert into jsonb_test values (1, $1)\\n    returning *",
    "nickname": "insert-jsonb_test-returning_all"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "insert into jsonb_test values (1, \${sql.jsonb({foo: 'bar'})})\\n    returning *",
    "untemplated": "insert into jsonb_test values (1, $1)\\n    returning *",
    "nickname": "insert-jsonb_test-returning_all"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "insert into jsonb_test values (1, \${JSON.stringify({foo: 'bar'})})\\n    returning *",
    "untemplated": "insert into jsonb_test values (1, $1)\\n    returning *",
    "nickname": "insert-jsonb_test-returning_all"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "delete from test_slonik37",
    "untemplated": "delete from test_slonik37",
    "nickname": "delete-from"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "insert into test_slonik37(id, name) values (10, 'ten')",
    "untemplated": "insert into test_slonik37(id, name) values (10, 'ten')",
    "nickname": "insert-test_slonik37"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "select count(1) from test_slonik37",
    "untemplated": "select count(1) from test_slonik37",
    "nickname": "count-test_slonik37"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "insert into test_slonik37(id, name) values (11, 'eleven')",
    "untemplated": "insert into test_slonik37(id, name) values (11, 'eleven')",
    "nickname": "insert-test_slonik37"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "select count(1) from test_slonik37",
    "untemplated": "select count(1) from test_slonik37",
    "nickname": "count-test_slonik37"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "select count(1) from test_slonik37",
    "untemplated": "select count(1) from test_slonik37",
    "nickname": "count-test_slonik37"
  },
  {
    "filepath": "packages/client/test/slonik37.test.ts",
    "raw": "select * from test_slonik37 where id >= 10",
    "untemplated": "select * from test_slonik37 where id >= 10",
    "nickname": "select-test_slonik37-filtered"
  },
  {
    "filepath": "packages/client/test/type-parsers.test.ts",
    "raw": "select\\n      \${sql.interval({days: 1})} as day_interval,\\n      \${sql.interval({hours: 1})} as hour_interval,\\n      true as so,\\n      false as not_so,\\n      0.4::float4 as float4,\\n      0.8::float8 as float8,\\n      '{\\"a\\":1}'::json as json,\\n      '{\\"a\\":1}'::jsonb as jsonb,\\n      '{a,b,c}'::text[] as arr,\\n      array(select id from type_parsers_test) as arr2,\\n      '2000-01-01T12:00:00Z'::timestamptz as timestamptz,\\n      '2000-01-01T12:00:00Z'::timestamp as timestamp,\\n      '2000-01-01T12:00:00Z'::date as date,\\n      (select count(*) from type_parsers_test where id = -1) as count",
    "untemplated": "select\\n      $1 as day_interval,\\n      $2'::text[] as arr,\\n      array(select id from type_parsers_test) as arr2,\\n      '2000-01-01T12:00:00Z'::timestamptz as timestamptz,\\n      '2000-01-01T12:00:00Z'::timestamp as timestamp,\\n      '2000-01-01T12:00:00Z'::date as date,\\n      (select count(*) from type_parsers_test where id = -1) as count",
    "nickname": "count"
  },
  {
    "filepath": "packages/client/test/types.test.ts",
    "raw": "drop table if exists test_table;\\n    create table test_table(id int, label text);\\n    insert into test_table values (1, 'a'), (2, 'b'), (3, null);",
    "untemplated": "drop table if exists test_table;\\n    create table test_table(id int, label text);\\n    insert into test_table values (1, 'a'), (2, 'b'), (3, null);",
    "nickname": "drop_if_exists_test_table-create_test_table-insert-test_table"
  },
  {
    "filepath": "packages/client/test/types.test.ts",
    "raw": "select * from test_table limit 1",
    "untemplated": "select * from test_table limit 1",
    "nickname": "select-test_table-limited"
  },
  {
    "filepath": "packages/client/test/types.test.ts",
    "raw": "select * from test_table\\n    where id <= \${2}\\n    and label = \${'a'}",
    "untemplated": "select * from test_table\\n    where id <= $1\\n    and label = $2",
    "nickname": "select-test_table-by_id"
  },
  {
    "filepath": "packages/client/test/types.test.ts",
    "raw": "select * from test_table\\n    where id <= \${2}\\n    and label = \${\\n      // @ts-expect-error supposed to be a string\\n      22\\n    }",
    "untemplated": "select * from test_table\\n    where id <= $1\\n    and label = $2",
    "nickname": "select-test_table-by_id"
  },
  {
    "filepath": "packages/client/test/zod.test.ts",
    "raw": "drop table if exists zod_test;\\n    create table zod_test(id int, location text, label text);\\n    insert into zod_test values (1, '70,-108', 'a'), (2, '71,-102', 'b'), (3, '66,-90', null);",
    "untemplated": "drop table if exists zod_test;\\n    create table zod_test(id int, location text, label text);\\n    insert into zod_test values (1, '70,-108', 'a'), (2, '71,-102', 'b'), (3, '66,-90', null);",
    "nickname": "drop_if_exists_zod_test-create_zod_test-insert-zod_test"
  },
  {
    "filepath": "packages/migra/test/fixtures.ts",
    "raw": "drop database if exists \${sql.identifier([db])}",
    "untemplated": "drop database if exists $1",
    "nickname": "drop_db"
  },
  {
    "filepath": "packages/migra/test/fixtures.ts",
    "raw": "create database \${sql.identifier([db])}",
    "untemplated": "create database $1",
    "nickname": "create_db"
  },
  {
    "filepath": "packages/migra/test/fixtures.ts",
    "raw": "select exists(select 1 from pg_catalog.pg_roles where rolname = 'schemainspect_test_role')",
    "untemplated": "select exists(select 1 from pg_catalog.pg_roles where rolname = 'schemainspect_test_role')",
    "nickname": "select-exists-pg_catalog_pg_roles-filtered"
  },
  {
    "filepath": "packages/migra/test/fixtures.ts",
    "raw": "create role schemainspect_test_role",
    "untemplated": "create role schemainspect_test_role",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/limitations.test.ts",
    "raw": "create domain test_domain as text",
    "untemplated": "create domain test_domain as text",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/limitations.test.ts",
    "raw": "create domain test_domain as integer",
    "untemplated": "create domain test_domain as integer",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/setup.ts",
    "raw": "drop schema if exists migra_test_schema cascade;\\n    create schema migra_test_schema;\\n\\n    create table if not exists migra_test_schema.test_table_1 (id int not null, name text);\\n    create table if not exists migra_test_schema.test_table_2 (slug text);",
    "untemplated": "drop schema if exists migra_test_schema cascade;\\n    create schema migra_test_schema;\\n\\n    create table if not exists migra_test_schema.test_table_1 (id int not null, name text);\\n    create table if not exists migra_test_schema.test_table_2 (slug text);",
    "nickname": "drop_schema_if_exists_migra_test_schema"
  },
  {
    "filepath": "packages/migra/test/setup.ts",
    "raw": "select table_name\\n    from information_schema.tables\\n    where table_schema = 'migra_test_schema'\\n    order by table_name asc;",
    "untemplated": "select table_name\\n    from information_schema.tables\\n    where table_schema = 'migra_test_schema'\\n    order by table_name asc;",
    "nickname": "select-information_schema_tables-filtered-ordered"
  },
  {
    "filepath": "packages/migra/test/setup.ts",
    "raw": "drop schema if exists migra_test_schema cascade;\\n    create schema migra_test_schema;\\n    create table if not exists migra_test_schema.test_table_1 (id int);",
    "untemplated": "drop schema if exists migra_test_schema cascade;\\n    create schema migra_test_schema;\\n    create table if not exists migra_test_schema.test_table_1 (id int);",
    "nickname": "drop_schema_if_exists_migra_test_schema"
  },
  {
    "filepath": "packages/migrator/src/migrator.ts",
    "raw": "create table if not exists \${this.migrationTableNameIdentifier()}(\\n        name text primary key,\\n        content text not null,\\n        status text,\\n        date timestamptz not null default now()\\n      )",
    "untemplated": "create table if not exists $1(\\n        name text primary key,\\n        content text not null,\\n        status text,\\n        date timestamptz not null default now()\\n      )",
    "nickname": "create_if"
  },
  {
    "filepath": "packages/migrator/src/migrator.ts",
    "raw": "select pg_advisory_lock(\${this.advisoryLockId()})",
    "untemplated": "select pg_advisory_lock($1)",
    "nickname": "select-pg_advisory_lock"
  },
  {
    "filepath": "packages/migrator/src/migrator.ts",
    "raw": "select pg_advisory_unlock(\${this.advisoryLockId()})",
    "untemplated": "select pg_advisory_unlock($1)",
    "nickname": "select-pg_advisory_unlock"
  },
  {
    "filepath": "packages/migrator/src/migrator.ts",
    "raw": "insert into \${this.migrationTableNameIdentifier()}(name, content, status)\\n      values (\${name}, \${this.content(name)}, 'executed')\\n      on conflict (name) do update\\n      set\\n        content = excluded.content,\\n        status = excluded.status,\\n        date = excluded.date",
    "untemplated": "insert into $1(name, content, status)\\n      values ($2, $3, 'executed')\\n      on conflict (name) do update\\n      set\\n        content = excluded.content,\\n        status = excluded.status,\\n        date = excluded.date",
    "nickname": "upsert-update-set-content"
  },
  {
    "filepath": "packages/migrator/src/migrator.ts",
    "raw": "delete from \${this.migrationTableNameIdentifier()}\\n      where name = \${name}",
    "untemplated": "delete from $1\\n      where name = $2",
    "nickname": "delete-from-by_id"
  },
  {
    "filepath": "packages/migrator/src/migrator.ts",
    "raw": "drop table if exists \${this.migrationTableNameIdentifier()}",
    "untemplated": "drop table if exists $1",
    "nickname": "drop_if_exists"
  },
  {
    "filepath": "packages/migrator/src/migrator.ts",
    "raw": "delete from \${this.migrationTableNameIdentifier()}",
    "untemplated": "delete from $1",
    "nickname": "delete-from"
  },
  {
    "filepath": "packages/migrator/src/migrator.ts",
    "raw": "insert into \${this.migrationTableNameIdentifier()} (name, content, status)\\n        select *\\n        from jsonb_to_recordset(\${JSON.stringify(records, null, 2)})\\n          as t(name text, content text, status text)",
    "untemplated": "insert into $1 (name, content, status)\\n        select *\\n        from jsonb_to_recordset($2)\\n          as t(name text, content text, status text)",
    "nickname": "bulk_insert-jsonb_to_recordset"
  },
  {
    "filepath": "packages/migrator/src/migrator.ts",
    "raw": "select * from \${this.migrationTableNameIdentifier()}",
    "untemplated": "select * from $1",
    "nickname": "select"
  },
  {
    "filepath": "packages/migrator/src/migrator.ts",
    "raw": "delete from \${this.migrationTableNameIdentifier()};\\n\\n          insert into \${this.migrationTableNameIdentifier()} (name, content, status)\\n          select *\\n          from jsonb_to_recordset(\${JSON.stringify(newRecords, null, 2)})\\n            as t(name text, content text, status text);",
    "untemplated": "delete from $1;\\n\\n          insert into $2 (name, content, status)\\n          select *\\n          from jsonb_to_recordset($3)\\n            as t(name text, content text, status text);",
    "nickname": "delete-from-bulk_insert-jsonb_to_recordset"
  },
  {
    "filepath": "packages/migrator/src/migrator.ts",
    "raw": "select * from \${this.migrationTableNameIdentifier()}",
    "untemplated": "select * from $1",
    "nickname": "select"
  },
  {
    "filepath": "packages/migrator/src/migrator.ts",
    "raw": "create database \${sql.identifier([shadowDbName])}",
    "untemplated": "create database $1",
    "nickname": "create_db"
  },
  {
    "filepath": "packages/migrator/src/migrator.ts",
    "raw": "drop database \${sql.identifier([shadowDbName])} with (force)",
    "untemplated": "drop database $1 with (force)",
    "nickname": "drop_db-with"
  },
  {
    "filepath": "packages/migrator/src/migrator.ts",
    "raw": "drop database \${sql.identifier([shadowDbName])}",
    "untemplated": "drop database $1",
    "nickname": "drop_db"
  },
  {
    "filepath": "packages/migrator/test/basic.test.ts",
    "raw": "select tablename\\n        from pg_catalog.pg_tables\\n        where schemaname = \${helper.schemaName}\\n        order by tablename",
    "untemplated": "select tablename\\n        from pg_catalog.pg_tables\\n        where schemaname = $1\\n        order by tablename",
    "nickname": "select-pg_catalog_pg_tables-by_id-ordered"
  },
  {
    "filepath": "packages/migrator/test/basic.test.ts",
    "raw": "drop schema if exists some_other_schema cascade",
    "untemplated": "drop schema if exists some_other_schema cascade",
    "nickname": "drop_schema_if_exists_some_other_schema"
  },
  {
    "filepath": "packages/migrator/test/basic.test.ts",
    "raw": "create schema some_other_schema",
    "untemplated": "create schema some_other_schema",
    "nickname": "create_schema_some_other_schema"
  },
  {
    "filepath": "packages/migrator/test/basic.test.ts",
    "raw": "select name from some_other_schema.migration_meta",
    "untemplated": "select name from some_other_schema.migration_meta",
    "nickname": "select-some_other_schema_migration_meta"
  },
  {
    "filepath": "packages/migrator/test/errors.test.ts",
    "raw": "select * from errors_table1",
    "untemplated": "select * from errors_table1",
    "nickname": "select-errors_table1"
  },
  {
    "filepath": "packages/migrator/test/errors.test.ts",
    "raw": "select name from migrations",
    "untemplated": "select name from migrations",
    "nickname": "select-migrations"
  },
  {
    "filepath": "packages/migrator/test/errors.test.ts",
    "raw": "select * from errors_table1",
    "untemplated": "select * from errors_table1",
    "nickname": "select-errors_table1"
  },
  {
    "filepath": "packages/migrator/test/errors.test.ts",
    "raw": "select * from migrations",
    "untemplated": "select * from migrations",
    "nickname": "select-migrations"
  },
  {
    "filepath": "packages/migrator/test/generated/run/migrations/04.four.ts",
    "raw": "create table migration_test_4(id int)",
    "untemplated": "create table migration_test_4(id int)",
    "nickname": "create_migration_test_4"
  },
  {
    "filepath": "packages/migrator/test/generated/run/migrations/04.four.ts",
    "raw": "drop table migration_test_4",
    "untemplated": "drop table migration_test_4",
    "nickname": "drop_migration_test_4"
  },
  {
    "filepath": "packages/migrator/test/pool-helper.ts",
    "raw": "select 1 from pg_database where datname = \${dbName}",
    "untemplated": "select 1 from pg_database where datname = $1",
    "nickname": "select-pg_database-by_id"
  },
  {
    "filepath": "packages/migrator/test/pool-helper.ts",
    "raw": "create database \${sql.identifier([dbName])}",
    "untemplated": "create database $1",
    "nickname": "create_db"
  },
  {
    "filepath": "packages/migrator/test/pool-helper.ts",
    "raw": "drop schema if exists \${schemaIdentifier} cascade",
    "untemplated": "drop schema if exists $1 cascade",
    "nickname": "drop_schema_if_exists"
  },
  {
    "filepath": "packages/migrator/test/pool-helper.ts",
    "raw": "create schema \${schemaIdentifier}",
    "untemplated": "create schema $1",
    "nickname": "create_schema"
  },
  {
    "filepath": "packages/migrator/test/repair.test.ts",
    "raw": "select hash\\n        from migrations",
    "untemplated": "select hash\\n        from migrations",
    "nickname": "select-migrations"
  },
  {
    "filepath": "packages/migrator/test/repair.test.ts",
    "raw": "update migrations\\n        set hash = \${hash}",
    "untemplated": "update migrations\\n        set hash = $1",
    "nickname": "update-migrations-set-hash"
  },
  {
    "filepath": "packages/migrator/test/script-migrations.test.ts",
    "raw": "select tablename\\n      from pg_catalog.pg_tables\\n      where tablename like 'migration_test_%'\\n      and schemaname = \${helper.schemaName}\\n      order by tablename",
    "untemplated": "select tablename\\n      from pg_catalog.pg_tables\\n      where tablename like 'migration_test_%'\\n      and schemaname = $1\\n      order by tablename",
    "nickname": "select-pg_catalog_pg_tables-filtered-ordered"
  },
  {
    "filepath": "packages/migrator/test/transaction.test.ts",
    "raw": "drop table if exists rollback_happens",
    "untemplated": "drop table if exists rollback_happens",
    "nickname": "drop_if_exists_rollback_happens"
  },
  {
    "filepath": "packages/migrator/test/transaction.test.ts",
    "raw": "create table rollback_happens(id int primary key)",
    "untemplated": "create table rollback_happens(id int primary key)",
    "nickname": "create_rollback_happens"
  },
  {
    "filepath": "packages/migrator/test/transaction.test.ts",
    "raw": "select * from rollback_happens",
    "untemplated": "select * from rollback_happens",
    "nickname": "select-rollback_happens"
  },
  {
    "filepath": "packages/migrator/test/transaction.test.ts",
    "raw": "select * from rollback_happens_migrations",
    "untemplated": "select * from rollback_happens_migrations",
    "nickname": "select-rollback_happens_migrations"
  },
  {
    "filepath": "packages/migrator/test/transaction.test.ts",
    "raw": "drop table if exists disabled_transaction_test_table;\\n      create table disabled_transaction_test_table(id int primary key);",
    "untemplated": "drop table if exists disabled_transaction_test_table;\\n      create table disabled_transaction_test_table(id int primary key);",
    "nickname": "drop_if_exists_disabled_transaction_test_table"
  },
  {
    "filepath": "packages/migrator/test/transaction.test.ts",
    "raw": "select id from disabled_transaction_test_table",
    "untemplated": "select id from disabled_transaction_test_table",
    "nickname": "select-disabled_transaction_test_table"
  },
  {
    "filepath": "packages/migrator/test/transaction.test.ts",
    "raw": "select name from disabled_transaction_migrations",
    "untemplated": "select name from disabled_transaction_migrations",
    "nickname": "select-disabled_transaction_migrations"
  },
  {
    "filepath": "packages/schemainspect/scripts/generate-types.ts",
    "raw": "drop database if exists \${sql.identifier([dbName])}",
    "untemplated": "drop database if exists $1",
    "nickname": "drop_db"
  },
  {
    "filepath": "packages/schemainspect/scripts/generate-types.ts",
    "raw": "create database \${sql.identifier([dbName])}",
    "untemplated": "create database $1",
    "nickname": "create_db"
  },
  {
    "filepath": "packages/schemainspect/src/pg/obj.ts",
    "raw": "select current_setting('server_version') server_version",
    "untemplated": "select current_setting('server_version') server_version",
    "nickname": "select-current_setting"
  },
  {
    "filepath": "packages/schemainspect/test/json.test.ts",
    "raw": "drop database if exists \${sql.identifier([dbName])}",
    "untemplated": "drop database if exists $1",
    "nickname": "drop_db"
  },
  {
    "filepath": "packages/schemainspect/test/json.test.ts",
    "raw": "create database \${sql.identifier([dbName])}",
    "untemplated": "create database $1",
    "nickname": "create_db"
  },
  {
    "filepath": "packages/typegen/src/pg/mappings.ts",
    "raw": "select distinct\\n      e.enumtypid,\\n      t.typname,\\n      e.enumlabel,\\n      t.typnamespace::regnamespace::text as schema_name,\\n      e.enumsortorder,\\n      t.typnamespace::regnamespace::text = any(current_schemas(true)) as in_search_path,\\n      case\\n        when t.typnamespace::regnamespace::text = any(current_schemas(false))\\n          then quote_ident(t.typname)\\n        else\\n          quote_ident(t.typnamespace::regnamespace::text) || '.' || quote_ident(t.typname)\\n      end as searchable_type_name\\n    from\\n      pg_enum as e\\n    join\\n      pg_type as t\\n    on\\n      t.oid = e.enumtypid\\n    order by\\n      t.typnamespace::regnamespace::text,\\n      t.typname,\\n      e.enumsortorder",
    "untemplated": "select distinct\\n      e.enumtypid,\\n      t.typname,\\n      e.enumlabel,\\n      t.typnamespace::regnamespace::text as schema_name,\\n      e.enumsortorder,\\n      t.typnamespace::regnamespace::text = any(current_schemas(true)) as in_search_path,\\n      case\\n        when t.typnamespace::regnamespace::text = any(current_schemas(false))\\n          then quote_ident(t.typname)\\n        else\\n          quote_ident(t.typnamespace::regnamespace::text) || '.' || quote_ident(t.typname)\\n      end as searchable_type_name\\n    from\\n      pg_enum as e\\n    join\\n      pg_type as t\\n    on\\n      t.oid = e.enumtypid\\n    order by\\n      t.typnamespace::regnamespace::text,\\n      t.typname,\\n      e.enumsortorder",
    "nickname": "select-any-pg_enum-pg_type-join-ordered"
  },
  {
    "filepath": "packages/typegen/src/pg/mappings.ts",
    "raw": "select oid, typname, oid::regtype as regtype\\n    from pg_type\\n    where oid is not null",
    "untemplated": "select oid, typname, oid::regtype as regtype\\n    from pg_type\\n    where oid is not null",
    "nickname": "select-pg_type-filtered"
  },
  {
    "filepath": "packages/typegen/src/query/column-info.ts",
    "raw": "create schema if not exists \${schemaIdentifier}",
    "untemplated": "create schema if not exists $1",
    "nickname": "create_schema_if"
  },
  {
    "filepath": "packages/typegen/src/query/column-info.ts",
    "raw": "select prosrc, proargnames, proargmodes::text[]\\n              from pg_proc\\n              join pg_language on pg_language.oid = pg_proc.prolang\\n              where\\n              pg_language.lanname = 'sql'\\n              and prosrc is not null\\n              and proname = \${f.function.name}\\n              limit 2",
    "untemplated": "select prosrc, proargnames, proargmodes::text[]\\n              from pg_proc\\n              join pg_language on pg_language.oid = pg_proc.prolang\\n              where\\n              pg_language.lanname = 'sql'\\n              and prosrc is not null\\n              and proname = $1\\n              limit 2",
    "nickname": "select-pg_proc-pg_language-join-filtered-limited"
  },
  {
    "filepath": "packages/typegen/src/query/column-info.ts",
    "raw": "drop schema if exists \${sql.identifier([schemaName])} cascade;",
    "untemplated": "drop schema if exists $1 cascade;",
    "nickname": "drop_schema_if_exists"
  },
  {
    "filepath": "packages/typegen/src/query/parameters.ts",
    "raw": "select parameter_types::text\\n        from pg_prepared_statements\\n        where name = \${statementName}",
    "untemplated": "select parameter_types::text\\n        from pg_prepared_statements\\n        where name = $1",
    "nickname": "select-pg_prepared_statements-by_id"
  },
  {
    "filepath": "packages/typegen/src/type-parsers/map-type-parser.ts",
    "raw": "select \${sampleValue}::\${sampleValueType}",
    "untemplated": "select $1::$2",
    "nickname": "select"
  },
  {
    "filepath": "packages/typegen/src/types.ts",
    "raw": "* running postgres with docker-compose |",
    "untemplated": "* running postgres with docker-compose |",
    "nickname": "with-docker_compose"
  },
  {
    "filepath": "packages/typegen/test/ambiguous-tables.test.ts",
    "raw": "drop schema if exists ambiguous_tables_1 cascade;\\n    drop schema if exists ambiguous_tables_2 cascade;\\n\\n    create schema ambiguous_tables_1;\\n    create schema ambiguous_tables_2;\\n\\n    -- default schema\\n    create type test_enum as enum('default_schema_A', 'default_schema_B', 'default_schema_C');\\n    -- specific schema\\n    create type ambiguous_tables_1.test_enum as enum('schema1_A', 'schema1_B', 'schema1_C');\\n    -- another specific schema\\n    create type ambiguous_tables_2.test_enum as enum('schema2_A', 'schema2_B', 'schema2_C');\\n\\n    create table ambiguous_tables_1.test_table(id int not null, e ambiguous_tables_1.test_enum, eee test_enum not null);\\n    create table ambiguous_tables_2.test_table(id int, e ambiguous_tables_2.test_enum);\\n\\n    comment on column ambiguous_tables_1.test_table.id is 'This is a comment for ambiguous_tables_1.test_table.id';\\n    comment on column ambiguous_tables_2.test_table.id is 'This is a comment for ambiguous_tables_2.test_table.id';",
    "untemplated": "drop schema if exists ambiguous_tables_1 cascade;\\n    drop schema if exists ambiguous_tables_2 cascade;\\n\\n    create schema ambiguous_tables_1;\\n    create schema ambiguous_tables_2;\\n\\n    -- default schema\\n    create type test_enum as enum('default_schema_A', 'default_schema_B', 'default_schema_C');\\n    -- specific schema\\n    create type ambiguous_tables_1.test_enum as enum('schema1_A', 'schema1_B', 'schema1_C');\\n    -- another specific schema\\n    create type ambiguous_tables_2.test_enum as enum('schema2_A', 'schema2_B', 'schema2_C');\\n\\n    create table ambiguous_tables_1.test_table(id int not null, e ambiguous_tables_1.test_enum, eee test_enum not null);\\n    create table ambiguous_tables_2.test_table(id int, e ambiguous_tables_2.test_enum);\\n\\n    comment on column ambiguous_tables_1.test_table.id is 'This is a comment for ambiguous_tables_1.test_table.id';\\n    comment on column ambiguous_tables_2.test_table.id is 'This is a comment for ambiguous_tables_2.test_table.id';",
    "nickname": "drop_schema_if_exists_ambiguous_tables_1"
  },
  {
    "filepath": "packages/typegen/test/branding.test.ts",
    "raw": "create table test_table(\\n      id int primary key,\\n      n int\\n    );",
    "untemplated": "create table test_table(\\n      id int primary key,\\n      n int\\n    );",
    "nickname": "create_test_table"
  },
  {
    "filepath": "packages/typegen/test/cte.test.ts",
    "raw": "create table test_table1(\\n      a int not null\\n    );\\n    create table test_table2(\\n      b double precision\\n    );\\n    create table test_table3(\\n      t text,\\n      t_nn text not null,\\n      n int\\n    );",
    "untemplated": "create table test_table1(\\n      a int not null\\n    );\\n    create table test_table2(\\n      b double precision\\n    );\\n    create table test_table3(\\n      t text,\\n      t_nn text not null,\\n      n int\\n    );",
    "nickname": "create_test_table1-create_test_table2-create_test_table3"
  },
  {
    "filepath": "packages/typegen/test/deletes.test.ts",
    "raw": "create table test_table1(\\n      a int primary key,\\n      b int\\n    );\\n\\n    create table test_table2(\\n      a int not null,\\n      table1_a int references test_table1(a)\\n    );",
    "untemplated": "create table test_table1(\\n      a int primary key,\\n      b int\\n    );\\n\\n    create table test_table2(\\n      a int not null,\\n      table1_a int references test_table1(a)\\n    );",
    "nickname": "create_test_table1-create_test_table2"
  },
  {
    "filepath": "packages/typegen/test/example.test.ts",
    "raw": "create table test_table(foo int not null, bar text);\\n\\n    comment on column test_table.bar is 'Look, ma! A comment from postgres!'",
    "untemplated": "create table test_table(foo int not null, bar text);\\n\\n    comment on column test_table.bar is 'Look, ma! A comment from postgres!'",
    "nickname": "create_test_table"
  },
  {
    "filepath": "packages/typegen/test/function.test.ts",
    "raw": "create table table1(a int not null);",
    "untemplated": "create table table1(a int not null);",
    "nickname": "create_table1"
  },
  {
    "filepath": "packages/typegen/test/hand-holding.test.ts",
    "raw": "create table test_table1(\\n      a int not null,\\n      b int\\n    );",
    "untemplated": "create table test_table1(\\n      a int not null,\\n      b int\\n    );",
    "nickname": "create_test_table1"
  },
  {
    "filepath": "packages/typegen/test/helper.ts",
    "raw": "const admin = createClient(connectionString)\\n\\n/** get an alt connection string, but for the specified db instead of the default */\\nconst getConnectionString = (db: string) => connectionString.split('/').slice(0, -1).concat([db]).join('/')\\n\\nexport const getPureHelper = (params: {__filename: string}) => {\\n  const poolHelper = getPoolHelper({...params, baseConnectionURI: connectionString})\\n  const logger = {\\n    debug: jest.fn(),\\n    info: jest.fn(),\\n    warn: jest.fn(console.warn),\\n    error: jest.fn(console.error),\\n  }\\n\\n  const typegenOptions = (baseDir: string): Partial<typegen.Options> => ({\\n    rootDir: baseDir,\\n    connectionString: poolHelper.pool.connectionString(), // no longer needed useful thing: can set search path via URL with",
    "untemplated": "const admin = createClient(connectionString)\\n\\n/** get an alt connection string, but for the specified db instead of the default */\\nconst getConnectionString = (db: string) => connectionString.split('/').slice(0, -1).concat([db]).join('/')\\n\\nexport const getPureHelper = (params: {__filename: string}) => {\\n  const poolHelper = getPoolHelper({...params, baseConnectionURI: connectionString})\\n  const logger = {\\n    debug: jest.fn(),\\n    info: jest.fn(),\\n    warn: jest.fn(console.warn),\\n    error: jest.fn(console.error),\\n  }\\n\\n  const typegenOptions = (baseDir: string): Partial<typegen.Options> => ({\\n    rootDir: baseDir,\\n    connectionString: poolHelper.pool.connectionString(), // no longer needed useful thing: can set search path via URL with",
    "nickname": "set-search-with"
  },
  {
    "filepath": "packages/typegen/test/helper.ts",
    "raw": "create database \${sql.identifier([dbName])}",
    "untemplated": "create database $1",
    "nickname": "create_db"
  },
  {
    "filepath": "packages/typegen/test/helper.ts",
    "raw": "drop schema if exists \${schemaIdentifier} cascade;\\n      create schema \${schemaIdentifier}",
    "untemplated": "drop schema if exists $1 cascade;\\n      create schema $2",
    "nickname": "drop_schema_if_exists-create_schema"
  },
  {
    "filepath": "packages/typegen/test/ignore.test.ts",
    "raw": "create table table1(a int not null);",
    "untemplated": "create table table1(a int not null);",
    "nickname": "create_table1"
  },
  {
    "filepath": "packages/typegen/test/inline-tag-modification.test.ts",
    "raw": "create table test_table(foo int not null, bar text);",
    "untemplated": "create table test_table(foo int not null, bar text);",
    "nickname": "create_test_table"
  },
  {
    "filepath": "packages/typegen/test/left-join.test.ts",
    "raw": "create table table1(a int not null);\\n    create table table2(b int not null);\\n\\n    insert into table1 (a) values (1), (2), (3);\\n    insert into table2 (b) values (2), (3), (4);",
    "untemplated": "create table table1(a int not null);\\n    create table table2(b int not null);\\n\\n    insert into table1 (a) values (1), (2), (3);\\n    insert into table2 (b) values (2), (3), (4);",
    "nickname": "create_table1-create_table2-insert-table1-table2"
  },
  {
    "filepath": "packages/typegen/test/limitations.test.ts",
    "raw": "create table test_table(\\n      id int primary key,\\n      n int\\n    );",
    "untemplated": "create table test_table(\\n      id int primary key,\\n      n int\\n    );",
    "nickname": "create_test_table"
  },
  {
    "filepath": "packages/typegen/test/limitations.test.ts",
    "raw": "select count(*) from test_table",
    "untemplated": "select count(*) from test_table",
    "nickname": "count-test_table"
  },
  {
    "filepath": "packages/typegen/test/limitations.test.ts",
    "raw": "select table_schema, table_name from information_schema.tables where table_name like 'semicolon_query_table%'",
    "untemplated": "select table_schema, table_name from information_schema.tables where table_name like 'semicolon_query_table%'",
    "nickname": "select-information_schema_tables-filtered"
  },
  {
    "filepath": "packages/typegen/test/locking.test.ts",
    "raw": "create table table1(a int not null);\\n\\n    insert into table1 (a) values (1), (2), (3);",
    "untemplated": "create table table1(a int not null);\\n\\n    insert into table1 (a) values (1), (2), (3);",
    "nickname": "create_table1-insert-table1"
  },
  {
    "filepath": "packages/typegen/test/options.test.ts",
    "raw": "create type test_enum as enum('aa', 'bb', 'cc');\\n\\n    create table test_table(\\n      id int primary key,\\n      n int,\\n      t text,\\n      t_nn text not null,\\n      cv varchar(1),\\n      arr text[],\\n      e test_enum,\\n      tz timestamptz,\\n      tz_nn timestamptz not null default now(),\\n      j json,\\n      jb jsonb,\\n      j_nn json not null,\\n      jb_nn jsonb not null,\\n      d_p numeric(8),\\n      d_ps numeric(8, 4)\\n    );\\n\\n    comment on column test_table.t is 'Some custom comment on \\"t\\"';",
    "untemplated": "create type test_enum as enum('aa', 'bb', 'cc');\\n\\n    create table test_table(\\n      id int primary key,\\n      n int,\\n      t text,\\n      t_nn text not null,\\n      cv varchar(1),\\n      arr text[],\\n      e test_enum,\\n      tz timestamptz,\\n      tz_nn timestamptz not null default now(),\\n      j json,\\n      jb jsonb,\\n      j_nn json not null,\\n      jb_nn jsonb not null,\\n      d_p numeric(8),\\n      d_ps numeric(8, 4)\\n    );\\n\\n    comment on column test_table.t is 'Some custom comment on \\"t\\"';",
    "nickname": "create_type_test_enum-create_test_table"
  },
  {
    "filepath": "packages/typegen/test/pg-enum.test.ts",
    "raw": "create table test_table1(\\n      a int not null,\\n      b int\\n    );",
    "untemplated": "create table test_table1(\\n      a int not null,\\n      b int\\n    );",
    "nickname": "create_test_table1"
  },
  {
    "filepath": "packages/typegen/test/primitives.test.ts",
    "raw": "create table test_table(\\n      a int not null,\\n      b int\\n    )",
    "untemplated": "create table test_table(\\n      a int not null,\\n      b int\\n    )",
    "nickname": "create_test_table"
  },
  {
    "filepath": "packages/typegen/test/property-access-tag.test.ts",
    "raw": "create table test_table(foo int not null, bar text);\\n\\n    comment on column test_table.bar is 'Look, ma! A comment from postgres!'",
    "untemplated": "create table test_table(foo int not null, bar text);\\n\\n    comment on column test_table.bar is 'Look, ma! A comment from postgres!'",
    "nickname": "create_test_table"
  },
  {
    "filepath": "packages/typegen/test/subquery.test.ts",
    "raw": "create table test_table1(\\n      a int not null,\\n      b double precision\\n    );",
    "untemplated": "create table test_table1(\\n      a int not null,\\n      b double precision\\n    );",
    "nickname": "create_test_table1"
  },
  {
    "filepath": "packages/typegen/test/types.test.ts",
    "raw": "create table types_test_table(foo int primary key, bar text);\\n\\n    insert into types_test_table(foo, bar) values (1, 'a')",
    "untemplated": "create table types_test_table(foo int primary key, bar text);\\n\\n    insert into types_test_table(foo, bar) values (1, 'a')",
    "nickname": "create_types_test_table-insert-types_test_table"
  },
  {
    "filepath": "packages/typegen/test/types.test.ts",
    "raw": "select * from types_test_table",
    "untemplated": "select * from types_test_table",
    "nickname": "select-types_test_table"
  },
  {
    "filepath": "packages/typegen/test/ugly.test.ts",
    "raw": "create table test_table(\\n      id int primary key,\\n      n int\\n    );",
    "untemplated": "create table test_table(\\n      id int primary key,\\n      n int\\n    );",
    "nickname": "create_test_table"
  },
  {
    "filepath": "packages/typegen/test/view.test.ts",
    "raw": "create table test_table1(\\n      a int not null\\n    );\\n\\n    create table test_table2(\\n      b double precision\\n    );\\n\\n    create table test_table3(\\n      c int not null\\n    );\\n\\n    create view test_view as\\n    select a as a_view, b as b_view from\\n    test_table1\\n    join test_table2 on test_table1.a = test_table2.b;\\n\\n    create or replace function get_test_table1_by_a(input_a int)\\n    returns table (a int) as\\n    $$\\n      select a from test_table1 where a = input_a;\\n    $$\\n    language sql;\\n\\n    create or replace function get_a_timestamp(input_a int)\\n    returns timestamptz as\\n    $$\\n      select pg_catalog.now()\\n    $$\\n    language sql;\\n\\n    create or replace function get_one_field(input_a int)\\n    returns int as\\n    $$\\n      select a as result from test_table1 where a >= input_a;\\n    $$\\n    language sql;",
    "untemplated": "create table test_table1(\\n      a int not null\\n    );\\n\\n    create table test_table2(\\n      b double precision\\n    );\\n\\n    create table test_table3(\\n      c int not null\\n    );\\n\\n    create view test_view as\\n    select a as a_view, b as b_view from\\n    test_table1\\n    join test_table2 on test_table1.a = test_table2.b;\\n\\n    create or replace function get_test_table1_by_a(input_a int)\\n    returns table (a int) as\\n    $$\\n      select a from test_table1 where a = input_a;\\n    $$\\n    language sql;\\n\\n    create or replace function get_a_timestamp(input_a int)\\n    returns timestamptz as\\n    $$\\n      select pg_catalog.now()\\n    $$\\n    language sql;\\n\\n    create or replace function get_one_field(input_a int)\\n    returns int as\\n    $$\\n      select a as result from test_table1 where a >= input_a;\\n    $$\\n    language sql;",
    "nickname": "create_test_table1-create_test_table2-create_test_table3-create"
  }
]
`;

exports[`scan the whole repo for sql files 1`] = `
[
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "create extension hstore",
    "untemplated": "create extension hstore",
    "nickname": "create"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "create extension citext",
    "untemplated": "create extension citext",
    "nickname": "create"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "create schema goodschema",
    "untemplated": "create schema goodschema",
    "nickname": "create_schema_goodschema"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "create schema evenbetterschema",
    "untemplated": "create schema evenbetterschema",
    "nickname": "create_schema_evenbetterschema"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "create table goodschema.test_table (id int primary key, name text)",
    "untemplated": "create table goodschema.test_table (id int primary key, name text)",
    "nickname": "create_goodschema_test_table"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "create table evenbetterschema.test_table (id int primary key, name text, another_column jsonb)",
    "untemplated": "create table evenbetterschema.test_table (id int primary key, name text, another_column jsonb)",
    "nickname": "create_evenbetterschema_test_table"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "insert into goodschema.test_table (id, name) values (1, 'one'), (2, 'two')",
    "untemplated": "insert into goodschema.test_table (id, name) values (1, 'one'), (2, 'two')",
    "nickname": "insert-goodschema_test_table"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "insert into evenbetterschema.test_table (id, name, another_column) values\\n    (1, 'uno', '{\\"a\\": 1}'),\\n    (2, 'dos', '{\\"b\\": 2}'),\\n    (3, 'tres', '{\\"c\\": 3}')",
    "untemplated": "insert into evenbetterschema.test_table (id, name, another_column) values\\n    (1, 'uno', '{\\"a\\": 1}'),\\n    (2, 'dos', '{\\"b\\": 2}'),\\n    (3, 'tres', '{\\"c\\": 3}')",
    "nickname": "insert-evenbetterschema_test_table"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "CREATE TYPE shipping_status AS ENUM ('not shipped', 'shipped', 'delivered')",
    "untemplated": "CREATE TYPE shipping_status AS ENUM ('not shipped', 'shipped', 'delivered')",
    "nickname": "create_type_shipping_status"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "CREATE TYPE bug_status AS ENUM ('new', 'open', 'closed')",
    "untemplated": "CREATE TYPE bug_status AS ENUM ('new', 'open', 'closed')",
    "nickname": "create_type_bug_status"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "CREATE TYPE unused_enum AS ENUM ('a', 'b', 'c')",
    "untemplated": "CREATE TYPE unused_enum AS ENUM ('a', 'b', 'c')",
    "nickname": "create_type_unused_enum"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "CREATE TYPE usage_dropped_enum AS ENUM ('x', 'y')",
    "untemplated": "CREATE TYPE usage_dropped_enum AS ENUM ('x', 'y')",
    "nickname": "create_type_usage_dropped_enum"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "create table columnless_table2()",
    "untemplated": "create table columnless_table2()",
    "nickname": "create_columnless_table2"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "create table change_to_logged()",
    "untemplated": "create table change_to_logged()",
    "nickname": "create_change_to_logged"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "create unlogged table change_to_unlogged()",
    "untemplated": "create unlogged table change_to_unlogged()",
    "nickname": "create-change_to_unlogged"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "CREATE TABLE products (\\n    product_no serial primary key,\\n    name text,\\n    price numeric not null default 100,\\n    x integer,\\n    newcolumn text,\\n    newcolumn2 interval,\\n    constraint x check (price > 10),\\n    constraint y check (price > 0)\\n)",
    "untemplated": "CREATE TABLE products (\\n    product_no serial primary key,\\n    name text,\\n    price numeric not null default 100,\\n    x integer,\\n    newcolumn text,\\n    newcolumn2 interval,\\n    constraint x check (price > 10),\\n    constraint y check (price > 0)\\n)",
    "nickname": "create_products"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "create index on products(name)",
    "untemplated": "create index on products(name)",
    "nickname": "create_index"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "grant update, insert on table products to postgres",
    "untemplated": "grant update, insert on table products to postgres",
    "nickname": "grant-update-_-insert-products"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "CREATE TABLE orders (\\n    order_id integer primary key unique,\\n    shipping_address text,\\n    status shipping_status,\\n    status2 text,\\n    h hstore\\n)",
    "untemplated": "CREATE TABLE orders (\\n    order_id integer primary key unique,\\n    shipping_address text,\\n    status shipping_status,\\n    status2 text,\\n    h hstore\\n)",
    "nickname": "create_orders"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "CREATE TABLE order_items (\\n    product_no integer REFERENCES products ON DELETE RESTRICT,\\n    order_id integer REFERENCES orders ON DELETE CASCADE,\\n    quantity integer,\\n    PRIMARY KEY (product_no, order_id)\\n)",
    "untemplated": "CREATE TABLE order_items (\\n    product_no integer REFERENCES products ON DELETE RESTRICT,\\n    order_id integer REFERENCES orders ON DELETE CASCADE,\\n    quantity integer,\\n    PRIMARY KEY (product_no, order_id)\\n)",
    "nickname": "create_order_items-delete"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "create or replace function public.changed(i integer, t text[])\\nreturns TABLE(a text, c integer) as\\n$$\\n declare\\n        BEGIN\\n                select 'no', 1",
    "untemplated": "create or replace function public.changed(i integer, t text[])\\nreturns TABLE(a text, c integer) as\\n$$\\n declare\\n        BEGIN\\n                select 'no', 1",
    "nickname": "create-begin-select"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "END",
    "untemplated": "END",
    "nickname": "sql"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "$$\\nLANGUAGE PLPGSQL volatile returns null on null input security definer",
    "untemplated": "$$\\nLANGUAGE PLPGSQL volatile returns null on null input security definer",
    "nickname": "sql"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "create or replace function public.newfunc(i integer, t text[])\\nreturns TABLE(a text, c integer) as\\n$$\\n declare\\n        BEGIN\\n                select 'no', 1",
    "untemplated": "create or replace function public.newfunc(i integer, t text[])\\nreturns TABLE(a text, c integer) as\\n$$\\n declare\\n        BEGIN\\n                select 'no', 1",
    "nickname": "create-begin-select"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "END",
    "untemplated": "END",
    "nickname": "sql"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "$$\\nLANGUAGE PLPGSQL STABLE returns null on null input security invoker",
    "untemplated": "$$\\nLANGUAGE PLPGSQL STABLE returns null on null input security invoker",
    "nickname": "sql"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "create view vvv as select 2 as a, 3 as b",
    "untemplated": "create view vvv as select 2 as a, 3 as b",
    "nickname": "create-select"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "create materialized view matvvv as select 2 as a, 3 as b",
    "untemplated": "create materialized view matvvv as select 2 as a, 3 as b",
    "nickname": "create-select"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "CREATE TABLE bug (\\n    id serial,\\n    description text,\\n    status text-- bug_status\\n)",
    "untemplated": "CREATE TABLE bug (\\n    id serial,\\n    description text,\\n    status text-- bug_status\\n)",
    "nickname": "create_bug"
  },
  {
    "filepath": "packages/admin/test/definition.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/collations/a.sql",
    "raw": "CREATE COLLATION posix FROM \\"POSIX\\"",
    "untemplated": "CREATE COLLATION posix FROM \\"POSIX\\"",
    "nickname": "create-posix"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/collations/a.sql",
    "raw": "create table t(\\n  a text,\\n  b text collate posix\\n)",
    "untemplated": "create table t(\\n  a text,\\n  b text collate posix\\n)",
    "nickname": "create_t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/collations/a.sql",
    "raw": "CREATE COLLATION numeric (provider = icu, locale = 'en-u-kn-true')",
    "untemplated": "CREATE COLLATION numeric (provider = icu, locale = 'en-u-kn-true')",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/collations/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/collations/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/collations/b.sql",
    "raw": "CREATE COLLATION numeric (provider = icu, locale = 'en-u-kn-true')",
    "untemplated": "CREATE COLLATION numeric (provider = icu, locale = 'en-u-kn-true')",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/collations/b.sql",
    "raw": "create table t(\\n  a text,\\n  b text collate numeric,\\n  c text collate numeric\\n)",
    "untemplated": "create table t(\\n  a text,\\n  b text collate numeric,\\n  c text collate numeric\\n)",
    "nickname": "create_t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/collations/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/collations/expected.sql",
    "raw": "alter table \\"public\\".\\"t\\" add column \\"c\\" text collate \\"numeric\\"",
    "untemplated": "alter table \\"public\\".\\"t\\" add column \\"c\\" text collate \\"numeric\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/collations/expected.sql",
    "raw": "alter table \\"public\\".\\"t\\" alter column \\"b\\" set data type text collate \\"numeric\\" using \\"b\\"::text",
    "untemplated": "alter table \\"public\\".\\"t\\" alter column \\"b\\" set data type text collate \\"numeric\\" using \\"b\\"::text",
    "nickname": "alter_public-alter-set-data"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/collations/expected.sql",
    "raw": "drop collation if exists \\"public\\".\\"posix\\"",
    "untemplated": "drop collation if exists \\"public\\".\\"posix\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/collations/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/collations/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/a.sql",
    "raw": "create table t1(a int)",
    "untemplated": "create table t1(a int)",
    "nickname": "create_t1"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/a.sql",
    "raw": "create table b(bb int primary key)",
    "untemplated": "create table b(bb int primary key)",
    "nickname": "create_b"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/a.sql",
    "raw": "create table t2(a int primary key, bb int references b(bb), price numeric, constraint x check (price > 0))",
    "untemplated": "create table t2(a int primary key, bb int references b(bb), price numeric, constraint x check (price > 0))",
    "nickname": "create_t2"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/a.sql",
    "raw": "create table c(cc int unique)",
    "untemplated": "create table c(cc int unique)",
    "nickname": "create_c"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/a.sql",
    "raw": "create unique index on t1(a)",
    "untemplated": "create unique index on t1(a)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/a.sql",
    "raw": "CREATE TABLE circles_dropexclude (\\n    c circle,\\n    EXCLUDE USING gist (c WITH &&)\\n)",
    "untemplated": "CREATE TABLE circles_dropexclude (\\n    c circle,\\n    EXCLUDE USING gist (c WITH &&)\\n)",
    "nickname": "create_circles_dropexclude-with-_"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/b.sql",
    "raw": "create table b(bb int primary key)",
    "untemplated": "create table b(bb int primary key)",
    "nickname": "create_b"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/b.sql",
    "raw": "create table t2(a int, bb int references b(bb) DEFERRABLE INITIALLY deferred)",
    "untemplated": "create table t2(a int, bb int references b(bb) DEFERRABLE INITIALLY deferred)",
    "nickname": "create_t2"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/b.sql",
    "raw": "create table t1(a int primary key, price numeric, constraint x check (price > 0))",
    "untemplated": "create table t1(a int primary key, price numeric, constraint x check (price > 0))",
    "nickname": "create_t1"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/b.sql",
    "raw": "create table c(cc int unique)",
    "untemplated": "create table c(cc int unique)",
    "nickname": "create_c"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/b.sql",
    "raw": "CREATE UNIQUE INDEX c_pkey ON public.c USING btree (cc)",
    "untemplated": "CREATE UNIQUE INDEX c_pkey ON public.c USING btree (cc)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/b.sql",
    "raw": "alter table \\"public\\".\\"c\\" add constraint \\"c_pkey\\" PRIMARY KEY using index \\"c_pkey\\" deferrable INITIALLY deferred",
    "untemplated": "alter table \\"public\\".\\"c\\" add constraint \\"c_pkey\\" PRIMARY KEY using index \\"c_pkey\\" deferrable INITIALLY deferred",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/b.sql",
    "raw": "create unique index on t2(a)",
    "untemplated": "create unique index on t2(a)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/b.sql",
    "raw": "CREATE TABLE circles (\\n    c circle,\\n    EXCLUDE USING gist (c WITH &&)\\n)",
    "untemplated": "CREATE TABLE circles (\\n    c circle,\\n    EXCLUDE USING gist (c WITH &&)\\n)",
    "nickname": "create_circles-with-_"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/b.sql",
    "raw": "CREATE TABLE circles_dropexclude (\\n    c circle\\n)",
    "untemplated": "CREATE TABLE circles_dropexclude (\\n    c circle\\n)",
    "nickname": "create_circles_dropexclude"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "alter table \\"public\\".\\"circles_dropexclude\\" drop constraint \\"circles_dropexclude_c_excl\\"",
    "untemplated": "alter table \\"public\\".\\"circles_dropexclude\\" drop constraint \\"circles_dropexclude_c_excl\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "alter table \\"public\\".\\"t2\\" drop constraint \\"x\\"",
    "untemplated": "alter table \\"public\\".\\"t2\\" drop constraint \\"x\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "alter table \\"public\\".\\"t2\\" drop constraint \\"t2_bb_fkey\\"",
    "untemplated": "alter table \\"public\\".\\"t2\\" drop constraint \\"t2_bb_fkey\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "alter table \\"public\\".\\"t2\\" drop constraint \\"t2_pkey\\"",
    "untemplated": "alter table \\"public\\".\\"t2\\" drop constraint \\"t2_pkey\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "select 1",
    "untemplated": "select 1",
    "nickname": "select"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "-- drop index if exists \\"public\\".\\"circles_dropexclude_c_excl\\"",
    "untemplated": "-- drop index if exists \\"public\\".\\"circles_dropexclude_c_excl\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "drop index if exists \\"public\\".\\"t1_a_idx\\"",
    "untemplated": "drop index if exists \\"public\\".\\"t1_a_idx\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "drop index if exists \\"public\\".\\"t2_pkey\\"",
    "untemplated": "drop index if exists \\"public\\".\\"t2_pkey\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "create table \\"public\\".\\"circles\\" (\\n    \\"c\\" circle\\n)",
    "untemplated": "create table \\"public\\".\\"circles\\" (\\n    \\"c\\" circle\\n)",
    "nickname": "create_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "alter table \\"public\\".\\"c\\" alter column \\"cc\\" set not null",
    "untemplated": "alter table \\"public\\".\\"c\\" alter column \\"cc\\" set not null",
    "nickname": "alter_public-alter-set-not"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "alter table \\"public\\".\\"t1\\" add column \\"price\\" numeric",
    "untemplated": "alter table \\"public\\".\\"t1\\" add column \\"price\\" numeric",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "alter table \\"public\\".\\"t1\\" alter column \\"a\\" set not null",
    "untemplated": "alter table \\"public\\".\\"t1\\" alter column \\"a\\" set not null",
    "nickname": "alter_public-alter-set-not"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "alter table \\"public\\".\\"t2\\" drop column \\"price\\"",
    "untemplated": "alter table \\"public\\".\\"t2\\" drop column \\"price\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "alter table \\"public\\".\\"t2\\" alter column \\"a\\" drop not null",
    "untemplated": "alter table \\"public\\".\\"t2\\" alter column \\"a\\" drop not null",
    "nickname": "alter_public-alter-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "CREATE UNIQUE INDEX c_pkey ON public.c USING btree (cc)",
    "untemplated": "CREATE UNIQUE INDEX c_pkey ON public.c USING btree (cc)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "select 1",
    "untemplated": "select 1",
    "nickname": "select"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "-- CREATE INDEX circles_c_excl ON public.circles USING gist (c)",
    "untemplated": "-- CREATE INDEX circles_c_excl ON public.circles USING gist (c)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "CREATE UNIQUE INDEX t1_pkey ON public.t1 USING btree (a)",
    "untemplated": "CREATE UNIQUE INDEX t1_pkey ON public.t1 USING btree (a)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "CREATE UNIQUE INDEX t2_a_idx ON public.t2 USING btree (a)",
    "untemplated": "CREATE UNIQUE INDEX t2_a_idx ON public.t2 USING btree (a)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "alter table \\"public\\".\\"c\\" add constraint \\"c_pkey\\" PRIMARY KEY using index \\"c_pkey\\" DEFERRABLE INITIALLY DEFERRED",
    "untemplated": "alter table \\"public\\".\\"c\\" add constraint \\"c_pkey\\" PRIMARY KEY using index \\"c_pkey\\" DEFERRABLE INITIALLY DEFERRED",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "alter table \\"public\\".\\"t1\\" add constraint \\"t1_pkey\\" PRIMARY KEY using index \\"t1_pkey\\"",
    "untemplated": "alter table \\"public\\".\\"t1\\" add constraint \\"t1_pkey\\" PRIMARY KEY using index \\"t1_pkey\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "alter table \\"public\\".\\"circles\\" add constraint \\"circles_c_excl\\" EXCLUDE USING gist (c WITH &&)",
    "untemplated": "alter table \\"public\\".\\"circles\\" add constraint \\"circles_c_excl\\" EXCLUDE USING gist (c WITH &&)",
    "nickname": "alter_public-with-_"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "alter table \\"public\\".\\"t1\\" add constraint \\"x\\" CHECK ((price > (0)::numeric)) not valid",
    "untemplated": "alter table \\"public\\".\\"t1\\" add constraint \\"x\\" CHECK ((price > (0)::numeric)) not valid",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "alter table \\"public\\".\\"t1\\" validate constraint \\"x\\"",
    "untemplated": "alter table \\"public\\".\\"t1\\" validate constraint \\"x\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "alter table \\"public\\".\\"t2\\" add constraint \\"t2_bb_fkey\\" FOREIGN KEY (bb) REFERENCES b(bb) DEFERRABLE INITIALLY DEFERRED not valid",
    "untemplated": "alter table \\"public\\".\\"t2\\" add constraint \\"t2_bb_fkey\\" FOREIGN KEY (bb) REFERENCES b(bb) DEFERRABLE INITIALLY DEFERRED not valid",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "alter table \\"public\\".\\"t2\\" validate constraint \\"t2_bb_fkey\\"",
    "untemplated": "alter table \\"public\\".\\"t2\\" validate constraint \\"t2_bb_fkey\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/constraints/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/a.sql",
    "raw": "create table basetable(id serial primary key, name text)",
    "untemplated": "create table basetable(id serial primary key, name text)",
    "nickname": "create_basetable"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/a.sql",
    "raw": "create view aaa_view1 as select name from basetable",
    "untemplated": "create view aaa_view1 as select name from basetable",
    "nickname": "create-select-basetable"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/a.sql",
    "raw": "create view bbb_view2 as select name from aaa_view1",
    "untemplated": "create view bbb_view2 as select name from aaa_view1",
    "nickname": "create-select-aaa_view1"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/a.sql",
    "raw": "create view ccc_view3 as select name from bbb_view2",
    "untemplated": "create view ccc_view3 as select name from bbb_view2",
    "nickname": "create-select-bbb_view2"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/a.sql",
    "raw": "create view ddd_changed as select name from basetable",
    "untemplated": "create view ddd_changed as select name from basetable",
    "nickname": "create-select-basetable"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/a.sql",
    "raw": "create view ddd_unchanged as select name from ddd_changed",
    "untemplated": "create view ddd_unchanged as select name from ddd_changed",
    "nickname": "create-select-ddd_changed"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/a.sql",
    "raw": "create or replace function \\"public\\".\\"depends_on_bbb_view2\\"(t text)\\nreturns TABLE(x text) as\\n$$ select * from bbb_view2 $$\\nlanguage SQL VOLATILE CALLED ON NULL INPUT SECURITY INVOKER",
    "untemplated": "create or replace function \\"public\\".\\"depends_on_bbb_view2\\"(t text)\\nreturns TABLE(x text) as\\n$$ select * from bbb_view2 $$\\nlanguage SQL VOLATILE CALLED ON NULL INPUT SECURITY INVOKER",
    "nickname": "create-select-bbb_view2"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/additions.sql",
    "raw": "create view ddd as select 'abc123' as a",
    "untemplated": "create view ddd as select 'abc123' as a",
    "nickname": "create-select"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/additions.sql",
    "raw": "create or replace function \\"public\\".\\"fff\\"(t text)\\nreturns TABLE(x text) as\\n$$ select a::text from ddd $$\\nlanguage SQL VOLATILE CALLED ON NULL INPUT SECURITY INVOKER",
    "untemplated": "create or replace function \\"public\\".\\"fff\\"(t text)\\nreturns TABLE(x text) as\\n$$ select a::text from ddd $$\\nlanguage SQL VOLATILE CALLED ON NULL INPUT SECURITY INVOKER",
    "nickname": "create-select-ddd"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/additions.sql",
    "raw": "create view eee as select * from fff('abc123')",
    "untemplated": "create view eee as select * from fff('abc123')",
    "nickname": "create-select-fff"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/b.sql",
    "raw": "create table basetable(id serial primary key, name text)",
    "untemplated": "create table basetable(id serial primary key, name text)",
    "nickname": "create_basetable"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/b.sql",
    "raw": "create view ddd_changed as select name, 'x' as x from basetable",
    "untemplated": "create view ddd_changed as select name, 'x' as x from basetable",
    "nickname": "create-select-basetable"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/b.sql",
    "raw": "create view ddd_unchanged as select name from ddd_changed",
    "untemplated": "create view ddd_unchanged as select name from ddd_changed",
    "nickname": "create-select-ddd_changed"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/expected.sql",
    "raw": "drop view if exists \\"public\\".\\"ccc_view3\\"",
    "untemplated": "drop view if exists \\"public\\".\\"ccc_view3\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/expected.sql",
    "raw": "drop function if exists \\"public\\".\\"depends_on_bbb_view2\\"(t text)",
    "untemplated": "drop function if exists \\"public\\".\\"depends_on_bbb_view2\\"(t text)",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/expected.sql",
    "raw": "drop view if exists \\"public\\".\\"bbb_view2\\"",
    "untemplated": "drop view if exists \\"public\\".\\"bbb_view2\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/expected.sql",
    "raw": "drop view if exists \\"public\\".\\"aaa_view1\\"",
    "untemplated": "drop view if exists \\"public\\".\\"aaa_view1\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/expected.sql",
    "raw": "create or replace view \\"public\\".\\"ddd_changed\\" as  SELECT basetable.name,\\n    'x'::text AS x\\n   FROM basetable",
    "untemplated": "create or replace view \\"public\\".\\"ddd_changed\\" as  SELECT basetable.name,\\n    'x'::text AS x\\n   FROM basetable",
    "nickname": "create-select-basetable"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/expected2.sql",
    "raw": "drop view if exists \\"public\\".\\"ccc_view3\\"",
    "untemplated": "drop view if exists \\"public\\".\\"ccc_view3\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/expected2.sql",
    "raw": "drop view if exists \\"public\\".\\"ddd\\"",
    "untemplated": "drop view if exists \\"public\\".\\"ddd\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/expected2.sql",
    "raw": "drop function if exists \\"public\\".\\"depends_on_bbb_view2\\"(t text)",
    "untemplated": "drop function if exists \\"public\\".\\"depends_on_bbb_view2\\"(t text)",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/expected2.sql",
    "raw": "drop view if exists \\"public\\".\\"eee\\"",
    "untemplated": "drop view if exists \\"public\\".\\"eee\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/expected2.sql",
    "raw": "drop function if exists \\"public\\".\\"fff\\"(t text)",
    "untemplated": "drop function if exists \\"public\\".\\"fff\\"(t text)",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/expected2.sql",
    "raw": "drop view if exists \\"public\\".\\"bbb_view2\\"",
    "untemplated": "drop view if exists \\"public\\".\\"bbb_view2\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/expected2.sql",
    "raw": "drop view if exists \\"public\\".\\"aaa_view1\\"",
    "untemplated": "drop view if exists \\"public\\".\\"aaa_view1\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/expected2.sql",
    "raw": "create or replace view \\"public\\".\\"ddd_changed\\" as  SELECT basetable.name,\\n    'x'::text AS x\\n   FROM basetable",
    "untemplated": "create or replace view \\"public\\".\\"ddd_changed\\" as  SELECT basetable.name,\\n    'x'::text AS x\\n   FROM basetable",
    "nickname": "create-select-basetable"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies2/a.sql",
    "raw": "create schema x",
    "untemplated": "create schema x",
    "nickname": "create_schema_x"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies2/a.sql",
    "raw": "create table x.data(id uuid, name text)",
    "untemplated": "create table x.data(id uuid, name text)",
    "nickname": "create_x_data"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies2/a.sql",
    "raw": "create view x.q as select * from x.data",
    "untemplated": "create view x.q as select * from x.data",
    "nickname": "create-select-x_data"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies2/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies2/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies2/b.sql",
    "raw": "create schema x",
    "untemplated": "create schema x",
    "nickname": "create_schema_x"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies2/b.sql",
    "raw": "create table x.t_data(id uuid, name text)",
    "untemplated": "create table x.t_data(id uuid, name text)",
    "nickname": "create_x_t_data"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies2/b.sql",
    "raw": "create view x.data as select * from x.t_data",
    "untemplated": "create view x.data as select * from x.t_data",
    "nickname": "create-select-x_t_data"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies2/b.sql",
    "raw": "create view x.q as select * from x.data",
    "untemplated": "create view x.q as select * from x.data",
    "nickname": "create-select-x_data"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies2/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies2/expected.sql",
    "raw": "drop view if exists \\"x\\".\\"q\\"",
    "untemplated": "drop view if exists \\"x\\".\\"q\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies2/expected.sql",
    "raw": "drop table \\"x\\".\\"data\\"",
    "untemplated": "drop table \\"x\\".\\"data\\"",
    "nickname": "drop_x"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies2/expected.sql",
    "raw": "create table \\"x\\".\\"t_data\\" (\\n    \\"id\\" uuid,\\n    \\"name\\" text\\n)",
    "untemplated": "create table \\"x\\".\\"t_data\\" (\\n    \\"id\\" uuid,\\n    \\"name\\" text\\n)",
    "nickname": "create_x"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies2/expected.sql",
    "raw": "create or replace view \\"x\\".\\"data\\" as  SELECT t_data.id,\\n    t_data.name\\n   FROM x.t_data",
    "untemplated": "create or replace view \\"x\\".\\"data\\" as  SELECT t_data.id,\\n    t_data.name\\n   FROM x.t_data",
    "nickname": "create-select-x_t_data"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies2/expected.sql",
    "raw": "create or replace view \\"x\\".\\"q\\" as  SELECT data.id,\\n    data.name\\n   FROM x.data",
    "untemplated": "create or replace view \\"x\\".\\"q\\" as  SELECT data.id,\\n    data.name\\n   FROM x.data",
    "nickname": "create-select-x_data"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies2/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies2/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies3/a.sql",
    "raw": "create table t(a int)",
    "untemplated": "create table t(a int)",
    "nickname": "create_t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies3/a.sql",
    "raw": "create view abc as select a from t",
    "untemplated": "create view abc as select a from t",
    "nickname": "create-select-t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies3/a.sql",
    "raw": "create view switcharoo as select 1 as a",
    "untemplated": "create view switcharoo as select 1 as a",
    "nickname": "create-select"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies3/a.sql",
    "raw": "create table \\"strange_name(((yo?)))\\"(id text)",
    "untemplated": "create table \\"strange_name(((yo?)))\\"(id text)",
    "nickname": "create_strange_name_yo_"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies3/a.sql",
    "raw": "create view \\"strange_view(what)\\" as select id from \\"strange_name(((yo?)))\\"",
    "untemplated": "create view \\"strange_view(what)\\" as select id from \\"strange_name(((yo?)))\\"",
    "nickname": "create-select-strange_name_yo_"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies3/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies3/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies3/b.sql",
    "raw": "create table t(a int, b int)",
    "untemplated": "create table t(a int, b int)",
    "nickname": "create_t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies3/b.sql",
    "raw": "create view abc as select a from t",
    "untemplated": "create view abc as select a from t",
    "nickname": "create-select-t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies3/b.sql",
    "raw": "create materialized view switcharoo as select 1 as a",
    "untemplated": "create materialized view switcharoo as select 1 as a",
    "nickname": "create-select"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies3/b.sql",
    "raw": "create table \\"strange_name(((yo?)))\\"(id text)",
    "untemplated": "create table \\"strange_name(((yo?)))\\"(id text)",
    "nickname": "create_strange_name_yo_"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies3/b.sql",
    "raw": "create view \\"strange_view(what)\\" as select id::int * 2 as a from \\"strange_name(((yo?)))\\"",
    "untemplated": "create view \\"strange_view(what)\\" as select id::int * 2 as a from \\"strange_name(((yo?)))\\"",
    "nickname": "create-select-strange_name_yo_"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies3/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies3/expected.sql",
    "raw": "drop view if exists \\"public\\".\\"strange_view(what)\\"",
    "untemplated": "drop view if exists \\"public\\".\\"strange_view(what)\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies3/expected.sql",
    "raw": "drop view if exists \\"public\\".\\"switcharoo\\"",
    "untemplated": "drop view if exists \\"public\\".\\"switcharoo\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies3/expected.sql",
    "raw": "alter table \\"public\\".\\"t\\" add column \\"b\\" integer",
    "untemplated": "alter table \\"public\\".\\"t\\" add column \\"b\\" integer",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies3/expected.sql",
    "raw": "create or replace view \\"public\\".\\"strange_view(what)\\" as  SELECT ((\\"strange_name(((yo?)))\\".id)::integer * 2) AS a\\n   FROM \\"strange_name(((yo?)))\\"",
    "untemplated": "create or replace view \\"public\\".\\"strange_view(what)\\" as  SELECT ((\\"strange_name(((yo?)))\\".id)::integer * 2) AS a\\n   FROM \\"strange_name(((yo?)))\\"",
    "nickname": "create-select-_-strange_name_yo_"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies3/expected.sql",
    "raw": "create materialized view \\"public\\".\\"switcharoo\\" as  SELECT 1 AS a",
    "untemplated": "create materialized view \\"public\\".\\"switcharoo\\" as  SELECT 1 AS a",
    "nickname": "create-select"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies3/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies3/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies4/a.sql",
    "raw": "create table t2(a int)",
    "untemplated": "create table t2(a int)",
    "nickname": "create_t2"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies4/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies4/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies4/b.sql",
    "raw": "create table t (\\n    id integer not null primary key,\\n    a text,\\n    b integer\\n)",
    "untemplated": "create table t (\\n    id integer not null primary key,\\n    a text,\\n    b integer\\n)",
    "nickname": "create_t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies4/b.sql",
    "raw": "create view v as\\nselect id, a, max(b)\\nfrom t\\ngroup by id",
    "untemplated": "create view v as\\nselect id, a, max(b)\\nfrom t\\ngroup by id",
    "nickname": "create-max-t-grouped"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies4/b.sql",
    "raw": "-- \\"a\\" is implied because \\"id\\" is primary key\\n\\n\\ncreate materialized view mv as select id from v",
    "untemplated": "-- \\"a\\" is implied because \\"id\\" is primary key\\n\\n\\ncreate materialized view mv as select id from v",
    "nickname": "create-select-v"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies4/b.sql",
    "raw": "create unique index on mv (id)",
    "untemplated": "create unique index on mv (id)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies4/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies4/expected.sql",
    "raw": "drop table \\"public\\".\\"t2\\"",
    "untemplated": "drop table \\"public\\".\\"t2\\"",
    "nickname": "drop_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies4/expected.sql",
    "raw": "create table \\"public\\".\\"t\\" (\\n    \\"id\\" integer not null,\\n    \\"a\\" text,\\n    \\"b\\" integer\\n)",
    "untemplated": "create table \\"public\\".\\"t\\" (\\n    \\"id\\" integer not null,\\n    \\"a\\" text,\\n    \\"b\\" integer\\n)",
    "nickname": "create_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies4/expected.sql",
    "raw": "CREATE UNIQUE INDEX t_pkey ON public.t USING btree (id)",
    "untemplated": "CREATE UNIQUE INDEX t_pkey ON public.t USING btree (id)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies4/expected.sql",
    "raw": "alter table \\"public\\".\\"t\\" add constraint \\"t_pkey\\" PRIMARY KEY using index \\"t_pkey\\"",
    "untemplated": "alter table \\"public\\".\\"t\\" add constraint \\"t_pkey\\" PRIMARY KEY using index \\"t_pkey\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies4/expected.sql",
    "raw": "create or replace view \\"public\\".\\"v\\" as  SELECT t.id,\\n    t.a,\\n    max(t.b) AS max\\n   FROM t\\n  GROUP BY t.id",
    "untemplated": "create or replace view \\"public\\".\\"v\\" as  SELECT t.id,\\n    t.a,\\n    max(t.b) AS max\\n   FROM t\\n  GROUP BY t.id",
    "nickname": "create-max-t-grouped"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies4/expected.sql",
    "raw": "create materialized view \\"public\\".\\"mv\\" as  SELECT v.id\\n   FROM v",
    "untemplated": "create materialized view \\"public\\".\\"mv\\" as  SELECT v.id\\n   FROM v",
    "nickname": "create-select-v"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies4/expected.sql",
    "raw": "CREATE UNIQUE INDEX mv_id_idx ON public.mv USING btree (id)",
    "untemplated": "CREATE UNIQUE INDEX mv_id_idx ON public.mv USING btree (id)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies4/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/dependencies4/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdefaults/a.sql",
    "raw": "create type order_status as enum('pending', 'processing', 'complete')",
    "untemplated": "create type order_status as enum('pending', 'processing', 'complete')",
    "nickname": "create_type_order_status"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdefaults/a.sql",
    "raw": "create schema other",
    "untemplated": "create schema other",
    "nickname": "create_schema_other"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdefaults/a.sql",
    "raw": "create type other.otherenum1 as enum('a', 'b', 'c')",
    "untemplated": "create type other.otherenum1 as enum('a', 'b', 'c')",
    "nickname": "create_type_other_otherenum1"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdefaults/a.sql",
    "raw": "create type other.otherenum2 as enum('a', 'b', 'c')",
    "untemplated": "create type other.otherenum2 as enum('a', 'b', 'c')",
    "nickname": "create_type_other_otherenum2"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdefaults/a.sql",
    "raw": "create table orders(\\n  id serial primary key,\\n  status order_status default 'pending'::order_status,\\n  othercolumn other.otherenum1\\n)",
    "untemplated": "create table orders(\\n  id serial primary key,\\n  status order_status default 'pending'::order_status,\\n  othercolumn other.otherenum1\\n)",
    "nickname": "create_orders"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdefaults/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdefaults/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdefaults/b.sql",
    "raw": "create type order_status as enum('pending', 'processing', 'complete', 'rejected')",
    "untemplated": "create type order_status as enum('pending', 'processing', 'complete', 'rejected')",
    "nickname": "create_type_order_status"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdefaults/b.sql",
    "raw": "create schema other",
    "untemplated": "create schema other",
    "nickname": "create_schema_other"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdefaults/b.sql",
    "raw": "create type other.otherenum1 as enum('a', 'b', 'c')",
    "untemplated": "create type other.otherenum1 as enum('a', 'b', 'c')",
    "nickname": "create_type_other_otherenum1"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdefaults/b.sql",
    "raw": "create type other.otherenum2 as enum('a', 'b', 'c')",
    "untemplated": "create type other.otherenum2 as enum('a', 'b', 'c')",
    "nickname": "create_type_other_otherenum2"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdefaults/b.sql",
    "raw": "create table orders(\\n  id serial primary key,\\n  status order_status default 'pending'::order_status,\\n  othercolumn other.otherenum2\\n)",
    "untemplated": "create table orders(\\n  id serial primary key,\\n  status order_status default 'pending'::order_status,\\n  othercolumn other.otherenum2\\n)",
    "nickname": "create_orders"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdefaults/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdefaults/expected.sql",
    "raw": "alter table \\"public\\".\\"orders\\" alter column \\"status\\" drop default",
    "untemplated": "alter table \\"public\\".\\"orders\\" alter column \\"status\\" drop default",
    "nickname": "alter_public-alter-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdefaults/expected.sql",
    "raw": "alter type \\"public\\".\\"order_status\\" rename to \\"order_status__old_version_to_be_dropped\\"",
    "untemplated": "alter type \\"public\\".\\"order_status\\" rename to \\"order_status__old_version_to_be_dropped\\"",
    "nickname": "alter"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdefaults/expected.sql",
    "raw": "create type \\"public\\".\\"order_status\\" as enum ('pending', 'processing', 'complete', 'rejected')",
    "untemplated": "create type \\"public\\".\\"order_status\\" as enum ('pending', 'processing', 'complete', 'rejected')",
    "nickname": "create_type_order_status"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdefaults/expected.sql",
    "raw": "alter table \\"public\\".\\"orders\\" alter column status type \\"public\\".\\"order_status\\" using status::text::\\"public\\".\\"order_status\\"",
    "untemplated": "alter table \\"public\\".\\"orders\\" alter column status type \\"public\\".\\"order_status\\" using status::text::\\"public\\".\\"order_status\\"",
    "nickname": "alter_public-alter"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdefaults/expected.sql",
    "raw": "alter table \\"public\\".\\"orders\\" alter column \\"status\\" set default 'pending'::order_status",
    "untemplated": "alter table \\"public\\".\\"orders\\" alter column \\"status\\" set default 'pending'::order_status",
    "nickname": "alter_public-alter-set-default"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdefaults/expected.sql",
    "raw": "drop type \\"public\\".\\"order_status__old_version_to_be_dropped\\"",
    "untemplated": "drop type \\"public\\".\\"order_status__old_version_to_be_dropped\\"",
    "nickname": "drop_type_order_status__old_version_to_be_dropped"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdefaults/expected.sql",
    "raw": "alter table \\"public\\".\\"orders\\" alter column \\"othercolumn\\" set data type other.otherenum2 using \\"othercolumn\\"::text::other.otherenum2",
    "untemplated": "alter table \\"public\\".\\"orders\\" alter column \\"othercolumn\\" set data type other.otherenum2 using \\"othercolumn\\"::text::other.otherenum2",
    "nickname": "alter_public-alter-set-data"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdefaults/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdefaults/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdeps/a.sql",
    "raw": "create type e as enum('a', 'b', 'c')",
    "untemplated": "create type e as enum('a', 'b', 'c')",
    "nickname": "create_type_e"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdeps/a.sql",
    "raw": "create table t(id integer primary key, category e)",
    "untemplated": "create table t(id integer primary key, category e)",
    "nickname": "create_t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdeps/a.sql",
    "raw": "create view v as select * from t",
    "untemplated": "create view v as select * from t",
    "nickname": "create-select-t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdeps/a.sql",
    "raw": "create view v2 as select *, 'b'::e from t",
    "untemplated": "create view v2 as select *, 'b'::e from t",
    "nickname": "create-select-t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdeps/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdeps/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdeps/b.sql",
    "raw": "create type e as enum('a', 'b', 'c', 'd')",
    "untemplated": "create type e as enum('a', 'b', 'c', 'd')",
    "nickname": "create_type_e"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdeps/b.sql",
    "raw": "create table t(id integer primary key, category e)",
    "untemplated": "create table t(id integer primary key, category e)",
    "nickname": "create_t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdeps/b.sql",
    "raw": "create view v as select * from t",
    "untemplated": "create view v as select * from t",
    "nickname": "create-select-t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdeps/b.sql",
    "raw": "create view v2 as select *, 'b'::e from t",
    "untemplated": "create view v2 as select *, 'b'::e from t",
    "nickname": "create-select-t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdeps/b.sql",
    "raw": "create table created_with_e(id integer, category e)",
    "untemplated": "create table created_with_e(id integer, category e)",
    "nickname": "create_created_with_e"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdeps/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdeps/expected.sql",
    "raw": "drop view if exists \\"public\\".\\"v\\"",
    "untemplated": "drop view if exists \\"public\\".\\"v\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdeps/expected.sql",
    "raw": "drop view if exists \\"public\\".\\"v2\\"",
    "untemplated": "drop view if exists \\"public\\".\\"v2\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdeps/expected.sql",
    "raw": "alter type \\"public\\".\\"e\\" rename to \\"e__old_version_to_be_dropped\\"",
    "untemplated": "alter type \\"public\\".\\"e\\" rename to \\"e__old_version_to_be_dropped\\"",
    "nickname": "alter"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdeps/expected.sql",
    "raw": "create type \\"public\\".\\"e\\" as enum ('a', 'b', 'c', 'd')",
    "untemplated": "create type \\"public\\".\\"e\\" as enum ('a', 'b', 'c', 'd')",
    "nickname": "create_type_e"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdeps/expected.sql",
    "raw": "create table \\"public\\".\\"created_with_e\\" (\\n    \\"id\\" integer,\\n    \\"category\\" e\\n)",
    "untemplated": "create table \\"public\\".\\"created_with_e\\" (\\n    \\"id\\" integer,\\n    \\"category\\" e\\n)",
    "nickname": "create_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdeps/expected.sql",
    "raw": "alter table \\"public\\".\\"t\\" alter column category type \\"public\\".\\"e\\" using category::text::\\"public\\".\\"e\\"",
    "untemplated": "alter table \\"public\\".\\"t\\" alter column category type \\"public\\".\\"e\\" using category::text::\\"public\\".\\"e\\"",
    "nickname": "alter_public-alter"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdeps/expected.sql",
    "raw": "drop type \\"public\\".\\"e__old_version_to_be_dropped\\"",
    "untemplated": "drop type \\"public\\".\\"e__old_version_to_be_dropped\\"",
    "nickname": "drop_type_e__old_version_to_be_dropped"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdeps/expected.sql",
    "raw": "create or replace view \\"public\\".\\"v\\" as  SELECT t.id,\\n    t.category\\n   FROM t",
    "untemplated": "create or replace view \\"public\\".\\"v\\" as  SELECT t.id,\\n    t.category\\n   FROM t",
    "nickname": "create-select-t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdeps/expected.sql",
    "raw": "create or replace view \\"public\\".\\"v2\\" as  SELECT t.id,\\n    t.category,\\n    'b'::e AS e\\n   FROM t",
    "untemplated": "create or replace view \\"public\\".\\"v2\\" as  SELECT t.id,\\n    t.category,\\n    'b'::e AS e\\n   FROM t",
    "nickname": "create-select-t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdeps/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/enumdeps/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/a.sql",
    "raw": "create extension pg_trgm",
    "untemplated": "create extension pg_trgm",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/a.sql",
    "raw": "create schema goodschema",
    "untemplated": "create schema goodschema",
    "nickname": "create_schema_goodschema"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/a.sql",
    "raw": "create schema badschema",
    "untemplated": "create schema badschema",
    "nickname": "create_schema_badschema"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/a.sql",
    "raw": "CREATE TYPE shipping_status AS ENUM ('not shipped', 'shipped')",
    "untemplated": "CREATE TYPE shipping_status AS ENUM ('not shipped', 'shipped')",
    "nickname": "create_type_shipping_status"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/a.sql",
    "raw": "CREATE TYPE unwanted_enum AS ENUM ('unwanted', 'not wanted')",
    "untemplated": "CREATE TYPE unwanted_enum AS ENUM ('unwanted', 'not wanted')",
    "nickname": "create_type_unwanted_enum"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/a.sql",
    "raw": "CREATE TYPE unused_enum AS ENUM ('a', 'b')",
    "untemplated": "CREATE TYPE unused_enum AS ENUM ('a', 'b')",
    "nickname": "create_type_unused_enum"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/a.sql",
    "raw": "CREATE TYPE usage_dropped_enum AS ENUM ('x', 'y')",
    "untemplated": "CREATE TYPE usage_dropped_enum AS ENUM ('x', 'y')",
    "nickname": "create_type_usage_dropped_enum"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/a.sql",
    "raw": "create table columnless_table()",
    "untemplated": "create table columnless_table()",
    "nickname": "create_columnless_table"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/a.sql",
    "raw": "create unlogged table change_to_logged()",
    "untemplated": "create unlogged table change_to_logged()",
    "nickname": "create-change_to_logged"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/a.sql",
    "raw": "create table change_to_unlogged()",
    "untemplated": "create table change_to_unlogged()",
    "nickname": "create_change_to_unlogged"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/a.sql",
    "raw": "CREATE TABLE aunwanted (\\n    id serial primary key,\\n    name text not null\\n)",
    "untemplated": "CREATE TABLE aunwanted (\\n    id serial primary key,\\n    name text not null\\n)",
    "nickname": "create_aunwanted"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/a.sql",
    "raw": "CREATE TABLE orders (\\n    order_id serial primary key,\\n    shipping_address text,\\n    status shipping_status,\\n    status2 usage_dropped_enum\\n)",
    "untemplated": "CREATE TABLE orders (\\n    order_id serial primary key,\\n    shipping_address text,\\n    status shipping_status,\\n    status2 usage_dropped_enum\\n)",
    "nickname": "create_orders"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/a.sql",
    "raw": "CREATE TABLE products (\\n    product_no integer,\\n    name varchar(10) not null unique,\\n    price numeric,\\n    x integer not null default 7 unique,\\n    oldcolumn text,\\n    constraint x check (price > 0),\\n    z integer REFERENCES orders ON DELETE CASCADE,\\n    zz integer REFERENCES aunwanted ON DELETE CASCADE\\n)",
    "untemplated": "CREATE TABLE products (\\n    product_no integer,\\n    name varchar(10) not null unique,\\n    price numeric,\\n    x integer not null default 7 unique,\\n    oldcolumn text,\\n    constraint x check (price > 0),\\n    z integer REFERENCES orders ON DELETE CASCADE,\\n    zz integer REFERENCES aunwanted ON DELETE CASCADE\\n)",
    "nickname": "create_products-delete"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/a.sql",
    "raw": "create unique index on products(x)",
    "untemplated": "create unique index on products(x)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/a.sql",
    "raw": "create unique index on orders(order_id)",
    "untemplated": "create unique index on orders(order_id)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/a.sql",
    "raw": "create index on products(price)",
    "untemplated": "create index on products(price)",
    "nickname": "create_index"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/a.sql",
    "raw": "create view vvv as select * from products",
    "untemplated": "create view vvv as select * from products",
    "nickname": "create-select-products"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/a.sql",
    "raw": "create materialized view matvvv as select * from products",
    "untemplated": "create materialized view matvvv as select * from products",
    "nickname": "create-select-products"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/a.sql",
    "raw": "grant select, insert on table products to postgres",
    "untemplated": "grant select, insert on table products to postgres",
    "nickname": "grant-select-insert-products"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/a.sql",
    "raw": "create or replace function public.changed(i integer, t text[])\\nreturns TABLE(a text, c integer) as\\n$$\\n declare\\n        BEGIN\\n                select 'no', 1",
    "untemplated": "create or replace function public.changed(i integer, t text[])\\nreturns TABLE(a text, c integer) as\\n$$\\n declare\\n        BEGIN\\n                select 'no', 1",
    "nickname": "create-begin-select"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/a.sql",
    "raw": "END",
    "untemplated": "END",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/a.sql",
    "raw": "$$\\nLANGUAGE PLPGSQL STABLE returns null on null input security definer",
    "untemplated": "$$\\nLANGUAGE PLPGSQL STABLE returns null on null input security definer",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/additions.sql",
    "raw": "alter table products rename column oldcolumn to newcolumn",
    "untemplated": "alter table products rename column oldcolumn to newcolumn",
    "nickname": "alter_products"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/b.sql",
    "raw": "create extension hstore",
    "untemplated": "create extension hstore",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/b.sql",
    "raw": "create extension citext",
    "untemplated": "create extension citext",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/b.sql",
    "raw": "create schema goodschema",
    "untemplated": "create schema goodschema",
    "nickname": "create_schema_goodschema"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/b.sql",
    "raw": "create schema evenbetterschema",
    "untemplated": "create schema evenbetterschema",
    "nickname": "create_schema_evenbetterschema"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/b.sql",
    "raw": "CREATE TYPE shipping_status AS ENUM ('not shipped', 'shipped', 'delivered')",
    "untemplated": "CREATE TYPE shipping_status AS ENUM ('not shipped', 'shipped', 'delivered')",
    "nickname": "create_type_shipping_status"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/b.sql",
    "raw": "CREATE TYPE bug_status AS ENUM ('new', 'open', 'closed')",
    "untemplated": "CREATE TYPE bug_status AS ENUM ('new', 'open', 'closed')",
    "nickname": "create_type_bug_status"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/b.sql",
    "raw": "CREATE TYPE unused_enum AS ENUM ('a', 'b', 'c')",
    "untemplated": "CREATE TYPE unused_enum AS ENUM ('a', 'b', 'c')",
    "nickname": "create_type_unused_enum"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/b.sql",
    "raw": "CREATE TYPE usage_dropped_enum AS ENUM ('x', 'y')",
    "untemplated": "CREATE TYPE usage_dropped_enum AS ENUM ('x', 'y')",
    "nickname": "create_type_usage_dropped_enum"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/b.sql",
    "raw": "create table columnless_table2()",
    "untemplated": "create table columnless_table2()",
    "nickname": "create_columnless_table2"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/b.sql",
    "raw": "create table change_to_logged()",
    "untemplated": "create table change_to_logged()",
    "nickname": "create_change_to_logged"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/b.sql",
    "raw": "create unlogged table change_to_unlogged()",
    "untemplated": "create unlogged table change_to_unlogged()",
    "nickname": "create-change_to_unlogged"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/b.sql",
    "raw": "CREATE TABLE products (\\n    product_no serial primary key,\\n    name text,\\n    price numeric not null default 100,\\n    x integer,\\n    newcolumn text,\\n    newcolumn2 interval,\\n    constraint x check (price > 10),\\n    constraint y check (price > 0)\\n)",
    "untemplated": "CREATE TABLE products (\\n    product_no serial primary key,\\n    name text,\\n    price numeric not null default 100,\\n    x integer,\\n    newcolumn text,\\n    newcolumn2 interval,\\n    constraint x check (price > 10),\\n    constraint y check (price > 0)\\n)",
    "nickname": "create_products"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/b.sql",
    "raw": "create index on products(name)",
    "untemplated": "create index on products(name)",
    "nickname": "create_index"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/b.sql",
    "raw": "grant update, insert on table products to postgres",
    "untemplated": "grant update, insert on table products to postgres",
    "nickname": "grant-update-_-insert-products"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/b.sql",
    "raw": "CREATE TABLE orders (\\n    order_id integer primary key unique,\\n    shipping_address text,\\n    status shipping_status,\\n    status2 text,\\n    h hstore\\n)",
    "untemplated": "CREATE TABLE orders (\\n    order_id integer primary key unique,\\n    shipping_address text,\\n    status shipping_status,\\n    status2 text,\\n    h hstore\\n)",
    "nickname": "create_orders"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/b.sql",
    "raw": "CREATE TABLE order_items (\\n    product_no integer REFERENCES products ON DELETE RESTRICT,\\n    order_id integer REFERENCES orders ON DELETE CASCADE,\\n    quantity integer,\\n    PRIMARY KEY (product_no, order_id)\\n)",
    "untemplated": "CREATE TABLE order_items (\\n    product_no integer REFERENCES products ON DELETE RESTRICT,\\n    order_id integer REFERENCES orders ON DELETE CASCADE,\\n    quantity integer,\\n    PRIMARY KEY (product_no, order_id)\\n)",
    "nickname": "create_order_items-delete"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/b.sql",
    "raw": "create or replace function public.changed(i integer, t text[])\\nreturns TABLE(a text, c integer) as\\n$$\\n declare\\n        BEGIN\\n                select 'no', 1",
    "untemplated": "create or replace function public.changed(i integer, t text[])\\nreturns TABLE(a text, c integer) as\\n$$\\n declare\\n        BEGIN\\n                select 'no', 1",
    "nickname": "create-begin-select"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/b.sql",
    "raw": "END",
    "untemplated": "END",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/b.sql",
    "raw": "$$\\nLANGUAGE PLPGSQL volatile returns null on null input security definer",
    "untemplated": "$$\\nLANGUAGE PLPGSQL volatile returns null on null input security definer",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/b.sql",
    "raw": "create or replace function public.newfunc(i integer, t text[])\\nreturns TABLE(a text, c integer) as\\n$$\\n declare\\n        BEGIN\\n                select 'no', 1",
    "untemplated": "create or replace function public.newfunc(i integer, t text[])\\nreturns TABLE(a text, c integer) as\\n$$\\n declare\\n        BEGIN\\n                select 'no', 1",
    "nickname": "create-begin-select"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/b.sql",
    "raw": "END",
    "untemplated": "END",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/b.sql",
    "raw": "$$\\nLANGUAGE PLPGSQL STABLE returns null on null input security invoker",
    "untemplated": "$$\\nLANGUAGE PLPGSQL STABLE returns null on null input security invoker",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/b.sql",
    "raw": "create view vvv as select 2 as a",
    "untemplated": "create view vvv as select 2 as a",
    "nickname": "create-select"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/b.sql",
    "raw": "create materialized view matvvv as select 2 as a",
    "untemplated": "create materialized view matvvv as select 2 as a",
    "nickname": "create-select"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/b.sql",
    "raw": "CREATE TABLE bug (\\n    id serial,\\n    description text,\\n    status text-- bug_status\\n)",
    "untemplated": "CREATE TABLE bug (\\n    id serial,\\n    description text,\\n    status text-- bug_status\\n)",
    "nickname": "create_bug"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "create schema if not exists \\"evenbetterschema\\"",
    "untemplated": "create schema if not exists \\"evenbetterschema\\"",
    "nickname": "create_schema_if"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "create extension if not exists \\"citext\\" with schema \\"public\\"",
    "untemplated": "create extension if not exists \\"citext\\" with schema \\"public\\"",
    "nickname": "create-with-schema"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "create extension if not exists \\"hstore\\" with schema \\"public\\"",
    "untemplated": "create extension if not exists \\"hstore\\" with schema \\"public\\"",
    "nickname": "create-with-schema"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "create type \\"public\\".\\"bug_status\\" as enum ('new', 'open', 'closed')",
    "untemplated": "create type \\"public\\".\\"bug_status\\" as enum ('new', 'open', 'closed')",
    "nickname": "create_type_bug_status"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "create sequence \\"public\\".\\"bug_id_seq\\"",
    "untemplated": "create sequence \\"public\\".\\"bug_id_seq\\"",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "create sequence \\"public\\".\\"products_product_no_seq\\"",
    "untemplated": "create sequence \\"public\\".\\"products_product_no_seq\\"",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "revoke select on table \\"public\\".\\"products\\" from \\"postgres\\"",
    "untemplated": "revoke select on table \\"public\\".\\"products\\" from \\"postgres\\"",
    "nickname": "revoke-select-public-postgres"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"products\\" drop constraint \\"products_name_key\\"",
    "untemplated": "alter table \\"public\\".\\"products\\" drop constraint \\"products_name_key\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"products\\" drop constraint \\"products_x_key\\"",
    "untemplated": "alter table \\"public\\".\\"products\\" drop constraint \\"products_x_key\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"products\\" drop constraint \\"products_z_fkey\\"",
    "untemplated": "alter table \\"public\\".\\"products\\" drop constraint \\"products_z_fkey\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"products\\" drop constraint \\"products_zz_fkey\\"",
    "untemplated": "alter table \\"public\\".\\"products\\" drop constraint \\"products_zz_fkey\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"products\\" drop constraint \\"x\\"",
    "untemplated": "alter table \\"public\\".\\"products\\" drop constraint \\"x\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "drop materialized view if exists \\"public\\".\\"matvvv\\"",
    "untemplated": "drop materialized view if exists \\"public\\".\\"matvvv\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "drop view if exists \\"public\\".\\"vvv\\"",
    "untemplated": "drop view if exists \\"public\\".\\"vvv\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"aunwanted\\" drop constraint \\"aunwanted_pkey\\"",
    "untemplated": "alter table \\"public\\".\\"aunwanted\\" drop constraint \\"aunwanted_pkey\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "drop index if exists \\"public\\".\\"aunwanted_pkey\\"",
    "untemplated": "drop index if exists \\"public\\".\\"aunwanted_pkey\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "drop index if exists \\"public\\".\\"orders_order_id_idx\\"",
    "untemplated": "drop index if exists \\"public\\".\\"orders_order_id_idx\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "drop index if exists \\"public\\".\\"products_name_key\\"",
    "untemplated": "drop index if exists \\"public\\".\\"products_name_key\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "drop index if exists \\"public\\".\\"products_price_idx\\"",
    "untemplated": "drop index if exists \\"public\\".\\"products_price_idx\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "drop index if exists \\"public\\".\\"products_x_idx\\"",
    "untemplated": "drop index if exists \\"public\\".\\"products_x_idx\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "drop index if exists \\"public\\".\\"products_x_key\\"",
    "untemplated": "drop index if exists \\"public\\".\\"products_x_key\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "drop table \\"public\\".\\"aunwanted\\"",
    "untemplated": "drop table \\"public\\".\\"aunwanted\\"",
    "nickname": "drop_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "drop table \\"public\\".\\"columnless_table\\"",
    "untemplated": "drop table \\"public\\".\\"columnless_table\\"",
    "nickname": "drop_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter type \\"public\\".\\"shipping_status\\" rename to \\"shipping_status__old_version_to_be_dropped\\"",
    "untemplated": "alter type \\"public\\".\\"shipping_status\\" rename to \\"shipping_status__old_version_to_be_dropped\\"",
    "nickname": "alter"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "create type \\"public\\".\\"shipping_status\\" as enum ('not shipped', 'shipped', 'delivered')",
    "untemplated": "create type \\"public\\".\\"shipping_status\\" as enum ('not shipped', 'shipped', 'delivered')",
    "nickname": "create_type_shipping_status"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter type \\"public\\".\\"unused_enum\\" rename to \\"unused_enum__old_version_to_be_dropped\\"",
    "untemplated": "alter type \\"public\\".\\"unused_enum\\" rename to \\"unused_enum__old_version_to_be_dropped\\"",
    "nickname": "alter"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "create type \\"public\\".\\"unused_enum\\" as enum ('a', 'b', 'c')",
    "untemplated": "create type \\"public\\".\\"unused_enum\\" as enum ('a', 'b', 'c')",
    "nickname": "create_type_unused_enum"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "create table \\"public\\".\\"bug\\" (\\n    \\"id\\" integer not null default nextval('bug_id_seq'::regclass),\\n    \\"description\\" text,\\n    \\"status\\" text\\n)",
    "untemplated": "create table \\"public\\".\\"bug\\" (\\n    \\"id\\" integer not null default nextval('bug_id_seq'::regclass),\\n    \\"description\\" text,\\n    \\"status\\" text\\n)",
    "nickname": "create_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "create table \\"public\\".\\"columnless_table2\\" (\\n)",
    "untemplated": "create table \\"public\\".\\"columnless_table2\\" (\\n)",
    "nickname": "create_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "create table \\"public\\".\\"order_items\\" (\\n    \\"product_no\\" integer not null,\\n    \\"order_id\\" integer not null,\\n    \\"quantity\\" integer\\n)",
    "untemplated": "create table \\"public\\".\\"order_items\\" (\\n    \\"product_no\\" integer not null,\\n    \\"order_id\\" integer not null,\\n    \\"quantity\\" integer\\n)",
    "nickname": "create_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"orders\\" alter column status type \\"public\\".\\"shipping_status\\" using status::text::\\"public\\".\\"shipping_status\\"",
    "untemplated": "alter table \\"public\\".\\"orders\\" alter column status type \\"public\\".\\"shipping_status\\" using status::text::\\"public\\".\\"shipping_status\\"",
    "nickname": "alter_public-alter"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "drop type \\"public\\".\\"shipping_status__old_version_to_be_dropped\\"",
    "untemplated": "drop type \\"public\\".\\"shipping_status__old_version_to_be_dropped\\"",
    "nickname": "drop_type_shipping_status__old_version_to_be_dropped"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "drop type \\"public\\".\\"unused_enum__old_version_to_be_dropped\\"",
    "untemplated": "drop type \\"public\\".\\"unused_enum__old_version_to_be_dropped\\"",
    "nickname": "drop_type_unused_enum__old_version_to_be_dropped"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"change_to_logged\\" set logged",
    "untemplated": "alter table \\"public\\".\\"change_to_logged\\" set logged",
    "nickname": "alter_public-set-logged"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"change_to_unlogged\\" set unlogged",
    "untemplated": "alter table \\"public\\".\\"change_to_unlogged\\" set unlogged",
    "nickname": "alter_public-set-unlogged"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"orders\\" add column \\"h\\" hstore",
    "untemplated": "alter table \\"public\\".\\"orders\\" add column \\"h\\" hstore",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"orders\\" alter column \\"order_id\\" drop default",
    "untemplated": "alter table \\"public\\".\\"orders\\" alter column \\"order_id\\" drop default",
    "nickname": "alter_public-alter-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"orders\\" alter column \\"status2\\" set data type text using \\"status2\\"::text",
    "untemplated": "alter table \\"public\\".\\"orders\\" alter column \\"status2\\" set data type text using \\"status2\\"::text",
    "nickname": "alter_public-alter-set-data"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"products\\" drop column \\"oldcolumn\\"",
    "untemplated": "alter table \\"public\\".\\"products\\" drop column \\"oldcolumn\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"products\\" drop column \\"z\\"",
    "untemplated": "alter table \\"public\\".\\"products\\" drop column \\"z\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"products\\" drop column \\"zz\\"",
    "untemplated": "alter table \\"public\\".\\"products\\" drop column \\"zz\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"products\\" add column \\"newcolumn\\" text",
    "untemplated": "alter table \\"public\\".\\"products\\" add column \\"newcolumn\\" text",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"products\\" add column \\"newcolumn2\\" interval",
    "untemplated": "alter table \\"public\\".\\"products\\" add column \\"newcolumn2\\" interval",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"products\\" alter column \\"name\\" drop not null",
    "untemplated": "alter table \\"public\\".\\"products\\" alter column \\"name\\" drop not null",
    "nickname": "alter_public-alter-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"products\\" alter column \\"name\\" set data type text using \\"name\\"::text",
    "untemplated": "alter table \\"public\\".\\"products\\" alter column \\"name\\" set data type text using \\"name\\"::text",
    "nickname": "alter_public-alter-set-data"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"products\\" alter column \\"price\\" set default 100",
    "untemplated": "alter table \\"public\\".\\"products\\" alter column \\"price\\" set default 100",
    "nickname": "alter_public-alter-set-default"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"products\\" alter column \\"price\\" set not null",
    "untemplated": "alter table \\"public\\".\\"products\\" alter column \\"price\\" set not null",
    "nickname": "alter_public-alter-set-not"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"products\\" alter column \\"product_no\\" set default nextval('products_product_no_seq'::regclass)",
    "untemplated": "alter table \\"public\\".\\"products\\" alter column \\"product_no\\" set default nextval('products_product_no_seq'::regclass)",
    "nickname": "alter_public-alter-set-default"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"products\\" alter column \\"product_no\\" set not null",
    "untemplated": "alter table \\"public\\".\\"products\\" alter column \\"product_no\\" set not null",
    "nickname": "alter_public-alter-set-not"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"products\\" alter column \\"x\\" drop default",
    "untemplated": "alter table \\"public\\".\\"products\\" alter column \\"x\\" drop default",
    "nickname": "alter_public-alter-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"products\\" alter column \\"x\\" drop not null",
    "untemplated": "alter table \\"public\\".\\"products\\" alter column \\"x\\" drop not null",
    "nickname": "alter_public-alter-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter sequence \\"public\\".\\"bug_id_seq\\" owned by \\"public\\".\\"bug\\".\\"id\\"",
    "untemplated": "alter sequence \\"public\\".\\"bug_id_seq\\" owned by \\"public\\".\\"bug\\".\\"id\\"",
    "nickname": "alter"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter sequence \\"public\\".\\"products_product_no_seq\\" owned by \\"public\\".\\"products\\".\\"product_no\\"",
    "untemplated": "alter sequence \\"public\\".\\"products_product_no_seq\\" owned by \\"public\\".\\"products\\".\\"product_no\\"",
    "nickname": "alter"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "drop sequence if exists \\"public\\".\\"aunwanted_id_seq\\"",
    "untemplated": "drop sequence if exists \\"public\\".\\"aunwanted_id_seq\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "drop sequence if exists \\"public\\".\\"orders_order_id_seq\\"",
    "untemplated": "drop sequence if exists \\"public\\".\\"orders_order_id_seq\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "drop type \\"public\\".\\"unwanted_enum\\"",
    "untemplated": "drop type \\"public\\".\\"unwanted_enum\\"",
    "nickname": "drop_type_unwanted_enum"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "drop extension if exists \\"pg_trgm\\"",
    "untemplated": "drop extension if exists \\"pg_trgm\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "CREATE UNIQUE INDEX order_items_pkey ON public.order_items USING btree (product_no, order_id)",
    "untemplated": "CREATE UNIQUE INDEX order_items_pkey ON public.order_items USING btree (product_no, order_id)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "CREATE INDEX products_name_idx ON public.products USING btree (name)",
    "untemplated": "CREATE INDEX products_name_idx ON public.products USING btree (name)",
    "nickname": "create_index_products_name_idx"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "CREATE UNIQUE INDEX products_pkey ON public.products USING btree (product_no)",
    "untemplated": "CREATE UNIQUE INDEX products_pkey ON public.products USING btree (product_no)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"order_items\\" add constraint \\"order_items_pkey\\" PRIMARY KEY using index \\"order_items_pkey\\"",
    "untemplated": "alter table \\"public\\".\\"order_items\\" add constraint \\"order_items_pkey\\" PRIMARY KEY using index \\"order_items_pkey\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"products\\" add constraint \\"products_pkey\\" PRIMARY KEY using index \\"products_pkey\\"",
    "untemplated": "alter table \\"public\\".\\"products\\" add constraint \\"products_pkey\\" PRIMARY KEY using index \\"products_pkey\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"order_items\\" add constraint \\"order_items_order_id_fkey\\" FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE not valid",
    "untemplated": "alter table \\"public\\".\\"order_items\\" add constraint \\"order_items_order_id_fkey\\" FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE not valid",
    "nickname": "alter_public-delete"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"order_items\\" validate constraint \\"order_items_order_id_fkey\\"",
    "untemplated": "alter table \\"public\\".\\"order_items\\" validate constraint \\"order_items_order_id_fkey\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"order_items\\" add constraint \\"order_items_product_no_fkey\\" FOREIGN KEY (product_no) REFERENCES products(product_no) ON DELETE RESTRICT not valid",
    "untemplated": "alter table \\"public\\".\\"order_items\\" add constraint \\"order_items_product_no_fkey\\" FOREIGN KEY (product_no) REFERENCES products(product_no) ON DELETE RESTRICT not valid",
    "nickname": "alter_public-delete"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"order_items\\" validate constraint \\"order_items_product_no_fkey\\"",
    "untemplated": "alter table \\"public\\".\\"order_items\\" validate constraint \\"order_items_product_no_fkey\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"products\\" add constraint \\"y\\" CHECK ((price > (0)::numeric)) not valid",
    "untemplated": "alter table \\"public\\".\\"products\\" add constraint \\"y\\" CHECK ((price > (0)::numeric)) not valid",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"products\\" validate constraint \\"y\\"",
    "untemplated": "alter table \\"public\\".\\"products\\" validate constraint \\"y\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"products\\" add constraint \\"x\\" CHECK ((price > (10)::numeric)) not valid",
    "untemplated": "alter table \\"public\\".\\"products\\" add constraint \\"x\\" CHECK ((price > (10)::numeric)) not valid",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "alter table \\"public\\".\\"products\\" validate constraint \\"x\\"",
    "untemplated": "alter table \\"public\\".\\"products\\" validate constraint \\"x\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "set check_function_bodies = off",
    "untemplated": "set check_function_bodies = off",
    "nickname": "set-check_function_bodies"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "CREATE OR REPLACE FUNCTION public.newfunc(i integer, t text[])\\n RETURNS TABLE(a text, c integer)\\n LANGUAGE plpgsql\\n STABLE STRICT\\nAS $function$\\n declare\\n        BEGIN\\n                select 'no', 1",
    "untemplated": "CREATE OR REPLACE FUNCTION public.newfunc(i integer, t text[])\\n RETURNS TABLE(a text, c integer)\\n LANGUAGE plpgsql\\n STABLE STRICT\\nAS $function$\\n declare\\n        BEGIN\\n                select 'no', 1",
    "nickname": "create-begin-select"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "END",
    "untemplated": "END",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "$function$",
    "untemplated": "$function$",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "CREATE OR REPLACE FUNCTION public.changed(i integer, t text[])\\n RETURNS TABLE(a text, c integer)\\n LANGUAGE plpgsql\\n STRICT SECURITY DEFINER\\nAS $function$\\n declare\\n        BEGIN\\n                select 'no', 1",
    "untemplated": "CREATE OR REPLACE FUNCTION public.changed(i integer, t text[])\\n RETURNS TABLE(a text, c integer)\\n LANGUAGE plpgsql\\n STRICT SECURITY DEFINER\\nAS $function$\\n declare\\n        BEGIN\\n                select 'no', 1",
    "nickname": "create-begin-select"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "END",
    "untemplated": "END",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "$function$",
    "untemplated": "$function$",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "create materialized view \\"public\\".\\"matvvv\\" as  SELECT 2 AS a",
    "untemplated": "create materialized view \\"public\\".\\"matvvv\\" as  SELECT 2 AS a",
    "nickname": "create-select"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "create or replace view \\"public\\".\\"vvv\\" as  SELECT 2 AS a",
    "untemplated": "create or replace view \\"public\\".\\"vvv\\" as  SELECT 2 AS a",
    "nickname": "create-select"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "grant update on table \\"public\\".\\"products\\" to \\"postgres\\"",
    "untemplated": "grant update on table \\"public\\".\\"products\\" to \\"postgres\\"",
    "nickname": "grant-update-public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "drop schema if exists \\"badschema\\"",
    "untemplated": "drop schema if exists \\"badschema\\"",
    "nickname": "drop_schema_if_exists_badschema"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "create schema if not exists \\"evenbetterschema\\"",
    "untemplated": "create schema if not exists \\"evenbetterschema\\"",
    "nickname": "create_schema_if"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "create extension if not exists \\"citext\\" with schema \\"public\\"",
    "untemplated": "create extension if not exists \\"citext\\" with schema \\"public\\"",
    "nickname": "create-with-schema"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "create extension if not exists \\"hstore\\" with schema \\"public\\"",
    "untemplated": "create extension if not exists \\"hstore\\" with schema \\"public\\"",
    "nickname": "create-with-schema"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "create type \\"public\\".\\"bug_status\\" as enum ('new', 'open', 'closed')",
    "untemplated": "create type \\"public\\".\\"bug_status\\" as enum ('new', 'open', 'closed')",
    "nickname": "create_type_bug_status"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "create sequence \\"public\\".\\"bug_id_seq\\"",
    "untemplated": "create sequence \\"public\\".\\"bug_id_seq\\"",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "create sequence \\"public\\".\\"products_product_no_seq\\"",
    "untemplated": "create sequence \\"public\\".\\"products_product_no_seq\\"",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "revoke select on table \\"public\\".\\"products\\" from \\"postgres\\"",
    "untemplated": "revoke select on table \\"public\\".\\"products\\" from \\"postgres\\"",
    "nickname": "revoke-select-public-postgres"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"products\\" drop constraint \\"products_name_key\\"",
    "untemplated": "alter table \\"public\\".\\"products\\" drop constraint \\"products_name_key\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"products\\" drop constraint \\"products_x_key\\"",
    "untemplated": "alter table \\"public\\".\\"products\\" drop constraint \\"products_x_key\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"products\\" drop constraint \\"products_z_fkey\\"",
    "untemplated": "alter table \\"public\\".\\"products\\" drop constraint \\"products_z_fkey\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"products\\" drop constraint \\"products_zz_fkey\\"",
    "untemplated": "alter table \\"public\\".\\"products\\" drop constraint \\"products_zz_fkey\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"products\\" drop constraint \\"x\\"",
    "untemplated": "alter table \\"public\\".\\"products\\" drop constraint \\"x\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "drop materialized view if exists \\"public\\".\\"matvvv\\"",
    "untemplated": "drop materialized view if exists \\"public\\".\\"matvvv\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "drop view if exists \\"public\\".\\"vvv\\"",
    "untemplated": "drop view if exists \\"public\\".\\"vvv\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"aunwanted\\" drop constraint \\"aunwanted_pkey\\"",
    "untemplated": "alter table \\"public\\".\\"aunwanted\\" drop constraint \\"aunwanted_pkey\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "drop index if exists \\"public\\".\\"aunwanted_pkey\\"",
    "untemplated": "drop index if exists \\"public\\".\\"aunwanted_pkey\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "drop index if exists \\"public\\".\\"orders_order_id_idx\\"",
    "untemplated": "drop index if exists \\"public\\".\\"orders_order_id_idx\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "drop index if exists \\"public\\".\\"products_name_key\\"",
    "untemplated": "drop index if exists \\"public\\".\\"products_name_key\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "drop index if exists \\"public\\".\\"products_price_idx\\"",
    "untemplated": "drop index if exists \\"public\\".\\"products_price_idx\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "drop index if exists \\"public\\".\\"products_x_idx\\"",
    "untemplated": "drop index if exists \\"public\\".\\"products_x_idx\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "drop index if exists \\"public\\".\\"products_x_key\\"",
    "untemplated": "drop index if exists \\"public\\".\\"products_x_key\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "drop table \\"public\\".\\"aunwanted\\"",
    "untemplated": "drop table \\"public\\".\\"aunwanted\\"",
    "nickname": "drop_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "drop table \\"public\\".\\"columnless_table\\"",
    "untemplated": "drop table \\"public\\".\\"columnless_table\\"",
    "nickname": "drop_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter type \\"public\\".\\"shipping_status\\" rename to \\"shipping_status__old_version_to_be_dropped\\"",
    "untemplated": "alter type \\"public\\".\\"shipping_status\\" rename to \\"shipping_status__old_version_to_be_dropped\\"",
    "nickname": "alter"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "create type \\"public\\".\\"shipping_status\\" as enum ('not shipped', 'shipped', 'delivered')",
    "untemplated": "create type \\"public\\".\\"shipping_status\\" as enum ('not shipped', 'shipped', 'delivered')",
    "nickname": "create_type_shipping_status"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter type \\"public\\".\\"unused_enum\\" rename to \\"unused_enum__old_version_to_be_dropped\\"",
    "untemplated": "alter type \\"public\\".\\"unused_enum\\" rename to \\"unused_enum__old_version_to_be_dropped\\"",
    "nickname": "alter"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "create type \\"public\\".\\"unused_enum\\" as enum ('a', 'b', 'c')",
    "untemplated": "create type \\"public\\".\\"unused_enum\\" as enum ('a', 'b', 'c')",
    "nickname": "create_type_unused_enum"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "create table \\"public\\".\\"bug\\" (\\n    \\"id\\" integer not null default nextval('bug_id_seq'::regclass),\\n    \\"description\\" text,\\n    \\"status\\" text\\n)",
    "untemplated": "create table \\"public\\".\\"bug\\" (\\n    \\"id\\" integer not null default nextval('bug_id_seq'::regclass),\\n    \\"description\\" text,\\n    \\"status\\" text\\n)",
    "nickname": "create_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "create table \\"public\\".\\"columnless_table2\\" (\\n)",
    "untemplated": "create table \\"public\\".\\"columnless_table2\\" (\\n)",
    "nickname": "create_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "create table \\"public\\".\\"order_items\\" (\\n    \\"product_no\\" integer not null,\\n    \\"order_id\\" integer not null,\\n    \\"quantity\\" integer\\n)",
    "untemplated": "create table \\"public\\".\\"order_items\\" (\\n    \\"product_no\\" integer not null,\\n    \\"order_id\\" integer not null,\\n    \\"quantity\\" integer\\n)",
    "nickname": "create_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"orders\\" alter column status type \\"public\\".\\"shipping_status\\" using status::text::\\"public\\".\\"shipping_status\\"",
    "untemplated": "alter table \\"public\\".\\"orders\\" alter column status type \\"public\\".\\"shipping_status\\" using status::text::\\"public\\".\\"shipping_status\\"",
    "nickname": "alter_public-alter"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "drop type \\"public\\".\\"shipping_status__old_version_to_be_dropped\\"",
    "untemplated": "drop type \\"public\\".\\"shipping_status__old_version_to_be_dropped\\"",
    "nickname": "drop_type_shipping_status__old_version_to_be_dropped"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "drop type \\"public\\".\\"unused_enum__old_version_to_be_dropped\\"",
    "untemplated": "drop type \\"public\\".\\"unused_enum__old_version_to_be_dropped\\"",
    "nickname": "drop_type_unused_enum__old_version_to_be_dropped"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"change_to_logged\\" set logged",
    "untemplated": "alter table \\"public\\".\\"change_to_logged\\" set logged",
    "nickname": "alter_public-set-logged"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"change_to_unlogged\\" set unlogged",
    "untemplated": "alter table \\"public\\".\\"change_to_unlogged\\" set unlogged",
    "nickname": "alter_public-set-unlogged"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"orders\\" add column \\"h\\" hstore",
    "untemplated": "alter table \\"public\\".\\"orders\\" add column \\"h\\" hstore",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"orders\\" alter column \\"order_id\\" drop default",
    "untemplated": "alter table \\"public\\".\\"orders\\" alter column \\"order_id\\" drop default",
    "nickname": "alter_public-alter-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"orders\\" alter column \\"status2\\" set data type text using \\"status2\\"::text",
    "untemplated": "alter table \\"public\\".\\"orders\\" alter column \\"status2\\" set data type text using \\"status2\\"::text",
    "nickname": "alter_public-alter-set-data"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"products\\" drop column \\"z\\"",
    "untemplated": "alter table \\"public\\".\\"products\\" drop column \\"z\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"products\\" drop column \\"zz\\"",
    "untemplated": "alter table \\"public\\".\\"products\\" drop column \\"zz\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"products\\" add column \\"newcolumn2\\" interval",
    "untemplated": "alter table \\"public\\".\\"products\\" add column \\"newcolumn2\\" interval",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"products\\" alter column \\"name\\" drop not null",
    "untemplated": "alter table \\"public\\".\\"products\\" alter column \\"name\\" drop not null",
    "nickname": "alter_public-alter-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"products\\" alter column \\"name\\" set data type text using \\"name\\"::text",
    "untemplated": "alter table \\"public\\".\\"products\\" alter column \\"name\\" set data type text using \\"name\\"::text",
    "nickname": "alter_public-alter-set-data"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"products\\" alter column \\"price\\" set default 100",
    "untemplated": "alter table \\"public\\".\\"products\\" alter column \\"price\\" set default 100",
    "nickname": "alter_public-alter-set-default"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"products\\" alter column \\"price\\" set not null",
    "untemplated": "alter table \\"public\\".\\"products\\" alter column \\"price\\" set not null",
    "nickname": "alter_public-alter-set-not"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"products\\" alter column \\"product_no\\" set default nextval('products_product_no_seq'::regclass)",
    "untemplated": "alter table \\"public\\".\\"products\\" alter column \\"product_no\\" set default nextval('products_product_no_seq'::regclass)",
    "nickname": "alter_public-alter-set-default"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"products\\" alter column \\"product_no\\" set not null",
    "untemplated": "alter table \\"public\\".\\"products\\" alter column \\"product_no\\" set not null",
    "nickname": "alter_public-alter-set-not"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"products\\" alter column \\"x\\" drop default",
    "untemplated": "alter table \\"public\\".\\"products\\" alter column \\"x\\" drop default",
    "nickname": "alter_public-alter-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"products\\" alter column \\"x\\" drop not null",
    "untemplated": "alter table \\"public\\".\\"products\\" alter column \\"x\\" drop not null",
    "nickname": "alter_public-alter-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter sequence \\"public\\".\\"bug_id_seq\\" owned by \\"public\\".\\"bug\\".\\"id\\"",
    "untemplated": "alter sequence \\"public\\".\\"bug_id_seq\\" owned by \\"public\\".\\"bug\\".\\"id\\"",
    "nickname": "alter"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter sequence \\"public\\".\\"products_product_no_seq\\" owned by \\"public\\".\\"products\\".\\"product_no\\"",
    "untemplated": "alter sequence \\"public\\".\\"products_product_no_seq\\" owned by \\"public\\".\\"products\\".\\"product_no\\"",
    "nickname": "alter"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "drop sequence if exists \\"public\\".\\"aunwanted_id_seq\\"",
    "untemplated": "drop sequence if exists \\"public\\".\\"aunwanted_id_seq\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "drop sequence if exists \\"public\\".\\"orders_order_id_seq\\"",
    "untemplated": "drop sequence if exists \\"public\\".\\"orders_order_id_seq\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "drop type \\"public\\".\\"unwanted_enum\\"",
    "untemplated": "drop type \\"public\\".\\"unwanted_enum\\"",
    "nickname": "drop_type_unwanted_enum"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "drop extension if exists \\"pg_trgm\\"",
    "untemplated": "drop extension if exists \\"pg_trgm\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "CREATE UNIQUE INDEX order_items_pkey ON public.order_items USING btree (product_no, order_id)",
    "untemplated": "CREATE UNIQUE INDEX order_items_pkey ON public.order_items USING btree (product_no, order_id)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "CREATE INDEX products_name_idx ON public.products USING btree (name)",
    "untemplated": "CREATE INDEX products_name_idx ON public.products USING btree (name)",
    "nickname": "create_index_products_name_idx"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "CREATE UNIQUE INDEX products_pkey ON public.products USING btree (product_no)",
    "untemplated": "CREATE UNIQUE INDEX products_pkey ON public.products USING btree (product_no)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"order_items\\" add constraint \\"order_items_pkey\\" PRIMARY KEY using index \\"order_items_pkey\\"",
    "untemplated": "alter table \\"public\\".\\"order_items\\" add constraint \\"order_items_pkey\\" PRIMARY KEY using index \\"order_items_pkey\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"products\\" add constraint \\"products_pkey\\" PRIMARY KEY using index \\"products_pkey\\"",
    "untemplated": "alter table \\"public\\".\\"products\\" add constraint \\"products_pkey\\" PRIMARY KEY using index \\"products_pkey\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"order_items\\" add constraint \\"order_items_order_id_fkey\\" FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE not valid",
    "untemplated": "alter table \\"public\\".\\"order_items\\" add constraint \\"order_items_order_id_fkey\\" FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE not valid",
    "nickname": "alter_public-delete"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"order_items\\" validate constraint \\"order_items_order_id_fkey\\"",
    "untemplated": "alter table \\"public\\".\\"order_items\\" validate constraint \\"order_items_order_id_fkey\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"order_items\\" add constraint \\"order_items_product_no_fkey\\" FOREIGN KEY (product_no) REFERENCES products(product_no) ON DELETE RESTRICT not valid",
    "untemplated": "alter table \\"public\\".\\"order_items\\" add constraint \\"order_items_product_no_fkey\\" FOREIGN KEY (product_no) REFERENCES products(product_no) ON DELETE RESTRICT not valid",
    "nickname": "alter_public-delete"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"order_items\\" validate constraint \\"order_items_product_no_fkey\\"",
    "untemplated": "alter table \\"public\\".\\"order_items\\" validate constraint \\"order_items_product_no_fkey\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"products\\" add constraint \\"y\\" CHECK ((price > (0)::numeric)) not valid",
    "untemplated": "alter table \\"public\\".\\"products\\" add constraint \\"y\\" CHECK ((price > (0)::numeric)) not valid",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"products\\" validate constraint \\"y\\"",
    "untemplated": "alter table \\"public\\".\\"products\\" validate constraint \\"y\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"products\\" add constraint \\"x\\" CHECK ((price > (10)::numeric)) not valid",
    "untemplated": "alter table \\"public\\".\\"products\\" add constraint \\"x\\" CHECK ((price > (10)::numeric)) not valid",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "alter table \\"public\\".\\"products\\" validate constraint \\"x\\"",
    "untemplated": "alter table \\"public\\".\\"products\\" validate constraint \\"x\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "set check_function_bodies = off",
    "untemplated": "set check_function_bodies = off",
    "nickname": "set-check_function_bodies"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "CREATE OR REPLACE FUNCTION public.newfunc(i integer, t text[])\\n RETURNS TABLE(a text, c integer)\\n LANGUAGE plpgsql\\n STABLE STRICT\\nAS $function$\\n declare\\n        BEGIN\\n                select 'no', 1",
    "untemplated": "CREATE OR REPLACE FUNCTION public.newfunc(i integer, t text[])\\n RETURNS TABLE(a text, c integer)\\n LANGUAGE plpgsql\\n STABLE STRICT\\nAS $function$\\n declare\\n        BEGIN\\n                select 'no', 1",
    "nickname": "create-begin-select"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "END",
    "untemplated": "END",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "$function$",
    "untemplated": "$function$",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "CREATE OR REPLACE FUNCTION public.changed(i integer, t text[])\\n RETURNS TABLE(a text, c integer)\\n LANGUAGE plpgsql\\n STRICT SECURITY DEFINER\\nAS $function$\\n declare\\n        BEGIN\\n                select 'no', 1",
    "untemplated": "CREATE OR REPLACE FUNCTION public.changed(i integer, t text[])\\n RETURNS TABLE(a text, c integer)\\n LANGUAGE plpgsql\\n STRICT SECURITY DEFINER\\nAS $function$\\n declare\\n        BEGIN\\n                select 'no', 1",
    "nickname": "create-begin-select"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "END",
    "untemplated": "END",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "$function$",
    "untemplated": "$function$",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "create materialized view \\"public\\".\\"matvvv\\" as  SELECT 2 AS a",
    "untemplated": "create materialized view \\"public\\".\\"matvvv\\" as  SELECT 2 AS a",
    "nickname": "create-select"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "create or replace view \\"public\\".\\"vvv\\" as  SELECT 2 AS a",
    "untemplated": "create or replace view \\"public\\".\\"vvv\\" as  SELECT 2 AS a",
    "nickname": "create-select"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "grant update on table \\"public\\".\\"products\\" to \\"postgres\\"",
    "untemplated": "grant update on table \\"public\\".\\"products\\" to \\"postgres\\"",
    "nickname": "grant-update-public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "drop schema if exists \\"badschema\\"",
    "untemplated": "drop schema if exists \\"badschema\\"",
    "nickname": "drop_schema_if_exists_badschema"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/everything/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/excludeschema/a.sql",
    "raw": "create schema excludedschema",
    "untemplated": "create schema excludedschema",
    "nickname": "create_schema_excludedschema"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/excludeschema/a.sql",
    "raw": "create table excludedschema.t(id uuid, value text)",
    "untemplated": "create table excludedschema.t(id uuid, value text)",
    "nickname": "create_excludedschema_t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/excludeschema/a.sql",
    "raw": "create schema schema1",
    "untemplated": "create schema schema1",
    "nickname": "create_schema_schema1"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/excludeschema/a.sql",
    "raw": "create table schema1.t(id uuid, value text)",
    "untemplated": "create table schema1.t(id uuid, value text)",
    "nickname": "create_schema1_t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/excludeschema/a.sql",
    "raw": "create schema schema2",
    "untemplated": "create schema schema2",
    "nickname": "create_schema_schema2"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/excludeschema/a.sql",
    "raw": "create table schema2.t(id uuid, value text)",
    "untemplated": "create table schema2.t(id uuid, value text)",
    "nickname": "create_schema2_t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/excludeschema/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/excludeschema/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/excludeschema/b.sql",
    "raw": "create schema schema1",
    "untemplated": "create schema schema1",
    "nickname": "create_schema_schema1"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/excludeschema/b.sql",
    "raw": "create table schema1.t(id uuid, value text)",
    "untemplated": "create table schema1.t(id uuid, value text)",
    "nickname": "create_schema1_t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/excludeschema/b.sql",
    "raw": "create schema schema2",
    "untemplated": "create schema schema2",
    "nickname": "create_schema_schema2"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/excludeschema/b.sql",
    "raw": "create table schema2.t(id uuid, value text)",
    "untemplated": "create table schema2.t(id uuid, value text)",
    "nickname": "create_schema2_t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/excludeschema/b.sql",
    "raw": "create table schema2.z(id uuid, value text)",
    "untemplated": "create table schema2.z(id uuid, value text)",
    "nickname": "create_schema2_z"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/excludeschema/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/excludeschema/expected.sql",
    "raw": "create table \\"schema2\\".\\"z\\" (\\n    \\"id\\" uuid,\\n    \\"value\\" text\\n)",
    "untemplated": "create table \\"schema2\\".\\"z\\" (\\n    \\"id\\" uuid,\\n    \\"value\\" text\\n)",
    "nickname": "create_schema2"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/excludeschema/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/excludeschema/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/extversions/a.sql",
    "raw": "create extension pg_trgm version '1.3'",
    "untemplated": "create extension pg_trgm version '1.3'",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/extversions/a.sql",
    "raw": "create extension hstore",
    "untemplated": "create extension hstore",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/extversions/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/extversions/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/extversions/b.sql",
    "raw": "create extension citext version '1.5'",
    "untemplated": "create extension citext version '1.5'",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/extversions/b.sql",
    "raw": "create extension pg_trgm version '1.4'",
    "untemplated": "create extension pg_trgm version '1.4'",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/extversions/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/extversions/expected.sql",
    "raw": "create extension if not exists \\"citext\\" with schema \\"public\\" version '1.5'",
    "untemplated": "create extension if not exists \\"citext\\" with schema \\"public\\" version '1.5'",
    "nickname": "create-with-schema"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/extversions/expected.sql",
    "raw": "alter extension \\"pg_trgm\\" update to '1.4'",
    "untemplated": "alter extension \\"pg_trgm\\" update to '1.4'",
    "nickname": "alter-update-to"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/extversions/expected.sql",
    "raw": "drop extension if exists \\"hstore\\"",
    "untemplated": "drop extension if exists \\"hstore\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/extversions/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/extversions/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/generated/a.sql",
    "raw": "-- create table t(\\n--     a int,\\n--     adding int,\\n--     modifying int generated always as identity,\\n--     removing int generated by default as identity\\n-- )",
    "untemplated": "-- create table t(\\n--     a int,\\n--     adding int,\\n--     modifying int generated always as identity,\\n--     removing int generated by default as identity\\n-- )",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/generated/a.sql",
    "raw": "create table t()",
    "untemplated": "create table t()",
    "nickname": "create_t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/generated/a.sql",
    "raw": "CREATE TABLE \\"demo_gencol\\" (\\n            \\"id\\" serial           PRIMARY KEY, -- PRIMARY KEY\\n    \\"the_column\\" TEXT               NULL GENERATED ALWAYS AS ('the original generated value') STORED, -- The column that is originally GENERATED, then changed not to be\\n    \\"the_column2\\" text\\n)",
    "untemplated": "CREATE TABLE \\"demo_gencol\\" (\\n            \\"id\\" serial           PRIMARY KEY, -- PRIMARY KEY\\n    \\"the_column\\" TEXT               NULL GENERATED ALWAYS AS ('the original generated value') STORED, -- The column that is originally GENERATED, then changed not to be\\n    \\"the_column2\\" text\\n)",
    "nickname": "create_demo_gencol"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/generated/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/generated/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/generated/b.sql",
    "raw": "-- create table t(\\n--     a int,\\n--     adding int generated always as (1) stored,\\n--     modifying int generated always as (1) stored,\\n--     removing int\\n-- )",
    "untemplated": "-- create table t(\\n--     a int,\\n--     adding int generated always as (1) stored,\\n--     modifying int generated always as (1) stored,\\n--     removing int\\n-- )",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/generated/b.sql",
    "raw": "CREATE TABLE \\"demo_gencol\\" (\\n            \\"id\\" serial           PRIMARY KEY, -- PRIMARY KEY\\n    \\"the_column\\" text,\\n    \\"the_column2\\" TEXT               NULL GENERATED ALWAYS AS ('the original generated value') STORED -- The column that is originally GENERATED, then changed not to be\\n)",
    "untemplated": "CREATE TABLE \\"demo_gencol\\" (\\n            \\"id\\" serial           PRIMARY KEY, -- PRIMARY KEY\\n    \\"the_column\\" text,\\n    \\"the_column2\\" TEXT               NULL GENERATED ALWAYS AS ('the original generated value') STORED -- The column that is originally GENERATED, then changed not to be\\n)",
    "nickname": "create_demo_gencol"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/generated/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/generated/expected.sql",
    "raw": "drop table \\"public\\".\\"t\\"",
    "untemplated": "drop table \\"public\\".\\"t\\"",
    "nickname": "drop_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/generated/expected.sql",
    "raw": "alter table \\"public\\".\\"demo_gencol\\" drop column \\"the_column2\\"",
    "untemplated": "alter table \\"public\\".\\"demo_gencol\\" drop column \\"the_column2\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/generated/expected.sql",
    "raw": "alter table \\"public\\".\\"demo_gencol\\" add column \\"the_column2\\" text generated always as ('the original generated value'::text) stored",
    "untemplated": "alter table \\"public\\".\\"demo_gencol\\" add column \\"the_column2\\" text generated always as ('the original generated value'::text) stored",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/generated/expected.sql",
    "raw": "alter table \\"public\\".\\"demo_gencol\\" alter column \\"the_column\\" drop expression",
    "untemplated": "alter table \\"public\\".\\"demo_gencol\\" alter column \\"the_column\\" drop expression",
    "nickname": "alter_public-alter-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/generated/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/generated/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/generated_added/a.sql",
    "raw": "-- create table t(\\n--     a int,\\n--     adding int,\\n--     modifying int generated always as identity,\\n--     removing int generated by default as identity\\n-- )",
    "untemplated": "-- create table t(\\n--     a int,\\n--     adding int,\\n--     modifying int generated always as identity,\\n--     removing int generated by default as identity\\n-- )",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/generated_added/a.sql",
    "raw": "create table t()",
    "untemplated": "create table t()",
    "nickname": "create_t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/generated_added/a.sql",
    "raw": "CREATE TABLE \\"demo_gencol\\" (\\n            \\"id\\" serial           PRIMARY KEY , -- PRIMARY KEY\\n    \\"the_column\\" TEXT               NULL -- The column that is originally GENERATED, then changed not to be\\n)",
    "untemplated": "CREATE TABLE \\"demo_gencol\\" (\\n            \\"id\\" serial           PRIMARY KEY , -- PRIMARY KEY\\n    \\"the_column\\" TEXT               NULL -- The column that is originally GENERATED, then changed not to be\\n)",
    "nickname": "create_demo_gencol"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/generated_added/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/generated_added/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/generated_added/b.sql",
    "raw": "-- create table t(\\n--     a int,\\n--     adding int generated always as (1) stored,\\n--     modifying int generated always as (1) stored,\\n--     removing int\\n-- )",
    "untemplated": "-- create table t(\\n--     a int,\\n--     adding int generated always as (1) stored,\\n--     modifying int generated always as (1) stored,\\n--     removing int\\n-- )",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/generated_added/b.sql",
    "raw": "CREATE TABLE \\"demo_gencol\\" (\\n            \\"id\\" serial           PRIMARY KEY , -- PRIMARY KEY\\n    \\"the_column\\" TEXT               NULL -- The column that is originally GENERATED, then changed not to be\\n)",
    "untemplated": "CREATE TABLE \\"demo_gencol\\" (\\n            \\"id\\" serial           PRIMARY KEY , -- PRIMARY KEY\\n    \\"the_column\\" TEXT               NULL -- The column that is originally GENERATED, then changed not to be\\n)",
    "nickname": "create_demo_gencol"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/generated_added/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/generated_added/expected.sql",
    "raw": "alter table \\"public\\".\\"demo_gencol\\" alter column \\"the_column\\" drop expression",
    "untemplated": "alter table \\"public\\".\\"demo_gencol\\" alter column \\"the_column\\" drop expression",
    "nickname": "alter_public-alter-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/generated_added/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/generated_added/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/identitycols/a.sql",
    "raw": "create table t(\\n    a int,\\n    b int default 1,\\n    c int generated always as (1) stored,\\n    d int generated always as identity,\\n    e int generated by default as identity\\n)",
    "untemplated": "create table t(\\n    a int,\\n    b int default 1,\\n    c int generated always as (1) stored,\\n    d int generated always as identity,\\n    e int generated by default as identity\\n)",
    "nickname": "create_t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/identitycols/a.sql",
    "raw": "create table \\"public\\".\\"gen\\" (\\n    \\"adding\\" integer,\\n    \\"removing\\" integer generated always as (1) stored\\n)",
    "untemplated": "create table \\"public\\".\\"gen\\" (\\n    \\"adding\\" integer,\\n    \\"removing\\" integer generated always as (1) stored\\n)",
    "nickname": "create_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/identitycols/a.sql",
    "raw": "create table identchanges (\\n    c int default 77,\\n    d int generated always as identity,\\n    e int generated by default as identity,\\n    f int generated always as identity\\n)",
    "untemplated": "create table identchanges (\\n    c int default 77,\\n    d int generated always as identity,\\n    e int generated by default as identity,\\n    f int generated always as identity\\n)",
    "nickname": "create_identchanges"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/identitycols/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/identitycols/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/identitycols/b.sql",
    "raw": "create table t2(\\n    a int,\\n    b int default 1,\\n    c int generated always as (1) stored,\\n    d int generated always as identity,\\n    e int generated by default as identity\\n)",
    "untemplated": "create table t2(\\n    a int,\\n    b int default 1,\\n    c int generated always as (1) stored,\\n    d int generated always as identity,\\n    e int generated by default as identity\\n)",
    "nickname": "create_t2"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/identitycols/b.sql",
    "raw": "create table \\"public\\".\\"gen\\" (\\n    \\"adding\\" integer generated always as (1) stored,\\n    \\"removing\\" integer\\n)",
    "untemplated": "create table \\"public\\".\\"gen\\" (\\n    \\"adding\\" integer generated always as (1) stored,\\n    \\"removing\\" integer\\n)",
    "nickname": "create_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/identitycols/b.sql",
    "raw": "create table identchanges (\\n    c int generated by default as identity,\\n    e int generated always as identity,\\n    d int generated by default as identity,\\n    f int\\n)",
    "untemplated": "create table identchanges (\\n    c int generated by default as identity,\\n    e int generated always as identity,\\n    d int generated by default as identity,\\n    f int\\n)",
    "nickname": "create_identchanges"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/identitycols/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/identitycols/expected.sql",
    "raw": "drop table \\"public\\".\\"t\\"",
    "untemplated": "drop table \\"public\\".\\"t\\"",
    "nickname": "drop_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/identitycols/expected.sql",
    "raw": "create table \\"public\\".\\"t2\\" (\\n    \\"a\\" integer,\\n    \\"b\\" integer default 1,\\n    \\"c\\" integer generated always as (1) stored,\\n    \\"d\\" integer generated always as identity not null,\\n    \\"e\\" integer generated by default as identity not null\\n)",
    "untemplated": "create table \\"public\\".\\"t2\\" (\\n    \\"a\\" integer,\\n    \\"b\\" integer default 1,\\n    \\"c\\" integer generated always as (1) stored,\\n    \\"d\\" integer generated always as identity not null,\\n    \\"e\\" integer generated by default as identity not null\\n)",
    "nickname": "create_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/identitycols/expected.sql",
    "raw": "alter table \\"public\\".\\"gen\\" drop column \\"adding\\"",
    "untemplated": "alter table \\"public\\".\\"gen\\" drop column \\"adding\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/identitycols/expected.sql",
    "raw": "alter table \\"public\\".\\"gen\\" add column \\"adding\\" integer generated always as (1) stored",
    "untemplated": "alter table \\"public\\".\\"gen\\" add column \\"adding\\" integer generated always as (1) stored",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/identitycols/expected.sql",
    "raw": "alter table \\"public\\".\\"gen\\" alter column \\"removing\\" drop expression",
    "untemplated": "alter table \\"public\\".\\"gen\\" alter column \\"removing\\" drop expression",
    "nickname": "alter_public-alter-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/identitycols/expected.sql",
    "raw": "alter table \\"public\\".\\"identchanges\\" alter column \\"c\\" drop default",
    "untemplated": "alter table \\"public\\".\\"identchanges\\" alter column \\"c\\" drop default",
    "nickname": "alter_public-alter-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/identitycols/expected.sql",
    "raw": "alter table \\"public\\".\\"identchanges\\" alter column \\"c\\" set not null",
    "untemplated": "alter table \\"public\\".\\"identchanges\\" alter column \\"c\\" set not null",
    "nickname": "alter_public-alter-set-not"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/identitycols/expected.sql",
    "raw": "alter table \\"public\\".\\"identchanges\\" alter column \\"c\\" add generated by default as identity",
    "untemplated": "alter table \\"public\\".\\"identchanges\\" alter column \\"c\\" add generated by default as identity",
    "nickname": "alter_public-alter"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/identitycols/expected.sql",
    "raw": "alter table \\"public\\".\\"identchanges\\" alter column \\"d\\" set generated by default",
    "untemplated": "alter table \\"public\\".\\"identchanges\\" alter column \\"d\\" set generated by default",
    "nickname": "alter_public-alter-set-generated"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/identitycols/expected.sql",
    "raw": "alter table \\"public\\".\\"identchanges\\" alter column \\"e\\" set generated always",
    "untemplated": "alter table \\"public\\".\\"identchanges\\" alter column \\"e\\" set generated always",
    "nickname": "alter_public-alter-set-generated"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/identitycols/expected.sql",
    "raw": "alter table \\"public\\".\\"identchanges\\" alter column \\"f\\" drop identity",
    "untemplated": "alter table \\"public\\".\\"identchanges\\" alter column \\"f\\" drop identity",
    "nickname": "alter_public-alter-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/identitycols/expected.sql",
    "raw": "alter table \\"public\\".\\"identchanges\\" alter column \\"f\\" drop not null",
    "untemplated": "alter table \\"public\\".\\"identchanges\\" alter column \\"f\\" drop not null",
    "nickname": "alter_public-alter-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/identitycols/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/identitycols/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/a.sql",
    "raw": "create table t(id int)",
    "untemplated": "create table t(id int)",
    "nickname": "create_t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/b.sql",
    "raw": "CREATE TABLE entity_bindings (\\n    id BIGSERIAL,\\n    entity_type TEXT NOT NULL,\\n    entity_id BIGINT NOT NULL\\n)",
    "untemplated": "CREATE TABLE entity_bindings (\\n    id BIGSERIAL,\\n    entity_type TEXT NOT NULL,\\n    entity_id BIGINT NOT NULL\\n)",
    "nickname": "create_entity_bindings"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/b.sql",
    "raw": "CREATE TABLE entity_bindings_A (\\n    CONSTRAINT \\"entity_type must be A\\" CHECK(\\"entity_type\\" = 'A'),\\n    UNIQUE(\\"entity_id\\", \\"entity_type\\")\\n) INHERITS (entity_bindings)",
    "untemplated": "CREATE TABLE entity_bindings_A (\\n    CONSTRAINT \\"entity_type must be A\\" CHECK(\\"entity_type\\" = 'A'),\\n    UNIQUE(\\"entity_id\\", \\"entity_type\\")\\n) INHERITS (entity_bindings)",
    "nickname": "create_entity_bindings_a"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/b.sql",
    "raw": "CREATE TABLE entity_bindings_B (\\n    CONSTRAINT \\"entity_type must be B\\" CHECK(\\"entity_type\\" = 'B'),\\n    UNIQUE(\\"entity_id\\", \\"entity_type\\")\\n) INHERITS (entity_bindings)",
    "untemplated": "CREATE TABLE entity_bindings_B (\\n    CONSTRAINT \\"entity_type must be B\\" CHECK(\\"entity_type\\" = 'B'),\\n    UNIQUE(\\"entity_id\\", \\"entity_type\\")\\n) INHERITS (entity_bindings)",
    "nickname": "create_entity_bindings_b"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/b.sql",
    "raw": "CREATE TABLE entity_bindings_C (\\n    CONSTRAINT \\"entity_type must be C\\" CHECK(\\"entity_type\\" = 'C'),\\n    UNIQUE(\\"entity_id\\", \\"entity_type\\")\\n) INHERITS (entity_bindings)",
    "untemplated": "CREATE TABLE entity_bindings_C (\\n    CONSTRAINT \\"entity_type must be C\\" CHECK(\\"entity_type\\" = 'C'),\\n    UNIQUE(\\"entity_id\\", \\"entity_type\\")\\n) INHERITS (entity_bindings)",
    "nickname": "create_entity_bindings_c"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/expected.sql",
    "raw": "create sequence \\"public\\".\\"entity_bindings_id_seq\\"",
    "untemplated": "create sequence \\"public\\".\\"entity_bindings_id_seq\\"",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/expected.sql",
    "raw": "drop table \\"public\\".\\"t\\"",
    "untemplated": "drop table \\"public\\".\\"t\\"",
    "nickname": "drop_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/expected.sql",
    "raw": "create table \\"public\\".\\"entity_bindings\\" (\\n    \\"id\\" bigint not null default nextval('entity_bindings_id_seq'::regclass),\\n    \\"entity_type\\" text not null,\\n    \\"entity_id\\" bigint not null\\n)",
    "untemplated": "create table \\"public\\".\\"entity_bindings\\" (\\n    \\"id\\" bigint not null default nextval('entity_bindings_id_seq'::regclass),\\n    \\"entity_type\\" text not null,\\n    \\"entity_id\\" bigint not null\\n)",
    "nickname": "create_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/expected.sql",
    "raw": "create table \\"public\\".\\"entity_bindings_a\\" (\\n    \\"id\\" bigint not null default nextval('entity_bindings_id_seq'::regclass),\\n    \\"entity_type\\" text not null,\\n    \\"entity_id\\" bigint not null\\n) inherits (\\"public\\".\\"entity_bindings\\")",
    "untemplated": "create table \\"public\\".\\"entity_bindings_a\\" (\\n    \\"id\\" bigint not null default nextval('entity_bindings_id_seq'::regclass),\\n    \\"entity_type\\" text not null,\\n    \\"entity_id\\" bigint not null\\n) inherits (\\"public\\".\\"entity_bindings\\")",
    "nickname": "create_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/expected.sql",
    "raw": "create table \\"public\\".\\"entity_bindings_b\\" (\\n    \\"id\\" bigint not null default nextval('entity_bindings_id_seq'::regclass),\\n    \\"entity_type\\" text not null,\\n    \\"entity_id\\" bigint not null\\n) inherits (\\"public\\".\\"entity_bindings\\")",
    "untemplated": "create table \\"public\\".\\"entity_bindings_b\\" (\\n    \\"id\\" bigint not null default nextval('entity_bindings_id_seq'::regclass),\\n    \\"entity_type\\" text not null,\\n    \\"entity_id\\" bigint not null\\n) inherits (\\"public\\".\\"entity_bindings\\")",
    "nickname": "create_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/expected.sql",
    "raw": "create table \\"public\\".\\"entity_bindings_c\\" (\\n    \\"id\\" bigint not null default nextval('entity_bindings_id_seq'::regclass),\\n    \\"entity_type\\" text not null,\\n    \\"entity_id\\" bigint not null\\n) inherits (\\"public\\".\\"entity_bindings\\")",
    "untemplated": "create table \\"public\\".\\"entity_bindings_c\\" (\\n    \\"id\\" bigint not null default nextval('entity_bindings_id_seq'::regclass),\\n    \\"entity_type\\" text not null,\\n    \\"entity_id\\" bigint not null\\n) inherits (\\"public\\".\\"entity_bindings\\")",
    "nickname": "create_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/expected.sql",
    "raw": "alter sequence \\"public\\".\\"entity_bindings_id_seq\\" owned by \\"public\\".\\"entity_bindings\\".\\"id\\"",
    "untemplated": "alter sequence \\"public\\".\\"entity_bindings_id_seq\\" owned by \\"public\\".\\"entity_bindings\\".\\"id\\"",
    "nickname": "alter"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/expected.sql",
    "raw": "CREATE UNIQUE INDEX entity_bindings_a_entity_id_entity_type_key ON public.entity_bindings_a USING btree (entity_id, entity_type)",
    "untemplated": "CREATE UNIQUE INDEX entity_bindings_a_entity_id_entity_type_key ON public.entity_bindings_a USING btree (entity_id, entity_type)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/expected.sql",
    "raw": "CREATE UNIQUE INDEX entity_bindings_b_entity_id_entity_type_key ON public.entity_bindings_b USING btree (entity_id, entity_type)",
    "untemplated": "CREATE UNIQUE INDEX entity_bindings_b_entity_id_entity_type_key ON public.entity_bindings_b USING btree (entity_id, entity_type)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/expected.sql",
    "raw": "CREATE UNIQUE INDEX entity_bindings_c_entity_id_entity_type_key ON public.entity_bindings_c USING btree (entity_id, entity_type)",
    "untemplated": "CREATE UNIQUE INDEX entity_bindings_c_entity_id_entity_type_key ON public.entity_bindings_c USING btree (entity_id, entity_type)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/expected.sql",
    "raw": "alter table \\"public\\".\\"entity_bindings_a\\" add constraint \\"entity_bindings_a_entity_id_entity_type_key\\" UNIQUE using index \\"entity_bindings_a_entity_id_entity_type_key\\"",
    "untemplated": "alter table \\"public\\".\\"entity_bindings_a\\" add constraint \\"entity_bindings_a_entity_id_entity_type_key\\" UNIQUE using index \\"entity_bindings_a_entity_id_entity_type_key\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/expected.sql",
    "raw": "alter table \\"public\\".\\"entity_bindings_a\\" add constraint \\"entity_type must be A\\" CHECK ((entity_type = 'A'::text)) not valid",
    "untemplated": "alter table \\"public\\".\\"entity_bindings_a\\" add constraint \\"entity_type must be A\\" CHECK ((entity_type = 'A'::text)) not valid",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/expected.sql",
    "raw": "alter table \\"public\\".\\"entity_bindings_a\\" validate constraint \\"entity_type must be A\\"",
    "untemplated": "alter table \\"public\\".\\"entity_bindings_a\\" validate constraint \\"entity_type must be A\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/expected.sql",
    "raw": "alter table \\"public\\".\\"entity_bindings_b\\" add constraint \\"entity_bindings_b_entity_id_entity_type_key\\" UNIQUE using index \\"entity_bindings_b_entity_id_entity_type_key\\"",
    "untemplated": "alter table \\"public\\".\\"entity_bindings_b\\" add constraint \\"entity_bindings_b_entity_id_entity_type_key\\" UNIQUE using index \\"entity_bindings_b_entity_id_entity_type_key\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/expected.sql",
    "raw": "alter table \\"public\\".\\"entity_bindings_b\\" add constraint \\"entity_type must be B\\" CHECK ((entity_type = 'B'::text)) not valid",
    "untemplated": "alter table \\"public\\".\\"entity_bindings_b\\" add constraint \\"entity_type must be B\\" CHECK ((entity_type = 'B'::text)) not valid",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/expected.sql",
    "raw": "alter table \\"public\\".\\"entity_bindings_b\\" validate constraint \\"entity_type must be B\\"",
    "untemplated": "alter table \\"public\\".\\"entity_bindings_b\\" validate constraint \\"entity_type must be B\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/expected.sql",
    "raw": "alter table \\"public\\".\\"entity_bindings_c\\" add constraint \\"entity_bindings_c_entity_id_entity_type_key\\" UNIQUE using index \\"entity_bindings_c_entity_id_entity_type_key\\"",
    "untemplated": "alter table \\"public\\".\\"entity_bindings_c\\" add constraint \\"entity_bindings_c_entity_id_entity_type_key\\" UNIQUE using index \\"entity_bindings_c_entity_id_entity_type_key\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/expected.sql",
    "raw": "alter table \\"public\\".\\"entity_bindings_c\\" add constraint \\"entity_type must be C\\" CHECK ((entity_type = 'C'::text)) not valid",
    "untemplated": "alter table \\"public\\".\\"entity_bindings_c\\" add constraint \\"entity_type must be C\\" CHECK ((entity_type = 'C'::text)) not valid",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/expected.sql",
    "raw": "alter table \\"public\\".\\"entity_bindings_c\\" validate constraint \\"entity_type must be C\\"",
    "untemplated": "alter table \\"public\\".\\"entity_bindings_c\\" validate constraint \\"entity_type must be C\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit2/a.sql",
    "raw": "create table timestamp_base (created_at timestamp default now(), e integer)",
    "untemplated": "create table timestamp_base (created_at timestamp default now(), e integer)",
    "nickname": "create_timestamp_base"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit2/a.sql",
    "raw": "create table a (a1 integer, a2 integer) inherits (timestamp_base)",
    "untemplated": "create table a (a1 integer, a2 integer) inherits (timestamp_base)",
    "nickname": "create_a"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit2/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit2/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit2/b.sql",
    "raw": "create table timestamp_base (created_at timestamp default now())",
    "untemplated": "create table timestamp_base (created_at timestamp default now())",
    "nickname": "create_timestamp_base"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit2/b.sql",
    "raw": "create table a (a1 integer, a2 integer) inherits (timestamp_base)",
    "untemplated": "create table a (a1 integer, a2 integer) inherits (timestamp_base)",
    "nickname": "create_a"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit2/b.sql",
    "raw": "alter table a drop column a2",
    "untemplated": "alter table a drop column a2",
    "nickname": "alter_a-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit2/b.sql",
    "raw": "alter table a add column e integer",
    "untemplated": "alter table a add column e integer",
    "nickname": "alter_a"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit2/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit2/expected.sql",
    "raw": "alter table \\"public\\".\\"timestamp_base\\" drop column \\"e\\"",
    "untemplated": "alter table \\"public\\".\\"timestamp_base\\" drop column \\"e\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit2/expected.sql",
    "raw": "alter table \\"public\\".\\"a\\" drop column \\"a2\\"",
    "untemplated": "alter table \\"public\\".\\"a\\" drop column \\"a2\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit2/expected.sql",
    "raw": "alter table \\"public\\".\\"a\\" add column \\"e\\" integer",
    "untemplated": "alter table \\"public\\".\\"a\\" add column \\"e\\" integer",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit2/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/inherit2/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/multi_column_index/a.sql",
    "raw": "create table a(id int primary key not null)",
    "untemplated": "create table a(id int primary key not null)",
    "nickname": "create_a"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/multi_column_index/a.sql",
    "raw": "create table b(id int primary key not null)",
    "untemplated": "create table b(id int primary key not null)",
    "nickname": "create_b"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/multi_column_index/a.sql",
    "raw": "create table ab (\\n    id int primary key not null,\\n    a_id int NOT NULL,\\n    b_id int NOT NULL\\n)",
    "untemplated": "create table ab (\\n    id int primary key not null,\\n    a_id int NOT NULL,\\n    b_id int NOT NULL\\n)",
    "nickname": "create_ab"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/multi_column_index/a.sql",
    "raw": "-- Implicitly creates a unique index\\nalter table ab add constraint ab_a_id_b_id unique (a_id, b_id)",
    "untemplated": "-- Implicitly creates a unique index\\nalter table ab add constraint ab_a_id_b_id unique (a_id, b_id)",
    "nickname": "alter_ab"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/multi_column_index/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/multi_column_index/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/multi_column_index/b.sql",
    "raw": "create table a(id int primary key not null)",
    "untemplated": "create table a(id int primary key not null)",
    "nickname": "create_a"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/multi_column_index/b.sql",
    "raw": "create table b(id int primary key not null)",
    "untemplated": "create table b(id int primary key not null)",
    "nickname": "create_b"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/multi_column_index/b.sql",
    "raw": "create table ab (\\n    id int primary key not null,\\n    a_id int NOT NULL,\\n    b_id int NOT NULL\\n)",
    "untemplated": "create table ab (\\n    id int primary key not null,\\n    a_id int NOT NULL,\\n    b_id int NOT NULL\\n)",
    "nickname": "create_ab"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/multi_column_index/b.sql",
    "raw": "create unique index ab_a_id_b_id on ab (a_id, b_id)",
    "untemplated": "create unique index ab_a_id_b_id on ab (a_id, b_id)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/multi_column_index/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/multi_column_index/expected.sql",
    "raw": "alter table \\"public\\".\\"ab\\" drop constraint \\"ab_a_id_b_id\\"",
    "untemplated": "alter table \\"public\\".\\"ab\\" drop constraint \\"ab_a_id_b_id\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/multi_column_index/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/multi_column_index/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/partitioning/a.sql",
    "raw": "CREATE TABLE measurement (\\n    city_id         int not null,\\n    logdate         date not null,\\n    peaktemp        int,\\n    unitsales       int\\n) PARTITION BY RANGE (logdate)",
    "untemplated": "CREATE TABLE measurement (\\n    city_id         int not null,\\n    logdate         date not null,\\n    peaktemp        int,\\n    unitsales       int\\n) PARTITION BY RANGE (logdate)",
    "nickname": "create_measurement"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/partitioning/a.sql",
    "raw": "CREATE TABLE measurement_y2006m02 PARTITION OF measurement\\n    FOR VALUES FROM ('2006-02-01') TO ('2006-03-01')",
    "untemplated": "CREATE TABLE measurement_y2006m02 PARTITION OF measurement\\n    FOR VALUES FROM ('2006-02-01') TO ('2006-03-01')",
    "nickname": "create_measurement_y2006m02"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/partitioning/a.sql",
    "raw": "CREATE TABLE measurement_y2006m03 PARTITION OF measurement\\n    FOR VALUES FROM ('2006-03-01') TO ('2006-04-01')",
    "untemplated": "CREATE TABLE measurement_y2006m03 PARTITION OF measurement\\n    FOR VALUES FROM ('2006-03-01') TO ('2006-04-01')",
    "nickname": "create_measurement_y2006m03"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/partitioning/a.sql",
    "raw": "CREATE INDEX ON measurement_y2006m02 (logdate)",
    "untemplated": "CREATE INDEX ON measurement_y2006m02 (logdate)",
    "nickname": "create_index"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/partitioning/a.sql",
    "raw": "CREATE TABLE reg2partitioned( city_id int not null, logdate date not null, peaktemp int, unitsales int)",
    "untemplated": "CREATE TABLE reg2partitioned( city_id int not null, logdate date not null, peaktemp int, unitsales int)",
    "nickname": "create_reg2partitioned"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/partitioning/a.sql",
    "raw": "CREATE TABLE partitioned2reg( city_id int not null, logdate date not null, peaktemp int, unitsales int ) PARTITION BY RANGE (logdate)",
    "untemplated": "CREATE TABLE partitioned2reg( city_id int not null, logdate date not null, peaktemp int, unitsales int ) PARTITION BY RANGE (logdate)",
    "nickname": "create_partitioned2reg"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/partitioning/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/partitioning/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/partitioning/b.sql",
    "raw": "CREATE TABLE measurement (\\n    city_id         int not null,\\n    logdate         date not null,\\n    peaktemp        int,\\n    unitsales       int,\\n    extra           text\\n) PARTITION BY RANGE (logdate)",
    "untemplated": "CREATE TABLE measurement (\\n    city_id         int not null,\\n    logdate         date not null,\\n    peaktemp        int,\\n    unitsales       int,\\n    extra           text\\n) PARTITION BY RANGE (logdate)",
    "nickname": "create_measurement"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/partitioning/b.sql",
    "raw": "CREATE TABLE measurement_y2005m02 PARTITION OF measurement\\n    FOR VALUES FROM ('2005-02-01') TO ('2005-03-01')",
    "untemplated": "CREATE TABLE measurement_y2005m02 PARTITION OF measurement\\n    FOR VALUES FROM ('2005-02-01') TO ('2005-03-01')",
    "nickname": "create_measurement_y2005m02"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/partitioning/b.sql",
    "raw": "CREATE TABLE measurement_y2006m02 PARTITION OF measurement\\n    FOR VALUES FROM ('2006-02-01') TO ('2006-03-01')",
    "untemplated": "CREATE TABLE measurement_y2006m02 PARTITION OF measurement\\n    FOR VALUES FROM ('2006-02-01') TO ('2006-03-01')",
    "nickname": "create_measurement_y2006m02"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/partitioning/b.sql",
    "raw": "CREATE TABLE measurement_y2006m03 (\\n    city_id         int not null,\\n    logdate         date not null,\\n    peaktemp        int,\\n    unitsales       int\\n)",
    "untemplated": "CREATE TABLE measurement_y2006m03 (\\n    city_id         int not null,\\n    logdate         date not null,\\n    peaktemp        int,\\n    unitsales       int\\n)",
    "nickname": "create_measurement_y2006m03"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/partitioning/b.sql",
    "raw": "CREATE TABLE reg2partitioned( city_id int not null, logdate date not null, peaktemp int, unitsales int) PARTITION BY RANGE (logdate)",
    "untemplated": "CREATE TABLE reg2partitioned( city_id int not null, logdate date not null, peaktemp int, unitsales int) PARTITION BY RANGE (logdate)",
    "nickname": "create_reg2partitioned"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/partitioning/b.sql",
    "raw": "CREATE TABLE partitioned2reg( city_id int not null, logdate date not null, peaktemp int, unitsales int)",
    "untemplated": "CREATE TABLE partitioned2reg( city_id int not null, logdate date not null, peaktemp int, unitsales int)",
    "nickname": "create_partitioned2reg"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/partitioning/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/partitioning/expected.sql",
    "raw": "drop index if exists \\"public\\".\\"measurement_y2006m02_logdate_idx\\"",
    "untemplated": "drop index if exists \\"public\\".\\"measurement_y2006m02_logdate_idx\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/partitioning/expected.sql",
    "raw": "create table \\"public\\".\\"measurement_y2005m02\\" partition of \\"public\\".\\"measurement\\" FOR VALUES FROM ('2005-02-01') TO ('2005-03-01')",
    "untemplated": "create table \\"public\\".\\"measurement_y2005m02\\" partition of \\"public\\".\\"measurement\\" FOR VALUES FROM ('2005-02-01') TO ('2005-03-01')",
    "nickname": "create_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/partitioning/expected.sql",
    "raw": "alter table \\"public\\".\\"measurement\\" detach partition \\"public\\".\\"measurement_y2006m03\\"",
    "untemplated": "alter table \\"public\\".\\"measurement\\" detach partition \\"public\\".\\"measurement_y2006m03\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/partitioning/expected.sql",
    "raw": "drop table \\"public\\".\\"partitioned2reg\\"",
    "untemplated": "drop table \\"public\\".\\"partitioned2reg\\"",
    "nickname": "drop_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/partitioning/expected.sql",
    "raw": "create table \\"public\\".\\"partitioned2reg\\" (\\n    \\"city_id\\" integer not null,\\n    \\"logdate\\" date not null,\\n    \\"peaktemp\\" integer,\\n    \\"unitsales\\" integer\\n)",
    "untemplated": "create table \\"public\\".\\"partitioned2reg\\" (\\n    \\"city_id\\" integer not null,\\n    \\"logdate\\" date not null,\\n    \\"peaktemp\\" integer,\\n    \\"unitsales\\" integer\\n)",
    "nickname": "create_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/partitioning/expected.sql",
    "raw": "drop table \\"public\\".\\"reg2partitioned\\"",
    "untemplated": "drop table \\"public\\".\\"reg2partitioned\\"",
    "nickname": "drop_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/partitioning/expected.sql",
    "raw": "create table \\"public\\".\\"reg2partitioned\\" (\\n    \\"city_id\\" integer not null,\\n    \\"logdate\\" date not null,\\n    \\"peaktemp\\" integer,\\n    \\"unitsales\\" integer\\n) partition by RANGE (logdate)",
    "untemplated": "create table \\"public\\".\\"reg2partitioned\\" (\\n    \\"city_id\\" integer not null,\\n    \\"logdate\\" date not null,\\n    \\"peaktemp\\" integer,\\n    \\"unitsales\\" integer\\n) partition by RANGE (logdate)",
    "nickname": "create_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/partitioning/expected.sql",
    "raw": "alter table \\"public\\".\\"measurement\\" add column \\"extra\\" text",
    "untemplated": "alter table \\"public\\".\\"measurement\\" add column \\"extra\\" text",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/partitioning/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/partitioning/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/a.sql",
    "raw": "create extension pg_trgm",
    "untemplated": "create extension pg_trgm",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/a.sql",
    "raw": "create schema any_schema",
    "untemplated": "create schema any_schema",
    "nickname": "create_schema_any_schema"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/a.sql",
    "raw": "CREATE TYPE any_enum AS ENUM ('value1', 'value2')",
    "untemplated": "CREATE TYPE any_enum AS ENUM ('value1', 'value2')",
    "nickname": "create_type_any_enum"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/a.sql",
    "raw": "CREATE TABLE any_table (\\n    id serial primary key,\\n    name text not null\\n)",
    "untemplated": "CREATE TABLE any_table (\\n    id serial primary key,\\n    name text not null\\n)",
    "nickname": "create_any_table"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/a.sql",
    "raw": "create unique index on any_table(name)",
    "untemplated": "create unique index on any_table(name)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/a.sql",
    "raw": "create view any_view as select * from any_table",
    "untemplated": "create view any_view as select * from any_table",
    "nickname": "create-select-any_table"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/a.sql",
    "raw": "create view any_other_view as select * from any_table",
    "untemplated": "create view any_other_view as select * from any_table",
    "nickname": "create-select-any_table"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/a.sql",
    "raw": "create or replace function any_function(i integer, t text[])\\nreturns TABLE(a text, c integer) as\\n$$\\n declare\\n        BEGIN\\n                select 'no', 1",
    "untemplated": "create or replace function any_function(i integer, t text[])\\nreturns TABLE(a text, c integer) as\\n$$\\n declare\\n        BEGIN\\n                select 'no', 1",
    "nickname": "create-begin-select"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/a.sql",
    "raw": "END",
    "untemplated": "END",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/a.sql",
    "raw": "$$\\nLANGUAGE PLPGSQL STABLE returns null on null input security definer",
    "untemplated": "$$\\nLANGUAGE PLPGSQL STABLE returns null on null input security definer",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/a.sql",
    "raw": "grant select, insert on table any_table to postgres",
    "untemplated": "grant select, insert on table any_table to postgres",
    "nickname": "grant-select-insert-any_table"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/additions.sql",
    "raw": "grant delete on table any_table to postgres",
    "untemplated": "grant delete on table any_table to postgres",
    "nickname": "grant-delete-any_table"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/additions.sql",
    "raw": "revoke select on table any_table from postgres",
    "untemplated": "revoke select on table any_table from postgres",
    "nickname": "revoke-select-any_table-postgres"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/b.sql",
    "raw": "create extension pg_trgm",
    "untemplated": "create extension pg_trgm",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/b.sql",
    "raw": "create schema any_schema",
    "untemplated": "create schema any_schema",
    "nickname": "create_schema_any_schema"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/b.sql",
    "raw": "CREATE TYPE any_enum AS ENUM ('value1', 'value2')",
    "untemplated": "CREATE TYPE any_enum AS ENUM ('value1', 'value2')",
    "nickname": "create_type_any_enum"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/b.sql",
    "raw": "CREATE TABLE any_table (\\n    id serial primary key,\\n    name text not null\\n)",
    "untemplated": "CREATE TABLE any_table (\\n    id serial primary key,\\n    name text not null\\n)",
    "nickname": "create_any_table"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/b.sql",
    "raw": "create unique index on any_table(name)",
    "untemplated": "create unique index on any_table(name)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/b.sql",
    "raw": "create view any_view as select * from any_table",
    "untemplated": "create view any_view as select * from any_table",
    "nickname": "create-select-any_table"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/b.sql",
    "raw": "create or replace function any_function(i integer, t text[])\\nreturns TABLE(a text, c integer) as\\n$$\\n declare\\n        BEGIN\\n                select 'no', 1",
    "untemplated": "create or replace function any_function(i integer, t text[])\\nreturns TABLE(a text, c integer) as\\n$$\\n declare\\n        BEGIN\\n                select 'no', 1",
    "nickname": "create-begin-select"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/b.sql",
    "raw": "END",
    "untemplated": "END",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/b.sql",
    "raw": "$$\\nLANGUAGE PLPGSQL STABLE returns null on null input security definer",
    "untemplated": "$$\\nLANGUAGE PLPGSQL STABLE returns null on null input security definer",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/b.sql",
    "raw": "grant update, insert on table any_table to postgres",
    "untemplated": "grant update, insert on table any_table to postgres",
    "nickname": "grant-update-_-insert-any_table"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/expected.sql",
    "raw": "revoke select on table \\"public\\".\\"any_table\\" from \\"postgres\\"",
    "untemplated": "revoke select on table \\"public\\".\\"any_table\\" from \\"postgres\\"",
    "nickname": "revoke-select-public-postgres"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/expected.sql",
    "raw": "drop view if exists \\"public\\".\\"any_other_view\\"",
    "untemplated": "drop view if exists \\"public\\".\\"any_other_view\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/expected.sql",
    "raw": "grant update on table \\"public\\".\\"any_table\\" to \\"postgres\\"",
    "untemplated": "grant update on table \\"public\\".\\"any_table\\" to \\"postgres\\"",
    "nickname": "grant-update-public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/expected2.sql",
    "raw": "revoke delete on table \\"public\\".\\"any_table\\" from \\"postgres\\"",
    "untemplated": "revoke delete on table \\"public\\".\\"any_table\\" from \\"postgres\\"",
    "nickname": "revoke-delete-public-postgres"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/expected2.sql",
    "raw": "drop view if exists \\"public\\".\\"any_other_view\\"",
    "untemplated": "drop view if exists \\"public\\".\\"any_other_view\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/expected2.sql",
    "raw": "grant update on table \\"public\\".\\"any_table\\" to \\"postgres\\"",
    "untemplated": "grant update on table \\"public\\".\\"any_table\\" to \\"postgres\\"",
    "nickname": "grant-update-public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/privileges/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls/a.sql",
    "raw": "CREATE TABLE accounts (manager text, company text, contact_email text)",
    "untemplated": "CREATE TABLE accounts (manager text, company text, contact_email text)",
    "nickname": "create_accounts"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls/a.sql",
    "raw": "ALTER TABLE accounts ENABLE ROW LEVEL SECURITY",
    "untemplated": "ALTER TABLE accounts ENABLE ROW LEVEL SECURITY",
    "nickname": "alter_accounts"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls/a.sql",
    "raw": "CREATE POLICY account_managers ON accounts TO schemainspect_test_role\\n    USING (manager = current_user)",
    "untemplated": "CREATE POLICY account_managers ON accounts TO schemainspect_test_role\\n    USING (manager = current_user)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls/a.sql",
    "raw": "CREATE TABLE accounts2 (manager text, company text, contact_email text)",
    "untemplated": "CREATE TABLE accounts2 (manager text, company text, contact_email text)",
    "nickname": "create_accounts2"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls/b.sql",
    "raw": "CREATE TABLE accounts (manager text, company text, contact_email text)",
    "untemplated": "CREATE TABLE accounts (manager text, company text, contact_email text)",
    "nickname": "create_accounts"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls/b.sql",
    "raw": "ALTER TABLE accounts ENABLE ROW LEVEL SECURITY",
    "untemplated": "ALTER TABLE accounts ENABLE ROW LEVEL SECURITY",
    "nickname": "alter_accounts"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls/b.sql",
    "raw": "CREATE POLICY account_managers ON accounts as restrictive TO schemainspect_test_role\\n    USING (manager = current_user)",
    "untemplated": "CREATE POLICY account_managers ON accounts as restrictive TO schemainspect_test_role\\n    USING (manager = current_user)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls/b.sql",
    "raw": "CREATE TABLE accounts2 (manager text, company text, contact_email text)",
    "untemplated": "CREATE TABLE accounts2 (manager text, company text, contact_email text)",
    "nickname": "create_accounts2"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls/b.sql",
    "raw": "ALTER TABLE accounts2 ENABLE ROW LEVEL SECURITY",
    "untemplated": "ALTER TABLE accounts2 ENABLE ROW LEVEL SECURITY",
    "nickname": "alter_accounts2"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls/expected.sql",
    "raw": "drop policy \\"account_managers\\" on \\"public\\".\\"accounts\\"",
    "untemplated": "drop policy \\"account_managers\\" on \\"public\\".\\"accounts\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls/expected.sql",
    "raw": "alter table \\"public\\".\\"accounts2\\" enable row level security",
    "untemplated": "alter table \\"public\\".\\"accounts2\\" enable row level security",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls/expected.sql",
    "raw": "create policy \\"account_managers\\"\\non \\"public\\".\\"accounts\\"\\nas restrictive\\nfor all\\nto schemainspect_test_role\\nusing ((manager = CURRENT_USER))",
    "untemplated": "create policy \\"account_managers\\"\\non \\"public\\".\\"accounts\\"\\nas restrictive\\nfor all\\nto schemainspect_test_role\\nusing ((manager = CURRENT_USER))",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls2/a.sql",
    "raw": "create table t()",
    "untemplated": "create table t()",
    "nickname": "create_t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls2/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls2/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls2/b.sql",
    "raw": "CREATE TABLE example (\\n  id SERIAL PRIMARY KEY,\\n  name text NOT NULL\\n)",
    "untemplated": "CREATE TABLE example (\\n  id SERIAL PRIMARY KEY,\\n  name text NOT NULL\\n)",
    "nickname": "create_example"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls2/b.sql",
    "raw": "ALTER TABLE example ENABLE ROW LEVEL SECURITY",
    "untemplated": "ALTER TABLE example ENABLE ROW LEVEL SECURITY",
    "nickname": "alter_example"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls2/b.sql",
    "raw": "CREATE POLICY example_all ON example FOR ALL\\n   USING (true)",
    "untemplated": "CREATE POLICY example_all ON example FOR ALL\\n   USING (true)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls2/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls2/expected.sql",
    "raw": "create sequence \\"public\\".\\"example_id_seq\\"",
    "untemplated": "create sequence \\"public\\".\\"example_id_seq\\"",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls2/expected.sql",
    "raw": "drop table \\"public\\".\\"t\\"",
    "untemplated": "drop table \\"public\\".\\"t\\"",
    "nickname": "drop_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls2/expected.sql",
    "raw": "create table \\"public\\".\\"example\\" (\\n    \\"id\\" integer not null default nextval('example_id_seq'::regclass),\\n    \\"name\\" text not null\\n)",
    "untemplated": "create table \\"public\\".\\"example\\" (\\n    \\"id\\" integer not null default nextval('example_id_seq'::regclass),\\n    \\"name\\" text not null\\n)",
    "nickname": "create_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls2/expected.sql",
    "raw": "alter table \\"public\\".\\"example\\" enable row level security",
    "untemplated": "alter table \\"public\\".\\"example\\" enable row level security",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls2/expected.sql",
    "raw": "alter sequence \\"public\\".\\"example_id_seq\\" owned by \\"public\\".\\"example\\".\\"id\\"",
    "untemplated": "alter sequence \\"public\\".\\"example_id_seq\\" owned by \\"public\\".\\"example\\".\\"id\\"",
    "nickname": "alter"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls2/expected.sql",
    "raw": "CREATE UNIQUE INDEX example_pkey ON public.example USING btree (id)",
    "untemplated": "CREATE UNIQUE INDEX example_pkey ON public.example USING btree (id)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls2/expected.sql",
    "raw": "alter table \\"public\\".\\"example\\" add constraint \\"example_pkey\\" PRIMARY KEY using index \\"example_pkey\\"",
    "untemplated": "alter table \\"public\\".\\"example\\" add constraint \\"example_pkey\\" PRIMARY KEY using index \\"example_pkey\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls2/expected.sql",
    "raw": "create policy \\"example_all\\"\\non \\"public\\".\\"example\\"\\nas permissive\\nfor all\\nto public\\nusing (true)",
    "untemplated": "create policy \\"example_all\\"\\non \\"public\\".\\"example\\"\\nas permissive\\nfor all\\nto public\\nusing (true)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls2/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/rls2/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/seq/a.sql",
    "raw": "create table test (\\n  id serial primary key\\n)",
    "untemplated": "create table test (\\n  id serial primary key\\n)",
    "nickname": "create_test"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/seq/a.sql",
    "raw": "create table unwanted()",
    "untemplated": "create table unwanted()",
    "nickname": "create_unwanted"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/seq/a.sql",
    "raw": "create schema other",
    "untemplated": "create schema other",
    "nickname": "create_schema_other"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/seq/a.sql",
    "raw": "create sequence \\"public\\".\\"test2_id_seq\\"",
    "untemplated": "create sequence \\"public\\".\\"test2_id_seq\\"",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/seq/a.sql",
    "raw": "create table \\"public\\".\\"test2\\" (\\n    \\"id\\" integer not null default nextval('test2_id_seq'::regclass)\\n)",
    "untemplated": "create table \\"public\\".\\"test2\\" (\\n    \\"id\\" integer not null default nextval('test2_id_seq'::regclass)\\n)",
    "nickname": "create_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/seq/a.sql",
    "raw": "CREATE UNIQUE INDEX test2_pkey ON public.test2 USING btree (id)",
    "untemplated": "CREATE UNIQUE INDEX test2_pkey ON public.test2 USING btree (id)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/seq/a.sql",
    "raw": "alter table \\"public\\".\\"test2\\" add constraint \\"test2_pkey\\" PRIMARY KEY using index \\"test2_pkey\\"",
    "untemplated": "alter table \\"public\\".\\"test2\\" add constraint \\"test2_pkey\\" PRIMARY KEY using index \\"test2_pkey\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/seq/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/seq/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/seq/b.sql",
    "raw": "create schema other",
    "untemplated": "create schema other",
    "nickname": "create_schema_other"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/seq/b.sql",
    "raw": "create sequence \\"public\\".\\"test_id_seq\\"",
    "untemplated": "create sequence \\"public\\".\\"test_id_seq\\"",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/seq/b.sql",
    "raw": "create table \\"public\\".\\"test\\" (\\n    \\"id\\" integer not null default nextval('test_id_seq'::regclass)\\n)",
    "untemplated": "create table \\"public\\".\\"test\\" (\\n    \\"id\\" integer not null default nextval('test_id_seq'::regclass)\\n)",
    "nickname": "create_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/seq/b.sql",
    "raw": "CREATE UNIQUE INDEX test_pkey ON public.test USING btree (id)",
    "untemplated": "CREATE UNIQUE INDEX test_pkey ON public.test USING btree (id)",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/seq/b.sql",
    "raw": "alter table \\"public\\".\\"test\\" add constraint \\"test_pkey\\" PRIMARY KEY using index \\"test_pkey\\"",
    "untemplated": "alter table \\"public\\".\\"test\\" add constraint \\"test_pkey\\" PRIMARY KEY using index \\"test_pkey\\"",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/seq/b.sql",
    "raw": "create table test2 (\\n  id serial primary key\\n)",
    "untemplated": "create table test2 (\\n  id serial primary key\\n)",
    "nickname": "create_test2"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/seq/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/seq/expected.sql",
    "raw": "drop table \\"public\\".\\"unwanted\\"",
    "untemplated": "drop table \\"public\\".\\"unwanted\\"",
    "nickname": "drop_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/seq/expected.sql",
    "raw": "alter sequence \\"public\\".\\"test2_id_seq\\" owned by \\"public\\".\\"test2\\".\\"id\\"",
    "untemplated": "alter sequence \\"public\\".\\"test2_id_seq\\" owned by \\"public\\".\\"test2\\".\\"id\\"",
    "nickname": "alter"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/seq/expected.sql",
    "raw": "alter sequence \\"public\\".\\"test_id_seq\\" owned by none",
    "untemplated": "alter sequence \\"public\\".\\"test_id_seq\\" owned by none",
    "nickname": "alter"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/seq/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/seq/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema/a.sql",
    "raw": "create extension hstore",
    "untemplated": "create extension hstore",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema/a.sql",
    "raw": "create schema goodschema",
    "untemplated": "create schema goodschema",
    "nickname": "create_schema_goodschema"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema/a.sql",
    "raw": "create table goodschema.t(id uuid, value text)",
    "untemplated": "create table goodschema.t(id uuid, value text)",
    "nickname": "create_goodschema_t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema/a.sql",
    "raw": "create table t(id uuid, value text)",
    "untemplated": "create table t(id uuid, value text)",
    "nickname": "create_t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema/a.sql",
    "raw": "CREATE TYPE goodschema.sdfasdfasdf AS ENUM ('not shipped', 'shipped', 'delivered')",
    "untemplated": "CREATE TYPE goodschema.sdfasdfasdf AS ENUM ('not shipped', 'shipped', 'delivered')",
    "nickname": "create_type_goodschema_sdfasdfasdf"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema/a.sql",
    "raw": "create index on goodschema.t(id)",
    "untemplated": "create index on goodschema.t(id)",
    "nickname": "create_index"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema/a.sql",
    "raw": "create view goodschema.v as select 1 AS a",
    "untemplated": "create view goodschema.v as select 1 AS a",
    "nickname": "create-select"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema/a.sql",
    "raw": "grant select on table t to postgres",
    "untemplated": "grant select on table t to postgres",
    "nickname": "grant-select-t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema/b.sql",
    "raw": "create extension citext",
    "untemplated": "create extension citext",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema/b.sql",
    "raw": "create schema goodschema",
    "untemplated": "create schema goodschema",
    "nickname": "create_schema_goodschema"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema/b.sql",
    "raw": "CREATE TYPE goodschema.sdfasdfasdf AS ENUM ('not shipped', 'shipped', 'delivered', 'not delivered')",
    "untemplated": "CREATE TYPE goodschema.sdfasdfasdf AS ENUM ('not shipped', 'shipped', 'delivered', 'not delivered')",
    "nickname": "create_type_goodschema_sdfasdfasdf"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema/b.sql",
    "raw": "create table goodschema.t(id uuid, name text, value text)",
    "untemplated": "create table goodschema.t(id uuid, name text, value text)",
    "nickname": "create_goodschema_t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema/b.sql",
    "raw": "create view goodschema.v as select 2 as a",
    "untemplated": "create view goodschema.v as select 2 as a",
    "nickname": "create-select"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema/expected.sql",
    "raw": "drop index if exists \\"goodschema\\".\\"t_id_idx\\"",
    "untemplated": "drop index if exists \\"goodschema\\".\\"t_id_idx\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema/expected.sql",
    "raw": "alter type \\"goodschema\\".\\"sdfasdfasdf\\" rename to \\"sdfasdfasdf__old_version_to_be_dropped\\"",
    "untemplated": "alter type \\"goodschema\\".\\"sdfasdfasdf\\" rename to \\"sdfasdfasdf__old_version_to_be_dropped\\"",
    "nickname": "alter"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema/expected.sql",
    "raw": "create type \\"goodschema\\".\\"sdfasdfasdf\\" as enum ('not shipped', 'shipped', 'delivered', 'not delivered')",
    "untemplated": "create type \\"goodschema\\".\\"sdfasdfasdf\\" as enum ('not shipped', 'shipped', 'delivered', 'not delivered')",
    "nickname": "create_type_sdfasdfasdf"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema/expected.sql",
    "raw": "drop type \\"goodschema\\".\\"sdfasdfasdf__old_version_to_be_dropped\\"",
    "untemplated": "drop type \\"goodschema\\".\\"sdfasdfasdf__old_version_to_be_dropped\\"",
    "nickname": "drop_type_sdfasdfasdf__old_version_to_be_dropped"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema/expected.sql",
    "raw": "alter table \\"goodschema\\".\\"t\\" add column \\"name\\" text",
    "untemplated": "alter table \\"goodschema\\".\\"t\\" add column \\"name\\" text",
    "nickname": "alter_goodschema"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema/expected.sql",
    "raw": "create or replace view \\"goodschema\\".\\"v\\" as  SELECT 2 AS a",
    "untemplated": "create or replace view \\"goodschema\\".\\"v\\" as  SELECT 2 AS a",
    "nickname": "create-select"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema_ext/a.sql",
    "raw": "create extension hstore",
    "untemplated": "create extension hstore",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema_ext/a.sql",
    "raw": "create schema goodschema",
    "untemplated": "create schema goodschema",
    "nickname": "create_schema_goodschema"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema_ext/a.sql",
    "raw": "create table goodschema.t(id uuid, value text)",
    "untemplated": "create table goodschema.t(id uuid, value text)",
    "nickname": "create_goodschema_t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema_ext/a.sql",
    "raw": "create table t(id uuid, value text)",
    "untemplated": "create table t(id uuid, value text)",
    "nickname": "create_t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema_ext/a.sql",
    "raw": "CREATE TYPE goodschema.sdfasdfasdf AS ENUM ('not shipped', 'shipped', 'delivered')",
    "untemplated": "CREATE TYPE goodschema.sdfasdfasdf AS ENUM ('not shipped', 'shipped', 'delivered')",
    "nickname": "create_type_goodschema_sdfasdfasdf"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema_ext/a.sql",
    "raw": "create index on goodschema.t(id)",
    "untemplated": "create index on goodschema.t(id)",
    "nickname": "create_index"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema_ext/a.sql",
    "raw": "create view goodschema.v as select 1",
    "untemplated": "create view goodschema.v as select 1",
    "nickname": "create-select"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema_ext/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema_ext/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema_ext/b.sql",
    "raw": "create extension citext",
    "untemplated": "create extension citext",
    "nickname": "create"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema_ext/b.sql",
    "raw": "create schema goodschema",
    "untemplated": "create schema goodschema",
    "nickname": "create_schema_goodschema"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema_ext/b.sql",
    "raw": "CREATE TYPE goodschema.sdfasdfasdf AS ENUM ('not shipped', 'shipped', 'delivered', 'not delivered')",
    "untemplated": "CREATE TYPE goodschema.sdfasdfasdf AS ENUM ('not shipped', 'shipped', 'delivered', 'not delivered')",
    "nickname": "create_type_goodschema_sdfasdfasdf"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema_ext/b.sql",
    "raw": "create table goodschema.t(id uuid, name text, value text)",
    "untemplated": "create table goodschema.t(id uuid, name text, value text)",
    "nickname": "create_goodschema_t"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema_ext/b.sql",
    "raw": "create view goodschema.v as select 2",
    "untemplated": "create view goodschema.v as select 2",
    "nickname": "create-select"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema_ext/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema_ext/expected.sql",
    "raw": "create extension if not exists \\"citext\\" with schema \\"public\\"",
    "untemplated": "create extension if not exists \\"citext\\" with schema \\"public\\"",
    "nickname": "create-with-schema"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema_ext/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/singleschema_ext/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/a.sql",
    "raw": "CREATE TABLE emp (\\n    empname text,\\n    salary integer,\\n    last_date timestamp,\\n    last_user text\\n)",
    "untemplated": "CREATE TABLE emp (\\n    empname text,\\n    salary integer,\\n    last_date timestamp,\\n    last_user text\\n)",
    "nickname": "create_emp"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/a.sql",
    "raw": "CREATE FUNCTION emp_stamp() RETURNS trigger AS $emp_stamp$\\n    BEGIN\\n        -- Check that empname and salary are given\\n        IF NEW.empname IS NULL THEN\\n            RAISE EXCEPTION 'empname cannot be null'",
    "untemplated": "CREATE FUNCTION emp_stamp() RETURNS trigger AS $emp_stamp$\\n    BEGIN\\n        -- Check that empname and salary are given\\n        IF NEW.empname IS NULL THEN\\n            RAISE EXCEPTION 'empname cannot be null'",
    "nickname": "create-begin"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/a.sql",
    "raw": "END IF",
    "untemplated": "END IF",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/a.sql",
    "raw": "IF NEW.salary IS NULL THEN\\n            RAISE EXCEPTION '% cannot have null salary', NEW.empname",
    "untemplated": "IF NEW.salary IS NULL THEN\\n            RAISE EXCEPTION '% cannot have null salary', NEW.empname",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/a.sql",
    "raw": "END IF",
    "untemplated": "END IF",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/a.sql",
    "raw": "-- Who works for us when they must pay for it?\\n        IF NEW.salary < 0 THEN\\n            RAISE EXCEPTION '% cannot have a negative salary', NEW.empname",
    "untemplated": "-- Who works for us when they must pay for it?\\n        IF NEW.salary < 0 THEN\\n            RAISE EXCEPTION '% cannot have a negative salary', NEW.empname",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/a.sql",
    "raw": "END IF",
    "untemplated": "END IF",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/a.sql",
    "raw": "-- Remember who changed the payroll when\\n        NEW.last_date := current_timestamp",
    "untemplated": "-- Remember who changed the payroll when\\n        NEW.last_date := current_timestamp",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/a.sql",
    "raw": "NEW.last_user := current_user",
    "untemplated": "NEW.last_user := current_user",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/a.sql",
    "raw": "RETURN NEW",
    "untemplated": "RETURN NEW",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/a.sql",
    "raw": "END",
    "untemplated": "END",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/a.sql",
    "raw": "$emp_stamp$ LANGUAGE plpgsql",
    "untemplated": "$emp_stamp$ LANGUAGE plpgsql",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/a.sql",
    "raw": "CREATE TRIGGER emp_stamp BEFORE INSERT OR UPDATE ON emp\\n    FOR EACH ROW EXECUTE PROCEDURE emp_stamp()",
    "untemplated": "CREATE TRIGGER emp_stamp BEFORE INSERT OR UPDATE ON emp\\n    FOR EACH ROW EXECUTE PROCEDURE emp_stamp()",
    "nickname": "create-insert-update"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/a.sql",
    "raw": "CREATE TRIGGER emp_stamp_drop BEFORE INSERT OR UPDATE ON emp\\n        FOR EACH ROW EXECUTE PROCEDURE emp_stamp()",
    "untemplated": "CREATE TRIGGER emp_stamp_drop BEFORE INSERT OR UPDATE ON emp\\n        FOR EACH ROW EXECUTE PROCEDURE emp_stamp()",
    "nickname": "create-insert-update"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/b.sql",
    "raw": "CREATE TABLE emp (\\n    empname text,\\n    salary integer,\\n    last_date timestamp,\\n    last_user text\\n)",
    "untemplated": "CREATE TABLE emp (\\n    empname text,\\n    salary integer,\\n    last_date timestamp,\\n    last_user text\\n)",
    "nickname": "create_emp"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/b.sql",
    "raw": "CREATE FUNCTION emp_stamp() RETURNS trigger AS $emp_stamp$\\n    BEGIN\\n        -- Check that empname and salary are given\\n        IF NEW.empname IS NULL THEN\\n            RAISE EXCEPTION 'empname cannot be null'",
    "untemplated": "CREATE FUNCTION emp_stamp() RETURNS trigger AS $emp_stamp$\\n    BEGIN\\n        -- Check that empname and salary are given\\n        IF NEW.empname IS NULL THEN\\n            RAISE EXCEPTION 'empname cannot be null'",
    "nickname": "create-begin"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/b.sql",
    "raw": "END IF",
    "untemplated": "END IF",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/b.sql",
    "raw": "IF NEW.salary IS NULL THEN\\n            RAISE EXCEPTION '% cannot have null salary', NEW.empname",
    "untemplated": "IF NEW.salary IS NULL THEN\\n            RAISE EXCEPTION '% cannot have null salary', NEW.empname",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/b.sql",
    "raw": "END IF",
    "untemplated": "END IF",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/b.sql",
    "raw": "-- Who works for us when they must pay for it?\\n        IF NEW.salary < 0 THEN\\n            RAISE EXCEPTION '% cannot have a negative salary', NEW.empname",
    "untemplated": "-- Who works for us when they must pay for it?\\n        IF NEW.salary < 0 THEN\\n            RAISE EXCEPTION '% cannot have a negative salary', NEW.empname",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/b.sql",
    "raw": "END IF",
    "untemplated": "END IF",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/b.sql",
    "raw": "-- Remember who changed the payroll when\\n        NEW.last_date := current_timestamp",
    "untemplated": "-- Remember who changed the payroll when\\n        NEW.last_date := current_timestamp",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/b.sql",
    "raw": "NEW.last_user := current_user",
    "untemplated": "NEW.last_user := current_user",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/b.sql",
    "raw": "RETURN NEW",
    "untemplated": "RETURN NEW",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/b.sql",
    "raw": "END",
    "untemplated": "END",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/b.sql",
    "raw": "$emp_stamp$ LANGUAGE plpgsql",
    "untemplated": "$emp_stamp$ LANGUAGE plpgsql",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/b.sql",
    "raw": "CREATE TRIGGER emp_stamp BEFORE UPDATE ON emp\\n    FOR EACH ROW EXECUTE PROCEDURE emp_stamp()",
    "untemplated": "CREATE TRIGGER emp_stamp BEFORE UPDATE ON emp\\n    FOR EACH ROW EXECUTE PROCEDURE emp_stamp()",
    "nickname": "create-update"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/b.sql",
    "raw": "CREATE TRIGGER emp_stamp_create BEFORE INSERT OR UPDATE ON emp\\n            FOR EACH ROW EXECUTE PROCEDURE emp_stamp()",
    "untemplated": "CREATE TRIGGER emp_stamp_create BEFORE INSERT OR UPDATE ON emp\\n            FOR EACH ROW EXECUTE PROCEDURE emp_stamp()",
    "nickname": "create-insert-update"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/expected.sql",
    "raw": "drop trigger if exists \\"emp_stamp_drop\\" on \\"public\\".\\"emp\\"",
    "untemplated": "drop trigger if exists \\"emp_stamp_drop\\" on \\"public\\".\\"emp\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/expected.sql",
    "raw": "drop trigger if exists \\"emp_stamp\\" on \\"public\\".\\"emp\\"",
    "untemplated": "drop trigger if exists \\"emp_stamp\\" on \\"public\\".\\"emp\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/expected.sql",
    "raw": "CREATE TRIGGER emp_stamp_create BEFORE INSERT OR UPDATE ON public.emp FOR EACH ROW EXECUTE FUNCTION emp_stamp()",
    "untemplated": "CREATE TRIGGER emp_stamp_create BEFORE INSERT OR UPDATE ON public.emp FOR EACH ROW EXECUTE FUNCTION emp_stamp()",
    "nickname": "create-insert-update"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/expected.sql",
    "raw": "CREATE TRIGGER emp_stamp BEFORE UPDATE ON public.emp FOR EACH ROW EXECUTE FUNCTION emp_stamp()",
    "untemplated": "CREATE TRIGGER emp_stamp BEFORE UPDATE ON public.emp FOR EACH ROW EXECUTE FUNCTION emp_stamp()",
    "nickname": "create-update"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers2/a.sql",
    "raw": "create table table1 (\\n  id serial primary key\\n)",
    "untemplated": "create table table1 (\\n  id serial primary key\\n)",
    "nickname": "create_table1"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers2/a.sql",
    "raw": "create table table2 (\\n  id serial primary key,\\n  t text\\n)",
    "untemplated": "create table table2 (\\n  id serial primary key,\\n  t text\\n)",
    "nickname": "create_table2"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers2/a.sql",
    "raw": "create function trigger_func() returns trigger language plpgsql volatile as $$\\nbegin\\n  RAISE NOTICE 'Hello'",
    "untemplated": "create function trigger_func() returns trigger language plpgsql volatile as $$\\nbegin\\n  RAISE NOTICE 'Hello'",
    "nickname": "create-begin"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers2/a.sql",
    "raw": "end",
    "untemplated": "end",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers2/a.sql",
    "raw": "$$",
    "untemplated": "$$",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers2/a.sql",
    "raw": "create trigger trigger_name after insert on table1 for each row\\n  execute procedure trigger_func()",
    "untemplated": "create trigger trigger_name after insert on table1 for each row\\n  execute procedure trigger_func()",
    "nickname": "create-insert"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers2/a.sql",
    "raw": "create trigger trigger_name after insert on table2 for each row\\n  execute procedure trigger_func()",
    "untemplated": "create trigger trigger_name after insert on table2 for each row\\n  execute procedure trigger_func()",
    "nickname": "create-insert"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers2/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers2/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers2/b.sql",
    "raw": "create table table1 (\\n  id serial primary key\\n)",
    "untemplated": "create table table1 (\\n  id serial primary key\\n)",
    "nickname": "create_table1"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers2/b.sql",
    "raw": "create table table2 (\\n  id serial primary key\\n)",
    "untemplated": "create table table2 (\\n  id serial primary key\\n)",
    "nickname": "create_table2"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers2/b.sql",
    "raw": "create function trigger_func() returns trigger language plpgsql volatile as $$\\nbegin\\n  RAISE NOTICE 'Hello'",
    "untemplated": "create function trigger_func() returns trigger language plpgsql volatile as $$\\nbegin\\n  RAISE NOTICE 'Hello'",
    "nickname": "create-begin"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers2/b.sql",
    "raw": "end",
    "untemplated": "end",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers2/b.sql",
    "raw": "$$",
    "untemplated": "$$",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers2/b.sql",
    "raw": "-- note switched trigger order\\ncreate trigger trigger_name after insert on table2 for each row\\n  execute procedure trigger_func()",
    "untemplated": "-- note switched trigger order\\ncreate trigger trigger_name after insert on table2 for each row\\n  execute procedure trigger_func()",
    "nickname": "create-insert"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers2/b.sql",
    "raw": "create trigger trigger_name after insert on table1 for each row\\n  execute procedure trigger_func()",
    "untemplated": "create trigger trigger_name after insert on table1 for each row\\n  execute procedure trigger_func()",
    "nickname": "create-insert"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers2/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers2/expected.sql",
    "raw": "alter table \\"public\\".\\"table2\\" drop column \\"t\\"",
    "untemplated": "alter table \\"public\\".\\"table2\\" drop column \\"t\\"",
    "nickname": "alter_public-drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers2/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers2/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/a.sql",
    "raw": "CREATE TABLE \\"my_table\\" (\\n    \\"some_text\\" text,\\n    \\"some_count\\" int\\n)",
    "untemplated": "CREATE TABLE \\"my_table\\" (\\n    \\"some_text\\" text,\\n    \\"some_count\\" int\\n)",
    "nickname": "create_my_table"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/a.sql",
    "raw": "CREATE VIEW \\"view_on_table\\" AS\\nSELECT some_text, some_count FROM my_table",
    "untemplated": "CREATE VIEW \\"view_on_table\\" AS\\nSELECT some_text, some_count FROM my_table",
    "nickname": "create-select-my_table"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/a.sql",
    "raw": "CREATE OR REPLACE FUNCTION my_function()\\n    RETURNS trigger\\n    LANGUAGE plpgsql\\nAS $function$\\n    BEGIN\\n        INSERT INTO my_table (some_text)\\n        VALUES (NEW.some_text)",
    "untemplated": "CREATE OR REPLACE FUNCTION my_function()\\n    RETURNS trigger\\n    LANGUAGE plpgsql\\nAS $function$\\n    BEGIN\\n        INSERT INTO my_table (some_text)\\n        VALUES (NEW.some_text)",
    "nickname": "create-begin-insert-my_table"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/a.sql",
    "raw": "RETURN NEW",
    "untemplated": "RETURN NEW",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/a.sql",
    "raw": "END",
    "untemplated": "END",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/a.sql",
    "raw": "$function$",
    "untemplated": "$function$",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/a.sql",
    "raw": "CREATE TRIGGER trigger_on_view INSTEAD OF\\nINSERT ON view_on_table\\nFOR EACH ROW EXECUTE PROCEDURE my_function()",
    "untemplated": "CREATE TRIGGER trigger_on_view INSTEAD OF\\nINSERT ON view_on_table\\nFOR EACH ROW EXECUTE PROCEDURE my_function()",
    "nickname": "create-insert"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/a.sql",
    "raw": "INSERT INTO view_on_table VALUES ('this is a test')",
    "untemplated": "INSERT INTO view_on_table VALUES ('this is a test')",
    "nickname": "insert-view_on_table"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/a.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/additions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/b.sql",
    "raw": "CREATE TABLE \\"my_table\\" (\\n    \\"some_text\\" text,\\n    \\"some_date\\" timestamp,\\n    \\"some_count\\" int\\n)",
    "untemplated": "CREATE TABLE \\"my_table\\" (\\n    \\"some_text\\" text,\\n    \\"some_date\\" timestamp,\\n    \\"some_count\\" int\\n)",
    "nickname": "create_my_table"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/b.sql",
    "raw": "CREATE VIEW \\"view_on_table\\" AS\\nSELECT some_text, some_date, some_count FROM my_table",
    "untemplated": "CREATE VIEW \\"view_on_table\\" AS\\nSELECT some_text, some_date, some_count FROM my_table",
    "nickname": "create-select-my_table"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/b.sql",
    "raw": "CREATE OR REPLACE FUNCTION my_function()\\n    RETURNS trigger\\n    LANGUAGE plpgsql\\nAS $function$\\n    BEGIN\\n        INSERT INTO my_table (some_text)\\n        VALUES (NEW.some_text)",
    "untemplated": "CREATE OR REPLACE FUNCTION my_function()\\n    RETURNS trigger\\n    LANGUAGE plpgsql\\nAS $function$\\n    BEGIN\\n        INSERT INTO my_table (some_text)\\n        VALUES (NEW.some_text)",
    "nickname": "create-begin-insert-my_table"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/b.sql",
    "raw": "RETURN NEW",
    "untemplated": "RETURN NEW",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/b.sql",
    "raw": "END",
    "untemplated": "END",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/b.sql",
    "raw": "$function$",
    "untemplated": "$function$",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/b.sql",
    "raw": "CREATE TRIGGER trigger_on_view INSTEAD OF\\nINSERT ON view_on_table\\nFOR EACH ROW EXECUTE PROCEDURE my_function()",
    "untemplated": "CREATE TRIGGER trigger_on_view INSTEAD OF\\nINSERT ON view_on_table\\nFOR EACH ROW EXECUTE PROCEDURE my_function()",
    "nickname": "create-insert"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/b.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/expected.sql",
    "raw": "drop trigger if exists \\"trigger_on_view\\" on \\"public\\".\\"view_on_table\\"",
    "untemplated": "drop trigger if exists \\"trigger_on_view\\" on \\"public\\".\\"view_on_table\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/expected.sql",
    "raw": "drop view if exists \\"public\\".\\"view_on_table\\"",
    "untemplated": "drop view if exists \\"public\\".\\"view_on_table\\"",
    "nickname": "drop"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/expected.sql",
    "raw": "alter table \\"public\\".\\"my_table\\" add column \\"some_date\\" timestamp without time zone",
    "untemplated": "alter table \\"public\\".\\"my_table\\" add column \\"some_date\\" timestamp without time zone",
    "nickname": "alter_public"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/expected.sql",
    "raw": "create or replace view \\"public\\".\\"view_on_table\\" as  SELECT my_table.some_text,\\n    my_table.some_date,\\n    my_table.some_count\\n   FROM my_table",
    "untemplated": "create or replace view \\"public\\".\\"view_on_table\\" as  SELECT my_table.some_text,\\n    my_table.some_date,\\n    my_table.some_count\\n   FROM my_table",
    "nickname": "create-select-my_table"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/expected.sql",
    "raw": "CREATE TRIGGER trigger_on_view INSTEAD OF INSERT ON public.view_on_table FOR EACH ROW EXECUTE FUNCTION my_function()",
    "untemplated": "CREATE TRIGGER trigger_on_view INSTEAD OF INSERT ON public.view_on_table FOR EACH ROW EXECUTE FUNCTION my_function()",
    "nickname": "create-insert"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/expected.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migra/test/FIXTURES/triggers3/expected2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migrator/test/generated/basic_test/01.one.sql",
    "raw": "create table migration_test_1(id int)",
    "untemplated": "create table migration_test_1(id int)",
    "nickname": "create_migration_test_1"
  },
  {
    "filepath": "packages/migrator/test/generated/basic_test/02.two.sql",
    "raw": "create table migration_test_2(id int)",
    "untemplated": "create table migration_test_2(id int)",
    "nickname": "create_migration_test_2"
  },
  {
    "filepath": "packages/migrator/test/generated/basic_test/down/01.one.sql",
    "raw": "drop table migration_test_1",
    "untemplated": "drop table migration_test_1",
    "nickname": "drop_migration_test_1"
  },
  {
    "filepath": "packages/migrator/test/generated/basic_test/down/02.two.sql",
    "raw": "drop table migration_test_2",
    "untemplated": "drop table migration_test_2",
    "nickname": "drop_migration_test_2"
  },
  {
    "filepath": "packages/migrator/test/generated/errors_test/defaultTransactions/migrations/m1.sql",
    "raw": "create table errors_table1(id int primary key)",
    "untemplated": "create table errors_table1(id int primary key)",
    "nickname": "create_errors_table1"
  },
  {
    "filepath": "packages/migrator/test/generated/errors_test/defaultTransactions/migrations/m2.sql",
    "raw": "insert into errors_table1(id) values (1)",
    "untemplated": "insert into errors_table1(id) values (1)",
    "nickname": "insert-errors_table1"
  },
  {
    "filepath": "packages/migrator/test/generated/errors_test/defaultTransactions/migrations/m3.sql",
    "raw": "create table errors_table2(id int primary key",
    "untemplated": "create table errors_table2(id int primary key",
    "nickname": "create_errors_table2"
  },
  {
    "filepath": "packages/migrator/test/generated/errors_test/defaultTransactions/migrations/m3.sql",
    "raw": ")",
    "untemplated": ")",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migrator/test/generated/errors_test/helpfulMessages/migrations/m1.sql",
    "raw": "create table errors_test_table(id int primary key",
    "untemplated": "create table errors_test_table(id int primary key",
    "nickname": "create_errors_test_table"
  },
  {
    "filepath": "packages/migrator/test/generated/errors_test/helpfulMessages/migrations/m1.sql",
    "raw": ")",
    "untemplated": ")",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migrator/test/generated/errors_test/singleTransaction/migrations/m1.sql",
    "raw": "create table errors_table1(id int primary key)",
    "untemplated": "create table errors_table1(id int primary key)",
    "nickname": "create_errors_table1"
  },
  {
    "filepath": "packages/migrator/test/generated/errors_test/singleTransaction/migrations/m2.sql",
    "raw": "insert into errors_table1(id) values (1)",
    "untemplated": "insert into errors_table1(id) values (1)",
    "nickname": "insert-errors_table1"
  },
  {
    "filepath": "packages/migrator/test/generated/errors_test/singleTransaction/migrations/m3.sql",
    "raw": "create table errors_table2(id int primary key",
    "untemplated": "create table errors_table2(id int primary key",
    "nickname": "create_errors_table2"
  },
  {
    "filepath": "packages/migrator/test/generated/errors_test/singleTransaction/migrations/m3.sql",
    "raw": ")",
    "untemplated": ")",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migrator/test/generated/repair_test/01.one.sql",
    "raw": "create table migration_test_1(id int)",
    "untemplated": "create table migration_test_1(id int)",
    "nickname": "create_migration_test_1"
  },
  {
    "filepath": "packages/migrator/test/generated/repair_test/down/01.one.sql",
    "raw": "drop table migration_test_1",
    "untemplated": "drop table migration_test_1",
    "nickname": "drop_migration_test_1"
  },
  {
    "filepath": "packages/migrator/test/generated/run/migrations/01.one.sql",
    "raw": "create table migration_test_1(id int)",
    "untemplated": "create table migration_test_1(id int)",
    "nickname": "create_migration_test_1"
  },
  {
    "filepath": "packages/migrator/test/generated/run/migrations/02.two.sql",
    "raw": "create table migration_test_2(id int)",
    "untemplated": "create table migration_test_2(id int)",
    "nickname": "create_migration_test_2"
  },
  {
    "filepath": "packages/migrator/test/generated/run/migrations/down/01.one.sql",
    "raw": "drop table migration_test_1",
    "untemplated": "drop table migration_test_1",
    "nickname": "drop_migration_test_1"
  },
  {
    "filepath": "packages/migrator/test/generated/run/migrations/down/02.two.sql",
    "raw": "drop table migration_test_2",
    "untemplated": "drop table migration_test_2",
    "nickname": "drop_migration_test_2"
  },
  {
    "filepath": "packages/migrator/test/generated/transaction_test/singleTransaction/migrations/m1.sql",
    "raw": "insert into rollback_happens(id) values (1)",
    "untemplated": "insert into rollback_happens(id) values (1)",
    "nickname": "insert-rollback_happens"
  },
  {
    "filepath": "packages/migrator/test/generated/transaction_test/singleTransaction/migrations/m1.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/migrator/test/generated/transaction_test/singleTransaction/migrations/m2.sql",
    "raw": "insert into rollback_happens(id) values (1)",
    "untemplated": "insert into rollback_happens(id) values (1)",
    "nickname": "insert-rollback_happens"
  },
  {
    "filepath": "packages/migrator/test/generated/transaction_test/singleTransaction/migrations/m2.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/collations.sql",
    "raw": "select\\n  collname as name,\\n  n.nspname as schema,\\n  case collprovider\\n    when 'd' then 'database default'\\n    when 'i' then 'icu'\\n    when 'c' then 'libc'\\n  end\\n  as provider,\\n  collencoding as encoding,\\n  collcollate as lc_collate,\\n  collctype as lc_ctype,\\n  collversion as version\\nfrom\\npg_collation c\\nINNER JOIN pg_namespace n\\n    ON n.oid=c.collnamespace\\n    -- SKIP_INTERNAL where nspname not in ('pg_internal', 'pg_catalog', 'information_schema', 'pg_toast')\\n    -- SKIP_INTERNAL and nspname not like 'pg_temp_%' and nspname not like 'pg_toast_temp_%'\\norder by 2, 1",
    "untemplated": "select\\n  collname as name,\\n  n.nspname as schema,\\n  case collprovider\\n    when 'd' then 'database default'\\n    when 'i' then 'icu'\\n    when 'c' then 'libc'\\n  end\\n  as provider,\\n  collencoding as encoding,\\n  collcollate as lc_collate,\\n  collctype as lc_ctype,\\n  collversion as version\\nfrom\\npg_collation c\\nINNER JOIN pg_namespace n\\n    ON n.oid=c.collnamespace\\n    -- SKIP_INTERNAL where nspname not in ('pg_internal', 'pg_catalog', 'information_schema', 'pg_toast')\\n    -- SKIP_INTERNAL and nspname not like 'pg_temp_%' and nspname not like 'pg_toast_temp_%'\\norder by 2, 1",
    "nickname": "select-pg_collation-pg_namespace-inner_join-ordered"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/collations9.sql",
    "raw": "select\\n  collname as name,\\n  n.nspname as schema,\\n  'd' as provider,\\n  collencoding as encoding,\\n  collcollate as lc_collate,\\n  collctype as lc_ctype,\\n  null as version\\nfrom\\npg_collation c\\nINNER JOIN pg_namespace n\\n    ON n.oid=c.collnamespace\\n    -- SKIP_INTERNAL where nspname not in ('pg_internal', 'pg_catalog', 'information_schema', 'pg_toast')\\n    -- SKIP_INTERNAL and nspname not like 'pg_temp_%' and nspname not like 'pg_toast_temp_%'\\norder by 2, 1",
    "untemplated": "select\\n  collname as name,\\n  n.nspname as schema,\\n  'd' as provider,\\n  collencoding as encoding,\\n  collcollate as lc_collate,\\n  collctype as lc_ctype,\\n  null as version\\nfrom\\npg_collation c\\nINNER JOIN pg_namespace n\\n    ON n.oid=c.collnamespace\\n    -- SKIP_INTERNAL where nspname not in ('pg_internal', 'pg_catalog', 'information_schema', 'pg_toast')\\n    -- SKIP_INTERNAL and nspname not like 'pg_temp_%' and nspname not like 'pg_toast_temp_%'\\norder by 2, 1",
    "nickname": "select-pg_collation-pg_namespace-inner_join-ordered"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/constraints.sql",
    "raw": "with information_schema_table_constraints as (\\nselect\\n    nc.nspname::information_schema.sql_identifier AS constraint_schema,\\n    c.conname::information_schema.sql_identifier AS constraint_name,\\n    nr.nspname::information_schema.sql_identifier AS table_schema,\\n    r.relname::information_schema.sql_identifier AS table_name,\\n    CASE c.contype\\n        WHEN 'c'::\\"char\\" THEN 'CHECK'::text\\n        WHEN 'f'::\\"char\\" THEN 'FOREIGN KEY'::text\\n        WHEN 'p'::\\"char\\" THEN 'PRIMARY KEY'::text\\n        WHEN 'u'::\\"char\\" THEN 'UNIQUE'::text\\n        ELSE NULL::text\\n    END::information_schema.character_data AS constraint_type,\\n    CASE\\n        WHEN c.condeferrable THEN 'YES'::text\\n        ELSE 'NO'::text\\n    END::information_schema.yes_or_no AS is_deferrable,\\n    CASE\\n        WHEN c.condeferred THEN 'YES'::text\\n        ELSE 'NO'::text\\n    END::information_schema.yes_or_no AS initially_deferred,\\n    'YES'::character varying::information_schema.yes_or_no AS enforced\\n   FROM pg_namespace nc,\\n    pg_namespace nr,\\n    pg_constraint c,\\n    pg_class r\\n  WHERE nc.oid = c.connamespace AND nr.oid = r.relnamespace AND c.conrelid = r.oid AND (c.contype <> ALL (ARRAY['t'::\\"char\\", 'x'::\\"char\\"])) AND (r.relkind = ANY (ARRAY['r'::\\"char\\", 'p'::\\"char\\"])) AND NOT pg_is_other_temp_schema(nr.oid) AND (pg_has_role(r.relowner, 'USAGE'::text) OR has_table_privilege(r.oid, 'SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text) OR has_any_column_privilege(r.oid, 'SELECT, INSERT, UPDATE, REFERENCES'::text))\\nUNION ALL\\n SELECT\\n    nr.nspname::information_schema.sql_identifier AS constraint_schema,\\n    (((((nr.oid::text || '_'::text) || r.oid::text) || '_'::text) || a.attnum::text) || '_not_null'::text)::information_schema.sql_identifier AS constraint_name,\\n    nr.nspname::information_schema.sql_identifier AS table_schema,\\n    r.relname::information_schema.sql_identifier AS table_name,\\n    'CHECK'::character varying::information_schema.character_data AS constraint_type,\\n    'NO'::character varying::information_schema.yes_or_no AS is_deferrable,\\n    'NO'::character varying::information_schema.yes_or_no AS initially_deferred,\\n    'YES'::character varying::information_schema.yes_or_no AS enforced\\n   FROM pg_namespace nr,\\n    pg_class r,\\n    pg_attribute a\\n  WHERE nr.oid = r.relnamespace AND r.oid = a.attrelid AND a.attnotnull AND a.attnum > 0 AND NOT a.attisdropped AND (r.relkind = ANY (ARRAY['r'::\\"char\\", 'p'::\\"char\\"])) AND NOT pg_is_other_temp_schema(nr.oid) AND (pg_has_role(r.relowner, 'USAGE'::text) OR has_table_privilege(r.oid, 'SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text) OR has_any_column_privilege(r.oid, 'SELECT, INSERT, UPDATE, REFERENCES'::text))\\n),\\nextension_oids as (\\n  select\\n      objid\\n  from\\n      pg_depend d\\n  WHERE\\n      d.refclassid = 'pg_extension'::regclass\\n      and d.classid = 'pg_constraint'::regclass\\n), extension_rels as (\\n  select\\n      objid\\n  from\\n      pg_depend d\\n  WHERE\\n      d.refclassid = 'pg_extension'::regclass\\n      and d.classid = 'pg_class'::regclass\\n), indexes as (\\n    select\\n        schemaname as schema,\\n        tablename as table_name,\\n        indexname as name,\\n        indexdef as definition,\\n        indexdef as create_statement\\n    FROM\\n        pg_indexes\\n        -- SKIP_INTERNAL where schemaname not in ('pg_catalog', 'information_schema', 'pg_toast')\\n\\t\\t-- SKIP_INTERNAL and schemaname not like 'pg_temp_%' and schemaname not like 'pg_toast_temp_%'\\n    order by\\n        schemaname, tablename, indexname\\n)\\nselect\\n    nspname as schema,\\n    conname as name,\\n    relname as table_name,\\n    pg_get_constraintdef(pg_constraint.oid) as definition,\\n    case contype\\n        when 'c' then 'CHECK'\\n        when 'f' then 'FOREIGN KEY'\\n        when 'p' then 'PRIMARY KEY'\\n        when 'u' then 'UNIQUE'\\n        when 'x' then 'EXCLUDE'\\n    end as constraint_type,\\n    i.name as index,\\n    e.objid as extension_oid,\\n    case when contype = 'f' then\\n        (\\n            SELECT nspname\\n            FROM pg_catalog.pg_class AS c\\n            JOIN pg_catalog.pg_namespace AS ns\\n            ON c.relnamespace = ns.oid\\n            WHERE c.oid = confrelid::regclass\\n        )\\n    end as foreign_table_schema,\\n    case when contype = 'f' then\\n        (\\n            select relname\\n            from pg_catalog.pg_class c\\n            where c.oid = confrelid::regclass\\n        )\\n    end as foreign_table_name,\\n    case when contype = 'f' then\\n        (\\n            select\\n                array_agg(ta.attname order by c.rn)\\n            from\\n            pg_attribute ta\\n            join unnest(conkey) with ordinality c(cn, rn)\\n\\n            on\\n                ta.attrelid = conrelid and ta.attnum = c.cn\\n        )\\n    else null end as fk_columns_local,\\n    case when contype = 'f' then\\n        (\\n            select\\n                array_agg(ta.attname order by c.rn)\\n            from\\n            pg_attribute ta\\n            join unnest(confkey) with ordinality c(cn, rn)\\n\\n            on\\n                ta.attrelid = confrelid and ta.attnum = c.cn\\n        )\\n    else null end as fk_columns_foreign,\\n    contype = 'f' as is_fk,\\n    condeferrable as is_deferrable,\\n    condeferred as initially_deferred\\nfrom\\n    pg_constraint\\n    INNER JOIN pg_class\\n        ON conrelid=pg_class.oid\\n    INNER JOIN pg_namespace\\n        ON pg_namespace.oid=pg_class.relnamespace\\n    left outer join indexes i\\n        on nspname = i.schema\\n        and conname = i.name\\n        and relname = i.table_name\\n    left outer join extension_oids e\\n      on pg_class.oid = e.objid\\n    left outer join extension_rels er\\n      on er.objid = conrelid\\n    left outer join extension_rels cr\\n      on cr.objid = confrelid\\n    where contype in ('c', 'f', 'p', 'u', 'x')\\n  -- SKIP_INTERNAL and nspname not in ('pg_internal', 'pg_catalog', 'information_schema', 'pg_toast', 'pg_temp_1', 'pg_toast_temp_1')\\n  -- SKIP_INTERNAL and e.objid is null and er.objid is null and cr.objid is null\\norder by 1, 3, 2",
    "untemplated": "with information_schema_table_constraints as (\\nselect\\n    nc.nspname::information_schema.sql_identifier AS constraint_schema,\\n    c.conname::information_schema.sql_identifier AS constraint_name,\\n    nr.nspname::information_schema.sql_identifier AS table_schema,\\n    r.relname::information_schema.sql_identifier AS table_name,\\n    CASE c.contype\\n        WHEN 'c'::\\"char\\" THEN 'CHECK'::text\\n        WHEN 'f'::\\"char\\" THEN 'FOREIGN KEY'::text\\n        WHEN 'p'::\\"char\\" THEN 'PRIMARY KEY'::text\\n        WHEN 'u'::\\"char\\" THEN 'UNIQUE'::text\\n        ELSE NULL::text\\n    END::information_schema.character_data AS constraint_type,\\n    CASE\\n        WHEN c.condeferrable THEN 'YES'::text\\n        ELSE 'NO'::text\\n    END::information_schema.yes_or_no AS is_deferrable,\\n    CASE\\n        WHEN c.condeferred THEN 'YES'::text\\n        ELSE 'NO'::text\\n    END::information_schema.yes_or_no AS initially_deferred,\\n    'YES'::character varying::information_schema.yes_or_no AS enforced\\n   FROM pg_namespace nc,\\n    pg_namespace nr,\\n    pg_constraint c,\\n    pg_class r\\n  WHERE nc.oid = c.connamespace AND nr.oid = r.relnamespace AND c.conrelid = r.oid AND (c.contype <> ALL (ARRAY['t'::\\"char\\", 'x'::\\"char\\"])) AND (r.relkind = ANY (ARRAY['r'::\\"char\\", 'p'::\\"char\\"])) AND NOT pg_is_other_temp_schema(nr.oid) AND (pg_has_role(r.relowner, 'USAGE'::text) OR has_table_privilege(r.oid, 'SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text) OR has_any_column_privilege(r.oid, 'SELECT, INSERT, UPDATE, REFERENCES'::text))\\nUNION ALL\\n SELECT\\n    nr.nspname::information_schema.sql_identifier AS constraint_schema,\\n    (((((nr.oid::text || '_'::text) || r.oid::text) || '_'::text) || a.attnum::text) || '_not_null'::text)::information_schema.sql_identifier AS constraint_name,\\n    nr.nspname::information_schema.sql_identifier AS table_schema,\\n    r.relname::information_schema.sql_identifier AS table_name,\\n    'CHECK'::character varying::information_schema.character_data AS constraint_type,\\n    'NO'::character varying::information_schema.yes_or_no AS is_deferrable,\\n    'NO'::character varying::information_schema.yes_or_no AS initially_deferred,\\n    'YES'::character varying::information_schema.yes_or_no AS enforced\\n   FROM pg_namespace nr,\\n    pg_class r,\\n    pg_attribute a\\n  WHERE nr.oid = r.relnamespace AND r.oid = a.attrelid AND a.attnotnull AND a.attnum > 0 AND NOT a.attisdropped AND (r.relkind = ANY (ARRAY['r'::\\"char\\", 'p'::\\"char\\"])) AND NOT pg_is_other_temp_schema(nr.oid) AND (pg_has_role(r.relowner, 'USAGE'::text) OR has_table_privilege(r.oid, 'SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text) OR has_any_column_privilege(r.oid, 'SELECT, INSERT, UPDATE, REFERENCES'::text))\\n),\\nextension_oids as (\\n  select\\n      objid\\n  from\\n      pg_depend d\\n  WHERE\\n      d.refclassid = 'pg_extension'::regclass\\n      and d.classid = 'pg_constraint'::regclass\\n), extension_rels as (\\n  select\\n      objid\\n  from\\n      pg_depend d\\n  WHERE\\n      d.refclassid = 'pg_extension'::regclass\\n      and d.classid = 'pg_class'::regclass\\n), indexes as (\\n    select\\n        schemaname as schema,\\n        tablename as table_name,\\n        indexname as name,\\n        indexdef as definition,\\n        indexdef as create_statement\\n    FROM\\n        pg_indexes\\n        -- SKIP_INTERNAL where schemaname not in ('pg_catalog', 'information_schema', 'pg_toast')\\n\\t\\t-- SKIP_INTERNAL and schemaname not like 'pg_temp_%' and schemaname not like 'pg_toast_temp_%'\\n    order by\\n        schemaname, tablename, indexname\\n)\\nselect\\n    nspname as schema,\\n    conname as name,\\n    relname as table_name,\\n    pg_get_constraintdef(pg_constraint.oid) as definition,\\n    case contype\\n        when 'c' then 'CHECK'\\n        when 'f' then 'FOREIGN KEY'\\n        when 'p' then 'PRIMARY KEY'\\n        when 'u' then 'UNIQUE'\\n        when 'x' then 'EXCLUDE'\\n    end as constraint_type,\\n    i.name as index,\\n    e.objid as extension_oid,\\n    case when contype = 'f' then\\n        (\\n            SELECT nspname\\n            FROM pg_catalog.pg_class AS c\\n            JOIN pg_catalog.pg_namespace AS ns\\n            ON c.relnamespace = ns.oid\\n            WHERE c.oid = confrelid::regclass\\n        )\\n    end as foreign_table_schema,\\n    case when contype = 'f' then\\n        (\\n            select relname\\n            from pg_catalog.pg_class c\\n            where c.oid = confrelid::regclass\\n        )\\n    end as foreign_table_name,\\n    case when contype = 'f' then\\n        (\\n            select\\n                array_agg(ta.attname order by c.rn)\\n            from\\n            pg_attribute ta\\n            join unnest(conkey) with ordinality c(cn, rn)\\n\\n            on\\n                ta.attrelid = conrelid and ta.attnum = c.cn\\n        )\\n    else null end as fk_columns_local,\\n    case when contype = 'f' then\\n        (\\n            select\\n                array_agg(ta.attname order by c.rn)\\n            from\\n            pg_attribute ta\\n            join unnest(confkey) with ordinality c(cn, rn)\\n\\n            on\\n                ta.attrelid = confrelid and ta.attnum = c.cn\\n        )\\n    else null end as fk_columns_foreign,\\n    contype = 'f' as is_fk,\\n    condeferrable as is_deferrable,\\n    condeferred as initially_deferred\\nfrom\\n    pg_constraint\\n    INNER JOIN pg_class\\n        ON conrelid=pg_class.oid\\n    INNER JOIN pg_namespace\\n        ON pg_namespace.oid=pg_class.relnamespace\\n    left outer join indexes i\\n        on nspname = i.schema\\n        and conname = i.name\\n        and relname = i.table_name\\n    left outer join extension_oids e\\n      on pg_class.oid = e.objid\\n    left outer join extension_rels er\\n      on er.objid = conrelid\\n    left outer join extension_rels cr\\n      on cr.objid = confrelid\\n    where contype in ('c', 'f', 'p', 'u', 'x')\\n  -- SKIP_INTERNAL and nspname not in ('pg_internal', 'pg_catalog', 'information_schema', 'pg_toast', 'pg_temp_1', 'pg_toast_temp_1')\\n  -- SKIP_INTERNAL and e.objid is null and er.objid is null and cr.objid is null\\norder by 1, 3, 2",
    "nickname": "with-information_schema_table_constraints-select"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/constraints.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/deps.sql",
    "raw": "with things1 as (\\n  select\\n    oid as objid,\\n    pronamespace as namespace,\\n    proname as name,\\n    pg_get_function_identity_arguments(oid) as identity_arguments,\\n    'f' as kind\\n  from pg_proc\\n  -- 11_AND_LATER where pg_proc.prokind != 'a'\\n  -- 10_AND_EARLIER where pg_proc.proisagg is False\\n  union\\n  select\\n    oid,\\n    relnamespace as namespace,\\n    relname as name,\\n    null as identity_arguments,\\n    relkind as kind\\n  from pg_class\\n  where oid not in (\\n    select ftrelid from pg_foreign_table\\n  )\\n),\\nextension_objids as (\\n  select\\n      objid as extension_objid\\n  from\\n      pg_depend d\\n  WHERE\\n      d.refclassid = 'pg_extension'::regclass\\n    union\\n    select\\n        t.typrelid as extension_objid\\n    from\\n        pg_depend d\\n        join pg_type t on t.oid = d.objid\\n    where\\n        d.refclassid = 'pg_extension'::regclass\\n),\\nthings as (\\n    select\\n      objid,\\n      kind,\\n      n.nspname as schema,\\n      name,\\n      identity_arguments\\n    from things1 t\\n    inner join pg_namespace n\\n      on t.namespace = n.oid\\n    left outer join extension_objids\\n      on t.objid = extension_objids.extension_objid\\n    where\\n      kind in ('r', 'v', 'm', 'c', 'f') and\\n      nspname not in ('pg_internal', 'pg_catalog', 'information_schema', 'pg_toast')\\n      and nspname not like 'pg_temp_%' and nspname not like 'pg_toast_temp_%'\\n      and extension_objids.extension_objid is null\\n),\\ncombined as (\\n  select distinct\\n    t.objid,\\n    t.schema,\\n    t.name,\\n    t.identity_arguments,\\n    t.kind,\\n    things_dependent_on.objid as objid_dependent_on,\\n    things_dependent_on.schema as schema_dependent_on,\\n    things_dependent_on.name as name_dependent_on,\\n    things_dependent_on.identity_arguments as identity_arguments_dependent_on,\\n    things_dependent_on.kind as kind_dependent_on\\n  FROM\\n      pg_depend d\\n      inner join things things_dependent_on\\n        on d.refobjid = things_dependent_on.objid\\n      inner join pg_rewrite rw\\n        on d.objid = rw.oid\\n        and things_dependent_on.objid != rw.ev_class\\n      inner join things t\\n        on rw.ev_class = t.objid\\n  where\\n    d.deptype in ('n')\\n    and\\n    rw.rulename = '_RETURN'\\n)\\nselect * from combined\\norder by\\nschema, name, identity_arguments, kind_dependent_on,\\nschema_dependent_on, name_dependent_on, identity_arguments_dependent_on",
    "untemplated": "with things1 as (\\n  select\\n    oid as objid,\\n    pronamespace as namespace,\\n    proname as name,\\n    pg_get_function_identity_arguments(oid) as identity_arguments,\\n    'f' as kind\\n  from pg_proc\\n  -- 11_AND_LATER where pg_proc.prokind != 'a'\\n  -- 10_AND_EARLIER where pg_proc.proisagg is False\\n  union\\n  select\\n    oid,\\n    relnamespace as namespace,\\n    relname as name,\\n    null as identity_arguments,\\n    relkind as kind\\n  from pg_class\\n  where oid not in (\\n    select ftrelid from pg_foreign_table\\n  )\\n),\\nextension_objids as (\\n  select\\n      objid as extension_objid\\n  from\\n      pg_depend d\\n  WHERE\\n      d.refclassid = 'pg_extension'::regclass\\n    union\\n    select\\n        t.typrelid as extension_objid\\n    from\\n        pg_depend d\\n        join pg_type t on t.oid = d.objid\\n    where\\n        d.refclassid = 'pg_extension'::regclass\\n),\\nthings as (\\n    select\\n      objid,\\n      kind,\\n      n.nspname as schema,\\n      name,\\n      identity_arguments\\n    from things1 t\\n    inner join pg_namespace n\\n      on t.namespace = n.oid\\n    left outer join extension_objids\\n      on t.objid = extension_objids.extension_objid\\n    where\\n      kind in ('r', 'v', 'm', 'c', 'f') and\\n      nspname not in ('pg_internal', 'pg_catalog', 'information_schema', 'pg_toast')\\n      and nspname not like 'pg_temp_%' and nspname not like 'pg_toast_temp_%'\\n      and extension_objids.extension_objid is null\\n),\\ncombined as (\\n  select distinct\\n    t.objid,\\n    t.schema,\\n    t.name,\\n    t.identity_arguments,\\n    t.kind,\\n    things_dependent_on.objid as objid_dependent_on,\\n    things_dependent_on.schema as schema_dependent_on,\\n    things_dependent_on.name as name_dependent_on,\\n    things_dependent_on.identity_arguments as identity_arguments_dependent_on,\\n    things_dependent_on.kind as kind_dependent_on\\n  FROM\\n      pg_depend d\\n      inner join things things_dependent_on\\n        on d.refobjid = things_dependent_on.objid\\n      inner join pg_rewrite rw\\n        on d.objid = rw.oid\\n        and things_dependent_on.objid != rw.ev_class\\n      inner join things t\\n        on rw.ev_class = t.objid\\n  where\\n    d.deptype in ('n')\\n    and\\n    rw.rulename = '_RETURN'\\n)\\nselect * from combined\\norder by\\nschema, name, identity_arguments, kind_dependent_on,\\nschema_dependent_on, name_dependent_on, identity_arguments_dependent_on",
    "nickname": "with-things1-select-pg_get_function_identity_arguments"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/domains.sql",
    "raw": "with extension_oids as (\\n  select\\n      objid\\n  from\\n      pg_depend d\\n  WHERE\\n      d.refclassid = 'pg_extension'::regclass and\\n      d.classid = 'pg_type'::regclass\\n)\\nSELECT n.nspname as \\"schema\\",\\n       t.typname as \\"name\\",\\n       pg_catalog.format_type(t.typbasetype, t.typtypmod) as \\"data_type\\",\\n       (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type bt\\n        WHERE c.oid = t.typcollation AND bt.oid = t.typbasetype AND t.typcollation <> bt.typcollation) as \\"collation\\",\\n        rr.conname as \\"constraint_name\\",\\n       t.typnotnull as \\"not_null\\",\\n       t.typdefault as \\"default\\",\\n       pg_catalog.array_to_string(ARRAY(\\n         SELECT pg_catalog.pg_get_constraintdef(r.oid, true) FROM pg_catalog.pg_constraint r WHERE t.oid = r.contypid\\n       ), ' ') as \\"check\\"\\nFROM pg_catalog.pg_type t\\n     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace\\n     left join pg_catalog.pg_constraint rr on t.oid = rr.contypid\\nWHERE t.typtype = 'd'\\n      AND n.nspname <> 'pg_catalog'\\n      AND n.nspname <> 'information_schema'\\n  AND pg_catalog.pg_type_is_visible(t.oid)\\n  and t.oid not in (select * from extension_oids)\\nORDER BY 1, 2",
    "untemplated": "with extension_oids as (\\n  select\\n      objid\\n  from\\n      pg_depend d\\n  WHERE\\n      d.refclassid = 'pg_extension'::regclass and\\n      d.classid = 'pg_type'::regclass\\n)\\nSELECT n.nspname as \\"schema\\",\\n       t.typname as \\"name\\",\\n       pg_catalog.format_type(t.typbasetype, t.typtypmod) as \\"data_type\\",\\n       (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type bt\\n        WHERE c.oid = t.typcollation AND bt.oid = t.typbasetype AND t.typcollation <> bt.typcollation) as \\"collation\\",\\n        rr.conname as \\"constraint_name\\",\\n       t.typnotnull as \\"not_null\\",\\n       t.typdefault as \\"default\\",\\n       pg_catalog.array_to_string(ARRAY(\\n         SELECT pg_catalog.pg_get_constraintdef(r.oid, true) FROM pg_catalog.pg_constraint r WHERE t.oid = r.contypid\\n       ), ' ') as \\"check\\"\\nFROM pg_catalog.pg_type t\\n     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace\\n     left join pg_catalog.pg_constraint rr on t.oid = rr.contypid\\nWHERE t.typtype = 'd'\\n      AND n.nspname <> 'pg_catalog'\\n      AND n.nspname <> 'information_schema'\\n  AND pg_catalog.pg_type_is_visible(t.oid)\\n  and t.oid not in (select * from extension_oids)\\nORDER BY 1, 2",
    "nickname": "with-extension_oids-select-pg_depend-by_id-format_type"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/domains.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/enums.sql",
    "raw": "with extension_oids as (\\n  select\\n      objid\\n  from\\n      pg_depend d\\n  WHERE\\n      d.refclassid = 'pg_extension'::regclass and\\n      d.classid = 'pg_type'::regclass\\n)\\nSELECT\\n  n.nspname as \\"schema\\",\\n  t.typname as \\"name\\",\\n  ARRAY(\\n     SELECT e.enumlabel\\n      FROM pg_catalog.pg_enum e\\n      WHERE e.enumtypid = t.oid\\n      ORDER BY e.enumsortorder\\n  ) as elements\\nFROM pg_catalog.pg_type t\\n     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace\\n     left outer join extension_oids e\\n       on t.oid = e.objid\\nWHERE\\n  t.typcategory = 'E'\\n  and e.objid is null\\n  -- SKIP_INTERNAL and n.nspname not in ('pg_internal', 'pg_catalog', 'information_schema', 'pg_toast')\\n  -- SKIP_INTERNAL and n.nspname not like 'pg_temp_%' and n.nspname not like 'pg_toast_temp_%'\\nORDER BY 1, 2",
    "untemplated": "with extension_oids as (\\n  select\\n      objid\\n  from\\n      pg_depend d\\n  WHERE\\n      d.refclassid = 'pg_extension'::regclass and\\n      d.classid = 'pg_type'::regclass\\n)\\nSELECT\\n  n.nspname as \\"schema\\",\\n  t.typname as \\"name\\",\\n  ARRAY(\\n     SELECT e.enumlabel\\n      FROM pg_catalog.pg_enum e\\n      WHERE e.enumtypid = t.oid\\n      ORDER BY e.enumsortorder\\n  ) as elements\\nFROM pg_catalog.pg_type t\\n     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace\\n     left outer join extension_oids e\\n       on t.oid = e.objid\\nWHERE\\n  t.typcategory = 'E'\\n  and e.objid is null\\n  -- SKIP_INTERNAL and n.nspname not in ('pg_internal', 'pg_catalog', 'information_schema', 'pg_toast')\\n  -- SKIP_INTERNAL and n.nspname not like 'pg_temp_%' and n.nspname not like 'pg_toast_temp_%'\\nORDER BY 1, 2",
    "nickname": "with-extension_oids-select-pg_depend-by_id-array"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/enums.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/extensions.sql",
    "raw": "select\\n  nspname as schema,\\n  extname as name,\\n  extversion as version,\\n  e.oid as oid\\nfrom\\n    pg_extension e\\n    INNER JOIN pg_namespace\\n        ON pg_namespace.oid=e.extnamespace\\norder by schema, name",
    "untemplated": "select\\n  nspname as schema,\\n  extname as name,\\n  extversion as version,\\n  e.oid as oid\\nfrom\\n    pg_extension e\\n    INNER JOIN pg_namespace\\n        ON pg_namespace.oid=e.extnamespace\\norder by schema, name",
    "nickname": "select-pg_extension-pg_namespace-inner_join-ordered"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/extensions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/functions.sql",
    "raw": "with extension_oids as (\\n      select\\n          objid\\n      from\\n          pg_depend d\\n      WHERE\\n          d.refclassid = 'pg_extension'::regclass\\n          and d.classid = 'pg_proc'::regclass\\n    ),\\n    pg_proc_pre as (\\n      select\\n        pp.*,\\n        -- 11_AND_LATER pp.oid as p_oid\\n        -- 10_AND_EARLIER pp.oid as p_oid, case when pp.proisagg then 'a' else 'f' end as prokind\\n      from pg_proc pp\\n    ),\\nroutines as (\\n SELECT current_database()::information_schema.sql_identifier AS specific_catalog,\\n    n.nspname::information_schema.sql_identifier AS specific_schema,\\n    --nameconcatoid(p.proname, p.oid)::information_schema.sql_identifier AS specific_name,\\n    current_database()::information_schema.sql_identifier AS routine_catalog,\\n    n.nspname::information_schema.sql_identifier AS schema,\\n    p.proname::information_schema.sql_identifier AS name,\\n        CASE p.prokind\\n            WHEN 'f'::\\"char\\" THEN 'FUNCTION'::text\\n            WHEN 'p'::\\"char\\" THEN 'PROCEDURE'::text\\n            ELSE NULL::text\\n        END::information_schema.character_data AS routine_type,\\n        CASE\\n            WHEN p.prokind = 'p'::\\"char\\" THEN NULL::text\\n            WHEN t.typelem <> 0::oid AND t.typlen = '-1'::integer THEN 'ARRAY'::text\\n            WHEN nt.nspname = 'pg_catalog'::name THEN format_type(t.oid, NULL::integer)\\n            ELSE 'USER-DEFINED'::text\\n        END::information_schema.character_data AS data_type,\\n\\n        CASE\\n            WHEN nt.nspname IS NOT NULL THEN current_database()\\n            ELSE NULL::name\\n        END::information_schema.sql_identifier AS type_udt_catalog,\\n    nt.nspname::information_schema.sql_identifier AS type_udt_schema,\\n    t.typname::information_schema.sql_identifier AS type_udt_name,\\n        CASE\\n            WHEN p.prokind <> 'p'::\\"char\\" THEN 0\\n            ELSE NULL::integer\\n        END::information_schema.sql_identifier AS dtd_identifier,\\n        CASE\\n            WHEN l.lanname = 'sql'::name THEN 'SQL'::text\\n            ELSE 'EXTERNAL'::text\\n        END::information_schema.character_data AS routine_body,\\n        CASE\\n            WHEN pg_has_role(p.proowner, 'USAGE'::text) THEN p.prosrc\\n            ELSE NULL::text\\n        END::information_schema.character_data AS definition,\\n        CASE\\n            WHEN l.lanname = 'c'::name THEN p.prosrc\\n            ELSE NULL::text\\n        END::information_schema.character_data AS external_name,\\n    upper(l.lanname::text)::information_schema.character_data AS external_language,\\n    'GENERAL'::character varying::information_schema.character_data AS parameter_style,\\n        CASE\\n            WHEN p.provolatile = 'i'::\\"char\\" THEN 'YES'::text\\n            ELSE 'NO'::text\\n        END::information_schema.yes_or_no AS is_deterministic,\\n    'MODIFIES'::character varying::information_schema.character_data AS sql_data_access,\\n        CASE\\n            WHEN p.prokind <> 'p'::\\"char\\" THEN\\n            CASE\\n                WHEN p.proisstrict THEN 'YES'::text\\n                ELSE 'NO'::text\\n            END\\n            ELSE NULL::text\\n        END::information_schema.yes_or_no AS is_null_call,\\n    'YES'::character varying::information_schema.yes_or_no AS schema_level_routine,\\n    0::information_schema.cardinal_number AS max_dynamic_result_sets,\\n        CASE\\n            WHEN p.prosecdef THEN 'DEFINER'::text\\n            ELSE 'INVOKER'::text\\n        END::information_schema.character_data AS security_type,\\n    'NO'::character varying::information_schema.yes_or_no AS as_locator,\\n    'NO'::character varying::information_schema.yes_or_no AS is_udt_dependent,\\n    p.p_oid as oid,\\n    p.proisstrict,\\n    p.prosecdef,\\n    p.provolatile,\\n    p.proargtypes,\\n    p.proallargtypes,\\n    p.proargnames,\\n    p.proargdefaults,\\n    p.proargmodes,\\n    p.proowner,\\n    p.prokind as kind\\n   FROM pg_namespace n\\n     JOIN pg_proc_pre p ON n.oid = p.pronamespace\\n     JOIN pg_language l ON p.prolang = l.oid\\n     LEFT JOIN (pg_type t\\n     JOIN pg_namespace nt ON t.typnamespace = nt.oid) ON p.prorettype = t.oid AND p.prokind <> 'p'::\\"char\\"\\n  WHERE pg_has_role(p.proowner, 'USAGE'::text) OR has_function_privilege(p.p_oid, 'EXECUTE'::text)\\n\\n),\\n    pgproc as (\\n      select\\n        schema,\\n        name,\\n        p.oid as oid,\\n        e.objid as extension_oid,\\n        case proisstrict when true then\\n          'RETURNS NULL ON NULL INPUT'\\n        else\\n          'CALLED ON NULL INPUT'\\n        end as strictness,\\n        case prosecdef when true then\\n          'SECURITY DEFINER'\\n        else\\n          'SECURITY INVOKER'\\n        end as security_type,\\n        case provolatile\\n          when 'i' then\\n            'IMMUTABLE'\\n          when 's' then\\n            'STABLE'\\n          when 'v' then\\n            'VOLATILE'\\n          else\\n            null\\n        end as volatility,\\n        p.proargtypes,\\n        p.proallargtypes,\\n        p.proargnames,\\n        p.proargdefaults,\\n        p.proargmodes,\\n        p.proowner,\\n        COALESCE(p.proallargtypes, p.proargtypes::oid[]) as procombinedargtypes,\\n        p.kind,\\n        p.type_udt_schema,\\n        p.type_udt_name,\\n        p.definition,\\n        p.external_language\\n\\n      from\\n          routines p\\n          left outer join extension_oids e\\n            on p.oid = e.objid\\n      where true\\n      -- 11_AND_LATER and p.kind != 'a'\\n      -- SKIP_INTERNAL and schema not in ('pg_internal', 'pg_catalog', 'information_schema', 'pg_toast')\\n      -- SKIP_INTERNAL and schema not like 'pg_temp_%' and schema not like 'pg_toast_temp_%'\\n      -- SKIP_INTERNAL and e.objid is null\\n      -- SKIP_INTERNAL and p.external_language not in ('C', 'INTERNAL')\\n    ),\\nunnested as (\\n    select\\n        p.*,\\n        pname as parameter_name,\\n        pnum as position_number,\\n        CASE\\n            WHEN pargmode IS NULL THEN null\\n            WHEN pargmode = 'i'::\\"char\\" THEN 'IN'::text\\n            WHEN pargmode = 'o'::\\"char\\" THEN 'OUT'::text\\n            WHEN pargmode = 'b'::\\"char\\" THEN 'INOUT'::text\\n            WHEN pargmode = 'v'::\\"char\\" THEN 'IN'::text\\n            WHEN pargmode = 't'::\\"char\\" THEN 'OUT'::text\\n            ELSE NULL::text\\n            END::information_schema.character_data AS parameter_mode,\\n      CASE\\n        WHEN t.typelem <> 0::oid AND t.typlen = '-1'::integer THEN 'ARRAY'::text\\n        else format_type(t.oid, NULL::integer)\\n\\n    END::information_schema.character_data AS data_type,\\n    CASE\\n            WHEN pg_has_role(p.proowner, 'USAGE'::text) THEN pg_get_function_arg_default(p.oid, pnum::int)\\n            ELSE NULL::text\\n        END::varchar AS parameter_default\\n    from pgproc p\\n    left join lateral\\n    unnest(\\n        p.proargnames,\\n        p.proallargtypes,\\n        p.procombinedargtypes,\\n        p.proargmodes)\\n    WITH ORDINALITY AS uu(pname, pdatatype, pargtype, pargmode, pnum) ON TRUE\\n    left join pg_type t\\n        on t.oid = uu.pargtype\\n),\\n    pre as (\\n        SELECT\\n            p.schema as schema,\\n            p.name as name,\\n            case when p.data_type = 'USER-DEFINED' then\\n              '\\"' || p.type_udt_schema || '\\".\\"' || p.type_udt_name || '\\"'\\n            else\\n              p.data_type\\n            end as returntype,\\n            p.data_type = 'USER-DEFINED' as has_user_defined_returntype,\\n            p.parameter_name as parameter_name,\\n            p.data_type as data_type,\\n            p.parameter_mode as parameter_mode,\\n            p.parameter_default as parameter_default,\\n            p.position_number as position_number,\\n            p.definition as definition,\\n            pg_get_functiondef(p.oid) as full_definition,\\n            p.external_language as language,\\n            p.strictness as strictness,\\n            p.security_type as security_type,\\n            p.volatility as volatility,\\n            p.kind as kind,\\n            p.oid as oid,\\n            p.extension_oid as extension_oid,\\n            pg_get_function_result(p.oid) as result_string,\\n            pg_get_function_identity_arguments(p.oid) as identity_arguments,\\n            pg_catalog.obj_description(p.oid) as comment\\n        FROM\\n          unnested p\\n    )\\nselect\\n*\\nfrom pre\\norder by\\n    schema, name, parameter_mode, position_number, parameter_name",
    "untemplated": "with extension_oids as (\\n      select\\n          objid\\n      from\\n          pg_depend d\\n      WHERE\\n          d.refclassid = 'pg_extension'::regclass\\n          and d.classid = 'pg_proc'::regclass\\n    ),\\n    pg_proc_pre as (\\n      select\\n        pp.*,\\n        -- 11_AND_LATER pp.oid as p_oid\\n        -- 10_AND_EARLIER pp.oid as p_oid, case when pp.proisagg then 'a' else 'f' end as prokind\\n      from pg_proc pp\\n    ),\\nroutines as (\\n SELECT current_database()::information_schema.sql_identifier AS specific_catalog,\\n    n.nspname::information_schema.sql_identifier AS specific_schema,\\n    --nameconcatoid(p.proname, p.oid)::information_schema.sql_identifier AS specific_name,\\n    current_database()::information_schema.sql_identifier AS routine_catalog,\\n    n.nspname::information_schema.sql_identifier AS schema,\\n    p.proname::information_schema.sql_identifier AS name,\\n        CASE p.prokind\\n            WHEN 'f'::\\"char\\" THEN 'FUNCTION'::text\\n            WHEN 'p'::\\"char\\" THEN 'PROCEDURE'::text\\n            ELSE NULL::text\\n        END::information_schema.character_data AS routine_type,\\n        CASE\\n            WHEN p.prokind = 'p'::\\"char\\" THEN NULL::text\\n            WHEN t.typelem <> 0::oid AND t.typlen = '-1'::integer THEN 'ARRAY'::text\\n            WHEN nt.nspname = 'pg_catalog'::name THEN format_type(t.oid, NULL::integer)\\n            ELSE 'USER-DEFINED'::text\\n        END::information_schema.character_data AS data_type,\\n\\n        CASE\\n            WHEN nt.nspname IS NOT NULL THEN current_database()\\n            ELSE NULL::name\\n        END::information_schema.sql_identifier AS type_udt_catalog,\\n    nt.nspname::information_schema.sql_identifier AS type_udt_schema,\\n    t.typname::information_schema.sql_identifier AS type_udt_name,\\n        CASE\\n            WHEN p.prokind <> 'p'::\\"char\\" THEN 0\\n            ELSE NULL::integer\\n        END::information_schema.sql_identifier AS dtd_identifier,\\n        CASE\\n            WHEN l.lanname = 'sql'::name THEN 'SQL'::text\\n            ELSE 'EXTERNAL'::text\\n        END::information_schema.character_data AS routine_body,\\n        CASE\\n            WHEN pg_has_role(p.proowner, 'USAGE'::text) THEN p.prosrc\\n            ELSE NULL::text\\n        END::information_schema.character_data AS definition,\\n        CASE\\n            WHEN l.lanname = 'c'::name THEN p.prosrc\\n            ELSE NULL::text\\n        END::information_schema.character_data AS external_name,\\n    upper(l.lanname::text)::information_schema.character_data AS external_language,\\n    'GENERAL'::character varying::information_schema.character_data AS parameter_style,\\n        CASE\\n            WHEN p.provolatile = 'i'::\\"char\\" THEN 'YES'::text\\n            ELSE 'NO'::text\\n        END::information_schema.yes_or_no AS is_deterministic,\\n    'MODIFIES'::character varying::information_schema.character_data AS sql_data_access,\\n        CASE\\n            WHEN p.prokind <> 'p'::\\"char\\" THEN\\n            CASE\\n                WHEN p.proisstrict THEN 'YES'::text\\n                ELSE 'NO'::text\\n            END\\n            ELSE NULL::text\\n        END::information_schema.yes_or_no AS is_null_call,\\n    'YES'::character varying::information_schema.yes_or_no AS schema_level_routine,\\n    0::information_schema.cardinal_number AS max_dynamic_result_sets,\\n        CASE\\n            WHEN p.prosecdef THEN 'DEFINER'::text\\n            ELSE 'INVOKER'::text\\n        END::information_schema.character_data AS security_type,\\n    'NO'::character varying::information_schema.yes_or_no AS as_locator,\\n    'NO'::character varying::information_schema.yes_or_no AS is_udt_dependent,\\n    p.p_oid as oid,\\n    p.proisstrict,\\n    p.prosecdef,\\n    p.provolatile,\\n    p.proargtypes,\\n    p.proallargtypes,\\n    p.proargnames,\\n    p.proargdefaults,\\n    p.proargmodes,\\n    p.proowner,\\n    p.prokind as kind\\n   FROM pg_namespace n\\n     JOIN pg_proc_pre p ON n.oid = p.pronamespace\\n     JOIN pg_language l ON p.prolang = l.oid\\n     LEFT JOIN (pg_type t\\n     JOIN pg_namespace nt ON t.typnamespace = nt.oid) ON p.prorettype = t.oid AND p.prokind <> 'p'::\\"char\\"\\n  WHERE pg_has_role(p.proowner, 'USAGE'::text) OR has_function_privilege(p.p_oid, 'EXECUTE'::text)\\n\\n),\\n    pgproc as (\\n      select\\n        schema,\\n        name,\\n        p.oid as oid,\\n        e.objid as extension_oid,\\n        case proisstrict when true then\\n          'RETURNS NULL ON NULL INPUT'\\n        else\\n          'CALLED ON NULL INPUT'\\n        end as strictness,\\n        case prosecdef when true then\\n          'SECURITY DEFINER'\\n        else\\n          'SECURITY INVOKER'\\n        end as security_type,\\n        case provolatile\\n          when 'i' then\\n            'IMMUTABLE'\\n          when 's' then\\n            'STABLE'\\n          when 'v' then\\n            'VOLATILE'\\n          else\\n            null\\n        end as volatility,\\n        p.proargtypes,\\n        p.proallargtypes,\\n        p.proargnames,\\n        p.proargdefaults,\\n        p.proargmodes,\\n        p.proowner,\\n        COALESCE(p.proallargtypes, p.proargtypes::oid[]) as procombinedargtypes,\\n        p.kind,\\n        p.type_udt_schema,\\n        p.type_udt_name,\\n        p.definition,\\n        p.external_language\\n\\n      from\\n          routines p\\n          left outer join extension_oids e\\n            on p.oid = e.objid\\n      where true\\n      -- 11_AND_LATER and p.kind != 'a'\\n      -- SKIP_INTERNAL and schema not in ('pg_internal', 'pg_catalog', 'information_schema', 'pg_toast')\\n      -- SKIP_INTERNAL and schema not like 'pg_temp_%' and schema not like 'pg_toast_temp_%'\\n      -- SKIP_INTERNAL and e.objid is null\\n      -- SKIP_INTERNAL and p.external_language not in ('C', 'INTERNAL')\\n    ),\\nunnested as (\\n    select\\n        p.*,\\n        pname as parameter_name,\\n        pnum as position_number,\\n        CASE\\n            WHEN pargmode IS NULL THEN null\\n            WHEN pargmode = 'i'::\\"char\\" THEN 'IN'::text\\n            WHEN pargmode = 'o'::\\"char\\" THEN 'OUT'::text\\n            WHEN pargmode = 'b'::\\"char\\" THEN 'INOUT'::text\\n            WHEN pargmode = 'v'::\\"char\\" THEN 'IN'::text\\n            WHEN pargmode = 't'::\\"char\\" THEN 'OUT'::text\\n            ELSE NULL::text\\n            END::information_schema.character_data AS parameter_mode,\\n      CASE\\n        WHEN t.typelem <> 0::oid AND t.typlen = '-1'::integer THEN 'ARRAY'::text\\n        else format_type(t.oid, NULL::integer)\\n\\n    END::information_schema.character_data AS data_type,\\n    CASE\\n            WHEN pg_has_role(p.proowner, 'USAGE'::text) THEN pg_get_function_arg_default(p.oid, pnum::int)\\n            ELSE NULL::text\\n        END::varchar AS parameter_default\\n    from pgproc p\\n    left join lateral\\n    unnest(\\n        p.proargnames,\\n        p.proallargtypes,\\n        p.procombinedargtypes,\\n        p.proargmodes)\\n    WITH ORDINALITY AS uu(pname, pdatatype, pargtype, pargmode, pnum) ON TRUE\\n    left join pg_type t\\n        on t.oid = uu.pargtype\\n),\\n    pre as (\\n        SELECT\\n            p.schema as schema,\\n            p.name as name,\\n            case when p.data_type = 'USER-DEFINED' then\\n              '\\"' || p.type_udt_schema || '\\".\\"' || p.type_udt_name || '\\"'\\n            else\\n              p.data_type\\n            end as returntype,\\n            p.data_type = 'USER-DEFINED' as has_user_defined_returntype,\\n            p.parameter_name as parameter_name,\\n            p.data_type as data_type,\\n            p.parameter_mode as parameter_mode,\\n            p.parameter_default as parameter_default,\\n            p.position_number as position_number,\\n            p.definition as definition,\\n            pg_get_functiondef(p.oid) as full_definition,\\n            p.external_language as language,\\n            p.strictness as strictness,\\n            p.security_type as security_type,\\n            p.volatility as volatility,\\n            p.kind as kind,\\n            p.oid as oid,\\n            p.extension_oid as extension_oid,\\n            pg_get_function_result(p.oid) as result_string,\\n            pg_get_function_identity_arguments(p.oid) as identity_arguments,\\n            pg_catalog.obj_description(p.oid) as comment\\n        FROM\\n          unnested p\\n    )\\nselect\\n*\\nfrom pre\\norder by\\n    schema, name, parameter_mode, position_number, parameter_name",
    "nickname": "with-extension_oids-select-pg_depend-by_id-pg_proc"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/functions.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/indexes.sql",
    "raw": "with extension_oids as (\\n  select\\n      objid,\\n      classid::regclass::text as classid\\n  from\\n      pg_depend d\\n  WHERE\\n      d.refclassid = 'pg_extension'::regclass and\\n      d.classid = 'pg_index'::regclass\\n),\\nextension_relations as (\\n  select\\n      objid\\n  from\\n      pg_depend d\\n  WHERE\\n      d.refclassid = 'pg_extension'::regclass and\\n      d.classid = 'pg_class'::regclass\\n), pre as (\\n    SELECT n.nspname AS schema,\\n   c.relname AS table_name,\\n   i.relname AS name,\\n   i.oid as oid,\\n   e.objid as extension_oid,\\n   pg_get_indexdef(i.oid) AS definition,\\n       (\\n           select\\n               array_agg(attname order by ik.n)\\n           from\\n                unnest(x.indkey) with ordinality ik(i, n)\\n                join pg_attribute aa\\n                    on\\n                        aa.attrelid = x.indrelid\\n                        and ik.i = aa.attnum\\n        )\\n       index_columns,\\n       indoption key_options,\\n       indnatts total_column_count,\\n       -- 11_AND_LATER indnkeyatts key_column_count,\\n       -- 10_AND_EARLIER indnatts key_column_count,\\n       indnatts num_att,\\n        -- 11_AND_LATER indnatts - indnkeyatts included_column_count,\\n        -- 10_AND_EARLIER 0 included_column_count,\\n       indisunique is_unique,\\n       indisprimary is_pk,\\n       indisexclusion is_exclusion,\\n       indimmediate is_immediate,\\n       indisclustered is_clustered,\\n       indcollation key_collations,\\n       pg_get_expr(indexprs, indrelid) key_expressions,\\n       pg_get_expr(indpred, indrelid) partial_predicate,\\n       amname algorithm\\n  FROM pg_index x\\n    JOIN pg_class c ON c.oid = x.indrelid\\n    JOIN pg_class i ON i.oid = x.indexrelid\\n    JOIN pg_am am ON i.relam = am.oid\\n    LEFT JOIN pg_namespace n ON n.oid = c.relnamespace\\n     left join extension_oids e\\n      on i.oid = e.objid\\n    left join extension_relations er\\n      on c.oid = er.objid\\nWHERE\\n    x.indislive\\n    and c.relkind in ('r', 'm', 'p') AND i.relkind in ('i', 'I')\\n      -- SKIP_INTERNAL and nspname not in ('pg_catalog', 'information_schema', 'pg_toast')\\n      -- SKIP_INTERNAL and nspname not like 'pg_temp_%' and nspname not like 'pg_toast_temp_%'\\n      -- SKIP_INTERNAL and e.objid is null and er.objid is null\\n)\\nselect * ,\\nindex_columns[1\\\\:key_column_count] as key_columns,\\nindex_columns[key_column_count+1\\\\:array_length(index_columns, 1)] as included_columns\\nfrom pre\\norder by 1, 2, 3",
    "untemplated": "with extension_oids as (\\n  select\\n      objid,\\n      classid::regclass::text as classid\\n  from\\n      pg_depend d\\n  WHERE\\n      d.refclassid = 'pg_extension'::regclass and\\n      d.classid = 'pg_index'::regclass\\n),\\nextension_relations as (\\n  select\\n      objid\\n  from\\n      pg_depend d\\n  WHERE\\n      d.refclassid = 'pg_extension'::regclass and\\n      d.classid = 'pg_class'::regclass\\n), pre as (\\n    SELECT n.nspname AS schema,\\n   c.relname AS table_name,\\n   i.relname AS name,\\n   i.oid as oid,\\n   e.objid as extension_oid,\\n   pg_get_indexdef(i.oid) AS definition,\\n       (\\n           select\\n               array_agg(attname order by ik.n)\\n           from\\n                unnest(x.indkey) with ordinality ik(i, n)\\n                join pg_attribute aa\\n                    on\\n                        aa.attrelid = x.indrelid\\n                        and ik.i = aa.attnum\\n        )\\n       index_columns,\\n       indoption key_options,\\n       indnatts total_column_count,\\n       -- 11_AND_LATER indnkeyatts key_column_count,\\n       -- 10_AND_EARLIER indnatts key_column_count,\\n       indnatts num_att,\\n        -- 11_AND_LATER indnatts - indnkeyatts included_column_count,\\n        -- 10_AND_EARLIER 0 included_column_count,\\n       indisunique is_unique,\\n       indisprimary is_pk,\\n       indisexclusion is_exclusion,\\n       indimmediate is_immediate,\\n       indisclustered is_clustered,\\n       indcollation key_collations,\\n       pg_get_expr(indexprs, indrelid) key_expressions,\\n       pg_get_expr(indpred, indrelid) partial_predicate,\\n       amname algorithm\\n  FROM pg_index x\\n    JOIN pg_class c ON c.oid = x.indrelid\\n    JOIN pg_class i ON i.oid = x.indexrelid\\n    JOIN pg_am am ON i.relam = am.oid\\n    LEFT JOIN pg_namespace n ON n.oid = c.relnamespace\\n     left join extension_oids e\\n      on i.oid = e.objid\\n    left join extension_relations er\\n      on c.oid = er.objid\\nWHERE\\n    x.indislive\\n    and c.relkind in ('r', 'm', 'p') AND i.relkind in ('i', 'I')\\n      -- SKIP_INTERNAL and nspname not in ('pg_catalog', 'information_schema', 'pg_toast')\\n      -- SKIP_INTERNAL and nspname not like 'pg_temp_%' and nspname not like 'pg_toast_temp_%'\\n      -- SKIP_INTERNAL and e.objid is null and er.objid is null\\n)\\nselect * ,\\nindex_columns[1\\\\:key_column_count] as key_columns,\\nindex_columns[key_column_count+1\\\\:array_length(index_columns, 1)] as included_columns\\nfrom pre\\norder by 1, 2, 3",
    "nickname": "with-extension_oids-select-classid_regclass_text-pg_depend"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/indexes.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/privileges.sql",
    "raw": "select\\n  table_schema as schema,\\n  table_name as name,\\n  'table' as object_type,\\n  grantee as user,\\n  privilege_type as privilege\\nfrom information_schema.role_table_grants\\nwhere grantee != (\\n    select tableowner\\n    from pg_tables\\n    where schemaname = table_schema\\n    and tablename = table_name\\n)\\n-- SKIP_INTERNAL and table_schema not in ('pg_internal', 'pg_catalog', 'information_schema', 'pg_toast')\\n-- SKIP_INTERNAL and table_schema not like 'pg_temp_%' and table_schema not like 'pg_toast_temp_%'\\norder by schema, name, user",
    "untemplated": "select\\n  table_schema as schema,\\n  table_name as name,\\n  'table' as object_type,\\n  grantee as user,\\n  privilege_type as privilege\\nfrom information_schema.role_table_grants\\nwhere grantee != (\\n    select tableowner\\n    from pg_tables\\n    where schemaname = table_schema\\n    and tablename = table_name\\n)\\n-- SKIP_INTERNAL and table_schema not in ('pg_internal', 'pg_catalog', 'information_schema', 'pg_toast')\\n-- SKIP_INTERNAL and table_schema not like 'pg_temp_%' and table_schema not like 'pg_toast_temp_%'\\norder by schema, name, user",
    "nickname": "select-information_schema_role_table_grants-filtered-pg_tables"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/privileges.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/relations.sql",
    "raw": "with extension_oids as (\\n  select\\n      objid\\n  from\\n      pg_depend d\\n  WHERE\\n      d.refclassid = 'pg_extension'::regclass and\\n      d.classid = 'pg_class'::regclass\\n), enums as (\\n\\n  SELECT\\n    t.oid as enum_oid,\\n    n.nspname as \\"schema\\",\\n    t.typname as name\\n  FROM pg_catalog.pg_type t\\n       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace\\n       left outer join extension_oids e\\n         on t.oid = e.objid\\n  WHERE\\n    t.typcategory = 'E'\\n    and e.objid is null\\n    -- SKIP_INTERNAL and n.nspname not in ('pg_catalog', 'information_schema', 'pg_toast')\\n    -- SKIP_INTERNAL and n.nspname not like 'pg_temp_%' and n.nspname not like 'pg_toast_temp_%'\\n  ORDER BY 1, 2\\n),\\nr as (\\n    select\\n        c.relname as name,\\n        n.nspname as schema,\\n        c.relkind as relationtype,\\n        c.oid as oid,\\n        case when c.relkind in ('m', 'v') then\\n          pg_get_viewdef(c.oid)\\n        else null end\\n          as definition,\\n        (SELECT\\n              '\\"' || nmsp_parent.nspname || '\\".\\"' || parent.relname || '\\"' as parent\\n          FROM pg_inherits\\n              JOIN pg_class parent            ON pg_inherits.inhparent = parent.oid\\n              JOIN pg_class child             ON pg_inherits.inhrelid   = child.oid\\n              JOIN pg_namespace nmsp_parent   ON nmsp_parent.oid  = parent.relnamespace\\n              JOIN pg_namespace nmsp_child    ON nmsp_child.oid   = child.relnamespace\\n          where child.oid = c.oid)\\n        as parent_table,\\n        case when c.relpartbound is not null then\\n          pg_get_expr(c.relpartbound, c.oid, true)\\n        when c.relhassubclass is not null then\\n          pg_catalog.pg_get_partkeydef(c.oid)\\n        end\\n        as partition_def,\\n        c.relrowsecurity::boolean as rowsecurity,\\n        c.relforcerowsecurity::boolean as forcerowsecurity,\\n        c.relpersistence as persistence,\\n        c.relpages as page_size_estimate,\\n        c.reltuples as row_count_estimate\\n    from\\n        pg_catalog.pg_class c\\n        inner join pg_catalog.pg_namespace n\\n          ON n.oid = c.relnamespace\\n        left outer join extension_oids e\\n          on c.oid = e.objid\\n    where c.relkind in ('r', 'v', 'm', 'c', 'p')\\n    -- SKIP_INTERNAL and e.objid is null\\n    -- SKIP_INTERNAL and n.nspname not in ('pg_catalog', 'information_schema', 'pg_toast')\\n    -- SKIP_INTERNAL and n.nspname not like 'pg_temp_%' and n.nspname not like 'pg_toast_temp_%'\\n)\\nselect\\n    r.relationtype,\\n    r.schema,\\n    r.name,\\n    r.definition as definition,\\n    a.attnum as position_number,\\n    a.attname as attname,\\n    a.attnotnull as not_null,\\n    a.atttypid::regtype AS datatype,\\n    a.attidentity != '' as is_identity,\\n    a.attidentity = 'a' as is_identity_always,\\n    -- PRE_12 false as is_generated,\\n    -- 12_ONLY a.attgenerated != '' as is_generated,\\n    (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t\\n     WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS collation,\\n    pg_get_expr(ad.adbin, ad.adrelid) as defaultdef,\\n    r.oid as oid,\\n    format_type(atttypid, atttypmod) AS datatypestring,\\n    e.enum_oid is not null as is_enum,\\n    e.name as enum_name,\\n    e.schema as enum_schema,\\n    pg_catalog.obj_description(r.oid) as comment,\\n    r.parent_table,\\n    r.partition_def,\\n    r.rowsecurity,\\n    r.forcerowsecurity,\\n    r.persistence,\\n    r.page_size_estimate,\\n    r.row_count_estimate\\nFROM\\n    r\\n    left join pg_catalog.pg_attribute a\\n        on r.oid = a.attrelid and a.attnum > 0\\n    left join pg_catalog.pg_attrdef ad\\n        on a.attrelid = ad.adrelid\\n        and a.attnum = ad.adnum\\n    left join enums e\\n      on a.atttypid = e.enum_oid\\nwhere a.attisdropped is not true\\n-- SKIP_INTERNAL and r.schema not in ('pg_catalog', 'information_schema', 'pg_toast')\\n-- SKIP_INTERNAL and r.schema not like 'pg_temp_%' and r.schema not like 'pg_toast_temp_%'\\norder by relationtype, r.schema, r.name, position_number",
    "untemplated": "with extension_oids as (\\n  select\\n      objid\\n  from\\n      pg_depend d\\n  WHERE\\n      d.refclassid = 'pg_extension'::regclass and\\n      d.classid = 'pg_class'::regclass\\n), enums as (\\n\\n  SELECT\\n    t.oid as enum_oid,\\n    n.nspname as \\"schema\\",\\n    t.typname as name\\n  FROM pg_catalog.pg_type t\\n       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace\\n       left outer join extension_oids e\\n         on t.oid = e.objid\\n  WHERE\\n    t.typcategory = 'E'\\n    and e.objid is null\\n    -- SKIP_INTERNAL and n.nspname not in ('pg_catalog', 'information_schema', 'pg_toast')\\n    -- SKIP_INTERNAL and n.nspname not like 'pg_temp_%' and n.nspname not like 'pg_toast_temp_%'\\n  ORDER BY 1, 2\\n),\\nr as (\\n    select\\n        c.relname as name,\\n        n.nspname as schema,\\n        c.relkind as relationtype,\\n        c.oid as oid,\\n        case when c.relkind in ('m', 'v') then\\n          pg_get_viewdef(c.oid)\\n        else null end\\n          as definition,\\n        (SELECT\\n              '\\"' || nmsp_parent.nspname || '\\".\\"' || parent.relname || '\\"' as parent\\n          FROM pg_inherits\\n              JOIN pg_class parent            ON pg_inherits.inhparent = parent.oid\\n              JOIN pg_class child             ON pg_inherits.inhrelid   = child.oid\\n              JOIN pg_namespace nmsp_parent   ON nmsp_parent.oid  = parent.relnamespace\\n              JOIN pg_namespace nmsp_child    ON nmsp_child.oid   = child.relnamespace\\n          where child.oid = c.oid)\\n        as parent_table,\\n        case when c.relpartbound is not null then\\n          pg_get_expr(c.relpartbound, c.oid, true)\\n        when c.relhassubclass is not null then\\n          pg_catalog.pg_get_partkeydef(c.oid)\\n        end\\n        as partition_def,\\n        c.relrowsecurity::boolean as rowsecurity,\\n        c.relforcerowsecurity::boolean as forcerowsecurity,\\n        c.relpersistence as persistence,\\n        c.relpages as page_size_estimate,\\n        c.reltuples as row_count_estimate\\n    from\\n        pg_catalog.pg_class c\\n        inner join pg_catalog.pg_namespace n\\n          ON n.oid = c.relnamespace\\n        left outer join extension_oids e\\n          on c.oid = e.objid\\n    where c.relkind in ('r', 'v', 'm', 'c', 'p')\\n    -- SKIP_INTERNAL and e.objid is null\\n    -- SKIP_INTERNAL and n.nspname not in ('pg_catalog', 'information_schema', 'pg_toast')\\n    -- SKIP_INTERNAL and n.nspname not like 'pg_temp_%' and n.nspname not like 'pg_toast_temp_%'\\n)\\nselect\\n    r.relationtype,\\n    r.schema,\\n    r.name,\\n    r.definition as definition,\\n    a.attnum as position_number,\\n    a.attname as attname,\\n    a.attnotnull as not_null,\\n    a.atttypid::regtype AS datatype,\\n    a.attidentity != '' as is_identity,\\n    a.attidentity = 'a' as is_identity_always,\\n    -- PRE_12 false as is_generated,\\n    -- 12_ONLY a.attgenerated != '' as is_generated,\\n    (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t\\n     WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS collation,\\n    pg_get_expr(ad.adbin, ad.adrelid) as defaultdef,\\n    r.oid as oid,\\n    format_type(atttypid, atttypmod) AS datatypestring,\\n    e.enum_oid is not null as is_enum,\\n    e.name as enum_name,\\n    e.schema as enum_schema,\\n    pg_catalog.obj_description(r.oid) as comment,\\n    r.parent_table,\\n    r.partition_def,\\n    r.rowsecurity,\\n    r.forcerowsecurity,\\n    r.persistence,\\n    r.page_size_estimate,\\n    r.row_count_estimate\\nFROM\\n    r\\n    left join pg_catalog.pg_attribute a\\n        on r.oid = a.attrelid and a.attnum > 0\\n    left join pg_catalog.pg_attrdef ad\\n        on a.attrelid = ad.adrelid\\n        and a.attnum = ad.adnum\\n    left join enums e\\n      on a.atttypid = e.enum_oid\\nwhere a.attisdropped is not true\\n-- SKIP_INTERNAL and r.schema not in ('pg_catalog', 'information_schema', 'pg_toast')\\n-- SKIP_INTERNAL and r.schema not like 'pg_temp_%' and r.schema not like 'pg_toast_temp_%'\\norder by relationtype, r.schema, r.name, position_number",
    "nickname": "with-extension_oids-select-pg_depend-by_id-pg_catalog_pg_type"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/relations.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/relations9.sql",
    "raw": "with extension_oids as (\\n  select\\n      objid\\n  from\\n      pg_depend d\\n  WHERE\\n      d.refclassid = 'pg_extension'::regclass\\n), enums as (\\n\\n  SELECT\\n    t.oid as enum_oid,\\n    n.nspname as \\"schema\\",\\n    pg_catalog.format_type(t.oid, NULL) AS \\"name\\"\\n  FROM pg_catalog.pg_type t\\n       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace\\n       left outer join extension_oids e\\n         on t.oid = e.objid\\n  WHERE\\n    t.typcategory = 'E'\\n    and e.objid is null\\n    -- SKIP_INTERNAL and n.nspname not in ('pg_catalog', 'information_schema', 'pg_toast')\\n    -- SKIP_INTERNAL and n.nspname not like 'pg_temp_%' and n.nspname not like 'pg_toast_temp_%'\\n    AND pg_catalog.pg_type_is_visible(t.oid)\\n  ORDER BY 1, 2\\n),\\nr as (\\n    select\\n        c.relname as name,\\n        n.nspname as schema,\\n        c.relkind as relationtype,\\n        c.oid as oid,\\n        case when c.relkind in ('m', 'v') then\\n          pg_get_viewdef(c.oid)\\n        else null end\\n          as definition,\\n        null\\n        as parent_table,\\n        null as partition_def,\\n        c.relrowsecurity::boolean as rowsecurity,\\n        c.relforcerowsecurity::boolean as forcerowsecurity,\\n        c.relpersistence as persistence,\\n        c.relpages as page_size_estimate,\\n        c.reltuples as row_count_estimate\\n    from\\n        pg_catalog.pg_class c\\n        inner join pg_catalog.pg_namespace n\\n          ON n.oid = c.relnamespace\\n        left outer join extension_oids e\\n          on c.oid = e.objid\\n    where c.relkind in ('r', 'v', 'm', 'c', 'p')\\n    -- SKIP_INTERNAL and e.objid is null\\n    -- SKIP_INTERNAL and n.nspname not in ('pg_catalog', 'information_schema', 'pg_toast')\\n    -- SKIP_INTERNAL and n.nspname not like 'pg_temp_%' and n.nspname not like 'pg_toast_temp_%'\\n)\\nselect\\n    r.relationtype,\\n    r.schema,\\n    r.name,\\n    r.definition as definition,\\n    a.attnum as position_number,\\n    a.attname as attname,\\n    a.attnotnull as not_null,\\n    a.atttypid::regtype AS datatype,\\n    false AS is_identity,\\n    false as is_identity_always,\\n    false as is_generated,\\n    (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t\\n     WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS collation,\\n    pg_get_expr(ad.adbin, ad.adrelid) as defaultdef,\\n    r.oid as oid,\\n    format_type(atttypid, atttypmod) AS datatypestring,\\n    e.enum_oid is not null as is_enum,\\n    e.name as enum_name,\\n    e.schema as enum_schema,\\n    pg_catalog.obj_description(r.oid) as comment,\\n    r.parent_table,\\n    r.partition_def,\\n    r.rowsecurity,\\n    r.forcerowsecurity,\\n    r.persistence,\\n    r.page_size_estimate,\\n    r.row_count_estimate\\nFROM\\n    r\\n    left join pg_catalog.pg_attribute a\\n        on r.oid = a.attrelid and a.attnum > 0\\n    left join pg_catalog.pg_attrdef ad\\n        on a.attrelid = ad.adrelid\\n        and a.attnum = ad.adnum\\n    left join enums e\\n      on a.atttypid = e.enum_oid\\nwhere a.attisdropped is not true\\n-- SKIP_INTERNAL and r.schema not in ('pg_catalog', 'information_schema', 'pg_toast')\\n-- SKIP_INTERNAL and r.schema not like 'pg_temp_%' and r.schema not like 'pg_toast_temp_%'\\norder by relationtype, r.schema, r.name, position_number",
    "untemplated": "with extension_oids as (\\n  select\\n      objid\\n  from\\n      pg_depend d\\n  WHERE\\n      d.refclassid = 'pg_extension'::regclass\\n), enums as (\\n\\n  SELECT\\n    t.oid as enum_oid,\\n    n.nspname as \\"schema\\",\\n    pg_catalog.format_type(t.oid, NULL) AS \\"name\\"\\n  FROM pg_catalog.pg_type t\\n       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace\\n       left outer join extension_oids e\\n         on t.oid = e.objid\\n  WHERE\\n    t.typcategory = 'E'\\n    and e.objid is null\\n    -- SKIP_INTERNAL and n.nspname not in ('pg_catalog', 'information_schema', 'pg_toast')\\n    -- SKIP_INTERNAL and n.nspname not like 'pg_temp_%' and n.nspname not like 'pg_toast_temp_%'\\n    AND pg_catalog.pg_type_is_visible(t.oid)\\n  ORDER BY 1, 2\\n),\\nr as (\\n    select\\n        c.relname as name,\\n        n.nspname as schema,\\n        c.relkind as relationtype,\\n        c.oid as oid,\\n        case when c.relkind in ('m', 'v') then\\n          pg_get_viewdef(c.oid)\\n        else null end\\n          as definition,\\n        null\\n        as parent_table,\\n        null as partition_def,\\n        c.relrowsecurity::boolean as rowsecurity,\\n        c.relforcerowsecurity::boolean as forcerowsecurity,\\n        c.relpersistence as persistence,\\n        c.relpages as page_size_estimate,\\n        c.reltuples as row_count_estimate\\n    from\\n        pg_catalog.pg_class c\\n        inner join pg_catalog.pg_namespace n\\n          ON n.oid = c.relnamespace\\n        left outer join extension_oids e\\n          on c.oid = e.objid\\n    where c.relkind in ('r', 'v', 'm', 'c', 'p')\\n    -- SKIP_INTERNAL and e.objid is null\\n    -- SKIP_INTERNAL and n.nspname not in ('pg_catalog', 'information_schema', 'pg_toast')\\n    -- SKIP_INTERNAL and n.nspname not like 'pg_temp_%' and n.nspname not like 'pg_toast_temp_%'\\n)\\nselect\\n    r.relationtype,\\n    r.schema,\\n    r.name,\\n    r.definition as definition,\\n    a.attnum as position_number,\\n    a.attname as attname,\\n    a.attnotnull as not_null,\\n    a.atttypid::regtype AS datatype,\\n    false AS is_identity,\\n    false as is_identity_always,\\n    false as is_generated,\\n    (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t\\n     WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS collation,\\n    pg_get_expr(ad.adbin, ad.adrelid) as defaultdef,\\n    r.oid as oid,\\n    format_type(atttypid, atttypmod) AS datatypestring,\\n    e.enum_oid is not null as is_enum,\\n    e.name as enum_name,\\n    e.schema as enum_schema,\\n    pg_catalog.obj_description(r.oid) as comment,\\n    r.parent_table,\\n    r.partition_def,\\n    r.rowsecurity,\\n    r.forcerowsecurity,\\n    r.persistence,\\n    r.page_size_estimate,\\n    r.row_count_estimate\\nFROM\\n    r\\n    left join pg_catalog.pg_attribute a\\n        on r.oid = a.attrelid and a.attnum > 0\\n    left join pg_catalog.pg_attrdef ad\\n        on a.attrelid = ad.adrelid\\n        and a.attnum = ad.adnum\\n    left join enums e\\n      on a.atttypid = e.enum_oid\\nwhere a.attisdropped is not true\\n-- SKIP_INTERNAL and r.schema not in ('pg_catalog', 'information_schema', 'pg_toast')\\n-- SKIP_INTERNAL and r.schema not like 'pg_temp_%' and r.schema not like 'pg_toast_temp_%'\\norder by relationtype, r.schema, r.name, position_number",
    "nickname": "with-extension_oids-select-pg_depend-by_id-format_type"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/relations9.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/rlspolicies.sql",
    "raw": "select\\n  p.polname as name,\\n  n.nspname as schema,\\n  c.relname as table_name,\\n  p.polcmd as commandtype,\\n  p.polpermissive as permissive,\\n  (\\n    select\\n      array_agg(\\n        case when o = 0 THEN\\n        'public'\\n        else\\n        pg_get_userbyid(o)\\n        end\\n      )\\n    from\\n    unnest(p.polroles) as unn(o)\\n  )\\n  as roles,\\n  p.polqual as qualtree,\\n  pg_get_expr(p.polqual, p.polrelid) as qual,\\n  pg_get_expr(p.polwithcheck, p.polrelid) as withcheck\\nfrom\\n  pg_policy p\\n  join pg_class c ON c.oid = p.polrelid\\n  JOIN pg_namespace n ON n.oid = c.relnamespace\\norder by\\n  2, 1",
    "untemplated": "select\\n  p.polname as name,\\n  n.nspname as schema,\\n  c.relname as table_name,\\n  p.polcmd as commandtype,\\n  p.polpermissive as permissive,\\n  (\\n    select\\n      array_agg(\\n        case when o = 0 THEN\\n        'public'\\n        else\\n        pg_get_userbyid(o)\\n        end\\n      )\\n    from\\n    unnest(p.polroles) as unn(o)\\n  )\\n  as roles,\\n  p.polqual as qualtree,\\n  pg_get_expr(p.polqual, p.polrelid) as qual,\\n  pg_get_expr(p.polwithcheck, p.polrelid) as withcheck\\nfrom\\n  pg_policy p\\n  join pg_class c ON c.oid = p.polrelid\\n  JOIN pg_namespace n ON n.oid = c.relnamespace\\norder by\\n  2, 1",
    "nickname": "select-array_agg-unnest-pg_policy-pg_class-join-pg_namespace"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/schemas.sql",
    "raw": "with extension_oids as (\\n  select\\n      objid\\n  from\\n      pg_depend d\\n  WHERE\\n      d.refclassid = 'pg_extension'::regclass\\n      and d.classid = 'pg_namespace'::regclass\\n) select\\n    nspname as schema\\nfrom\\n    pg_catalog.pg_namespace\\n    left outer join extension_oids e\\n    \\ton e.objid = oid\\n-- SKIP_INTERNAL where nspname not in ('pg_internal', 'pg_catalog', 'information_schema', 'pg_toast')\\n-- SKIP_INTERNAL and nspname not like 'pg_temp_%' and nspname not like 'pg_toast_temp_%'\\n-- SKIP_INTERNAL and e.objid is null\\norder by 1",
    "untemplated": "with extension_oids as (\\n  select\\n      objid\\n  from\\n      pg_depend d\\n  WHERE\\n      d.refclassid = 'pg_extension'::regclass\\n      and d.classid = 'pg_namespace'::regclass\\n) select\\n    nspname as schema\\nfrom\\n    pg_catalog.pg_namespace\\n    left outer join extension_oids e\\n    \\ton e.objid = oid\\n-- SKIP_INTERNAL where nspname not in ('pg_internal', 'pg_catalog', 'information_schema', 'pg_toast')\\n-- SKIP_INTERNAL and nspname not like 'pg_temp_%' and nspname not like 'pg_toast_temp_%'\\n-- SKIP_INTERNAL and e.objid is null\\norder by 1",
    "nickname": "with-extension_oids-select-pg_depend-by_id"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/schemas.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/sequences.sql",
    "raw": "with\\nextension_objids as (\\n    select\\n        objid as extension_objid\\n    from\\n        pg_depend d\\n    WHERE\\n        d.refclassid = 'pg_extension'::regclass and\\n        d.classid = 'pg_class'::regclass\\n), pre as (\\n    select\\n        n.nspname as schema,\\n        c.relname as name,\\n        c_ref.relname as table_name,\\n        a.attname as column_name,\\n        --a.attname is not null as has_table_owner,\\n        --a.attidentity is distinct from '' as is_identity,\\n        d.deptype is not distinct from 'i' as is_identity\\n        --a.attidentity = 'a' as is_identity_always\\n    from\\n        --pg_sequence s\\n\\n        --inner join pg_class c\\n        --    on s.seqrelid = c.oid\\n\\n        pg_class c\\n\\n        inner join pg_catalog.pg_namespace n\\n            ON n.oid = c.relnamespace\\n\\n        left join extension_objids\\n            on c.oid = extension_objids.extension_objid\\n\\n        left join pg_depend d\\n            on c.oid = d.objid and d.deptype in ('i', 'a')\\n\\n        left join pg_class c_ref\\n            on d.refobjid = c_ref.oid\\n\\n        left join pg_attribute a\\n            ON ( a.attnum = d.refobjsubid\\n                AND a.attrelid = d.refobjid )\\n\\nwhere\\n    c.relkind = 'S'\\n    -- SKIP_INTERNAL and n.nspname not in ('pg_internal', 'pg_catalog', 'information_schema', 'pg_toast')\\n    -- SKIP_INTERNAL and n.nspname not like 'pg_temp_%' and n.nspname not like 'pg_toast_temp_%'\\n    and extension_objids.extension_objid is null\\n)\\nselect\\n    *\\nfrom\\n    pre\\nwhere\\n    not is_identity\\norder by\\n    1, 2",
    "untemplated": "with\\nextension_objids as (\\n    select\\n        objid as extension_objid\\n    from\\n        pg_depend d\\n    WHERE\\n        d.refclassid = 'pg_extension'::regclass and\\n        d.classid = 'pg_class'::regclass\\n), pre as (\\n    select\\n        n.nspname as schema,\\n        c.relname as name,\\n        c_ref.relname as table_name,\\n        a.attname as column_name,\\n        --a.attname is not null as has_table_owner,\\n        --a.attidentity is distinct from '' as is_identity,\\n        d.deptype is not distinct from 'i' as is_identity\\n        --a.attidentity = 'a' as is_identity_always\\n    from\\n        --pg_sequence s\\n\\n        --inner join pg_class c\\n        --    on s.seqrelid = c.oid\\n\\n        pg_class c\\n\\n        inner join pg_catalog.pg_namespace n\\n            ON n.oid = c.relnamespace\\n\\n        left join extension_objids\\n            on c.oid = extension_objids.extension_objid\\n\\n        left join pg_depend d\\n            on c.oid = d.objid and d.deptype in ('i', 'a')\\n\\n        left join pg_class c_ref\\n            on d.refobjid = c_ref.oid\\n\\n        left join pg_attribute a\\n            ON ( a.attnum = d.refobjsubid\\n                AND a.attrelid = d.refobjid )\\n\\nwhere\\n    c.relkind = 'S'\\n    -- SKIP_INTERNAL and n.nspname not in ('pg_internal', 'pg_catalog', 'information_schema', 'pg_toast')\\n    -- SKIP_INTERNAL and n.nspname not like 'pg_temp_%' and n.nspname not like 'pg_toast_temp_%'\\n    and extension_objids.extension_objid is null\\n)\\nselect\\n    *\\nfrom\\n    pre\\nwhere\\n    not is_identity\\norder by\\n    1, 2",
    "nickname": "with-extension_objids-select-pg_depend-by_id-_i_-pg_class"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/sequences.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/triggers.sql",
    "raw": "with extension_oids as (\\n  select\\n      objid\\n  from\\n      pg_depend d\\n  WHERE\\n     d.refclassid = 'pg_extension'::regclass and\\n     d.classid = 'pg_trigger'::regclass\\n)\\nselect\\n    tg.tgname \\"name\\",\\n    nsp.nspname \\"schema\\",\\n    cls.relname table_name,\\n    pg_get_triggerdef(tg.oid) full_definition,\\n    proc.proname proc_name,\\n    nspp.nspname proc_schema,\\n    tg.tgenabled enabled,\\n    tg.oid in (select * from extension_oids) as extension_owned\\nfrom pg_trigger tg\\njoin pg_class cls on cls.oid = tg.tgrelid\\njoin pg_namespace nsp on nsp.oid = cls.relnamespace\\njoin pg_proc proc on proc.oid = tg.tgfoid\\njoin pg_namespace nspp on nspp.oid = proc.pronamespace\\nwhere not tg.tgisinternal\\n-- SKIP_INTERNAL and not tg.oid in (select * from extension_oids)\\norder by schema, table_name, name",
    "untemplated": "with extension_oids as (\\n  select\\n      objid\\n  from\\n      pg_depend d\\n  WHERE\\n     d.refclassid = 'pg_extension'::regclass and\\n     d.classid = 'pg_trigger'::regclass\\n)\\nselect\\n    tg.tgname \\"name\\",\\n    nsp.nspname \\"schema\\",\\n    cls.relname table_name,\\n    pg_get_triggerdef(tg.oid) full_definition,\\n    proc.proname proc_name,\\n    nspp.nspname proc_schema,\\n    tg.tgenabled enabled,\\n    tg.oid in (select * from extension_oids) as extension_owned\\nfrom pg_trigger tg\\njoin pg_class cls on cls.oid = tg.tgrelid\\njoin pg_namespace nsp on nsp.oid = cls.relnamespace\\njoin pg_proc proc on proc.oid = tg.tgfoid\\njoin pg_namespace nspp on nspp.oid = proc.pronamespace\\nwhere not tg.tgisinternal\\n-- SKIP_INTERNAL and not tg.oid in (select * from extension_oids)\\norder by schema, table_name, name",
    "nickname": "with-extension_oids-select-pg_depend-by_id-pg_get_triggerdef"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/triggers.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/types.sql",
    "raw": "with extension_oids as (\\n  select\\n      objid\\n  from\\n      pg_depend d\\n  WHERE\\n      d.refclassid = 'pg_extension'::regclass and\\n      d.classid = 'pg_type'::regclass\\n)\\n\\nSELECT\\n  n.nspname AS schema,\\n  pg_catalog.format_type (t.oid, NULL) AS name,\\n  t.typname AS internal_name,\\n  CASE\\n    WHEN t.typrelid != 0\\n      THEN CAST ( 'tuple' AS pg_catalog.text )\\n    WHEN t.typlen < 0\\n      THEN CAST ( 'var' AS pg_catalog.text )\\n    ELSE CAST ( t.typlen AS pg_catalog.text )\\n  END AS size,\\n  -- pg_catalog.array_to_string (\\n  --   ARRAY(\\n  --     SELECT e.enumlabel\\n  --       FROM pg_catalog.pg_enum e\\n  --       WHERE e.enumtypid = t.oid\\n  --       ORDER BY e.oid ), E'\\\\n'\\n  --   ) AS columns,\\n  pg_catalog.obj_description (t.oid, 'pg_type') AS description,\\n  (array_to_json(array(\\n    select\\n      jsonb_build_object('attribute', attname, 'type', a.typname)\\n    from pg_class\\n    join pg_attribute on (attrelid = pg_class.oid)\\n    join pg_type a on (atttypid = a.oid)\\n    where (pg_class.reltype = t.oid)\\n  ))) as columns\\nFROM\\n  pg_catalog.pg_type t\\n  LEFT JOIN pg_catalog.pg_namespace n\\n    ON n.oid = t.typnamespace\\nWHERE (\\n  t.typrelid = 0\\n  OR (\\n    SELECT c.relkind = 'c'\\n      FROM pg_catalog.pg_class c\\n      WHERE c.oid = t.typrelid\\n  )\\n)\\nAND NOT EXISTS (\\n  SELECT 1\\n    FROM pg_catalog.pg_type el\\n    WHERE el.oid = t.typelem\\n    AND el.typarray = t.oid\\n)\\nAND n.nspname <> 'pg_catalog'\\nAND n.nspname <> 'information_schema'\\nAND pg_catalog.pg_type_is_visible ( t.oid )\\nand t.typcategory = 'C'\\nand t.oid not in (select * from extension_oids)\\nORDER BY 1, 2",
    "untemplated": "with extension_oids as (\\n  select\\n      objid\\n  from\\n      pg_depend d\\n  WHERE\\n      d.refclassid = 'pg_extension'::regclass and\\n      d.classid = 'pg_type'::regclass\\n)\\n\\nSELECT\\n  n.nspname AS schema,\\n  pg_catalog.format_type (t.oid, NULL) AS name,\\n  t.typname AS internal_name,\\n  CASE\\n    WHEN t.typrelid != 0\\n      THEN CAST ( 'tuple' AS pg_catalog.text )\\n    WHEN t.typlen < 0\\n      THEN CAST ( 'var' AS pg_catalog.text )\\n    ELSE CAST ( t.typlen AS pg_catalog.text )\\n  END AS size,\\n  -- pg_catalog.array_to_string (\\n  --   ARRAY(\\n  --     SELECT e.enumlabel\\n  --       FROM pg_catalog.pg_enum e\\n  --       WHERE e.enumtypid = t.oid\\n  --       ORDER BY e.oid ), E'\\\\n'\\n  --   ) AS columns,\\n  pg_catalog.obj_description (t.oid, 'pg_type') AS description,\\n  (array_to_json(array(\\n    select\\n      jsonb_build_object('attribute', attname, 'type', a.typname)\\n    from pg_class\\n    join pg_attribute on (attrelid = pg_class.oid)\\n    join pg_type a on (atttypid = a.oid)\\n    where (pg_class.reltype = t.oid)\\n  ))) as columns\\nFROM\\n  pg_catalog.pg_type t\\n  LEFT JOIN pg_catalog.pg_namespace n\\n    ON n.oid = t.typnamespace\\nWHERE (\\n  t.typrelid = 0\\n  OR (\\n    SELECT c.relkind = 'c'\\n      FROM pg_catalog.pg_class c\\n      WHERE c.oid = t.typrelid\\n  )\\n)\\nAND NOT EXISTS (\\n  SELECT 1\\n    FROM pg_catalog.pg_type el\\n    WHERE el.oid = t.typelem\\n    AND el.typarray = t.oid\\n)\\nAND n.nspname <> 'pg_catalog'\\nAND n.nspname <> 'information_schema'\\nAND pg_catalog.pg_type_is_visible ( t.oid )\\nand t.typcategory = 'C'\\nand t.oid not in (select * from extension_oids)\\nORDER BY 1, 2",
    "nickname": "with-extension_oids-select-pg_depend-by_id-format_type"
  },
  {
    "filepath": "packages/schemainspect/queries/pg/sql/types.sql",
    "raw": "",
    "untemplated": "",
    "nickname": "sql"
  }
]
`;
