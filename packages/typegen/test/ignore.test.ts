import * as fsSyncer from 'fs-syncer'

import * as typegen from '../src'
import {getHelper} from './helper'

export const {typegenOptions, logger, poolHelper: helper} = getHelper({__filename})

beforeEach(async () => {
  jest.resetAllMocks()

  await helper.pool.query(helper.sql`
    create table table1(a int not null);
  `)
})

test(`statement to be ignored`, async () => {
  const syncer = fsSyncer.jestFixture({
    targetState: {
      'ignore1.ts': `
        import {sql} from 'slonik'

        export default sql\`
            --typegen-ignore
            select a from table1
        \`
      `,
      'ignore2.ts': `
        import {sql} from 'slonik'

        export default sql\`
            select * from table1
        /* typegen-ignore */
        \`
      `,
      'process_normal.ts': `
        import {sql} from 'slonik'

        export default sql\`
            select * from table1
        \`
      `,
      'mixed.ts': `
        import {sql} from 'slonik'

        export default [
            sql\`select * from table1 --typegen-ignore\`,
            sql\`select * from table1\`,
        ]
      `,
    },
  })

  syncer.sync()

  await typegen.generate(typegenOptions(syncer.baseDir))

  expect(logger.info).toHaveBeenCalledWith(
    './packages/typegen/test/fixtures/ignore.test.ts/statement-to-be-ignored/ignore1.ts finished. Processed 0/1 queries (1 ignored).',
  )
  expect(logger.info).toHaveBeenCalledWith(
    './packages/typegen/test/fixtures/ignore.test.ts/statement-to-be-ignored/process_normal.ts finished. Processed 1/1 queries.',
  )
  expect(logger.info).toHaveBeenCalledWith(
    './packages/typegen/test/fixtures/ignore.test.ts/statement-to-be-ignored/mixed.ts finished. Processed 1/2 queries (1 ignored).',
  )
  expect(logger.warn).not.toHaveBeenCalled()
  expect(logger.error).not.toHaveBeenCalled()

  expect(syncer.yaml()).toMatchInlineSnapshot(`
"---
ignore1.ts: |-
  import {sql} from 'slonik'
  
  export default sql\`
      --typegen-ignore
      select a from table1
  \`
  
ignore2.ts: |-
  import {sql} from 'slonik'
  
  export default sql\`
      select * from table1
  /* typegen-ignore */
  \`
  
mixed.ts: |-
  import {sql} from 'slonik'
  
  export default [sql\`select * from table1 --typegen-ignore\`, sql<queries.Table1>\`select * from table1\`]
  
  export declare namespace queries {
    // Generated by @slonik/typegen
  
    /** - query: \`select * from table1\` */
    export interface Table1 {
      /** column: \`ignore_test.table1.a\`, not null: \`true\`, regtype: \`integer\` */
      a: number
    }
  }
  
process_normal.ts: |-
  import {sql} from 'slonik'
  
  export default sql<queries.Table1>\`
      select * from table1
  \`
  
  export declare namespace queries {
    // Generated by @slonik/typegen
  
    /** - query: \`select * from table1\` */
    export interface Table1 {
      /** column: \`ignore_test.table1.a\`, not null: \`true\`, regtype: \`integer\` */
      a: number
    }
  }
  "
`)
})

test(`fragment to be ignored`, async () => {
  const syncer = fsSyncer.jestFixture({
    targetState: {
      'index.ts': `
          import {sql} from 'slonik'
  
          export default sql\`where test=3\`
        `,
    },
  })

  syncer.sync()

  await typegen.generate(typegenOptions(syncer.baseDir))

  expect(logger.info).toHaveBeenCalledTimes(4)
  expect(logger.warn).not.toHaveBeenCalled()
  expect(logger.error).not.toHaveBeenCalled()

  expect(syncer.yaml()).toMatchInlineSnapshot(`
"---
index.ts: |-
  import {sql} from 'slonik'
  
          export default sql\`where test=3\`
  "
`)
})
