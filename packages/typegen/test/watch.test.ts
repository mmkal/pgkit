import * as fsSyncer from 'fs-syncer'
import * as typegen from '../src'
import {getHelper} from './helper'
import * as fs from 'fs'
import * as path from 'path'

export const {typegenOptions, logger, poolHelper: helper} = getHelper({__filename})

test('watch file system', async () => {
  const syncer = fsSyncer.jestFixture({
    targetState: {
      'file1.ts': `
        import {sql} from 'slonik'
        export default sql\`select 123 as abc\`
      `,
      'file2.ts': `
        import {sql} from 'slonik'
        export default sql\`select 123 as xyz\`
      `,
    },
  })

  syncer.sync()

  logger.info = console.info as any
  const {watch} = await typegen.generate(typegenOptions(syncer.baseDir))

  const watcher = watch()

  expect(syncer.yaml()).toMatchInlineSnapshot(`
    "---
    file1.ts: |-
      import {sql} from 'slonik'
      export default sql<queries.Abc>\`select 123 as abc\`
      
      export declare namespace queries {
        // Generated by @slonik/typegen
      
        /** - query: \`select 123 as abc\` */
        export interface Abc {
          /** regtype: \`integer\` */
          abc: number | null
        }
      }
      
    file2.ts: |-
      import {sql} from 'slonik'
      export default sql<queries.Xyz>\`select 123 as xyz\`
      
      export declare namespace queries {
        // Generated by @slonik/typegen
      
        /** - query: \`select 123 as xyz\` */
        export interface Xyz {
          /** regtype: \`integer\` */
          xyz: number | null
        }
      }
      "
  `)

  await new Promise(r => setTimeout(r, 1000))
  console.log('updating')
  fs.writeFileSync(path.join(syncer.baseDir, 'file1.ts'), syncer.read()['file1.ts'].replace('abc', 'def'))
  await new Promise(r => setTimeout(r, 1000))

  console.log('alright closing')
  await watcher.close()

  expect(syncer.yaml()).toMatchInlineSnapshot(`
    "---
    file1.ts: |-
      import {sql} from 'slonik'
      export default sql<queries.Abc>\`select 123 as def\`
      
      export declare namespace queries {
        // Generated by @slonik/typegen
      
        /** - query: \`select 123 as abc\` */
        export interface Abc {
          /** regtype: \`integer\` */
          abc: number | null
        }
      }
      
    file2.ts: |-
      import {sql} from 'slonik'
      export default sql<queries.Xyz>\`select 123 as xyz\`
      
      export declare namespace queries {
        // Generated by @slonik/typegen
      
        /** - query: \`select 123 as xyz\` */
        export interface Xyz {
          /** regtype: \`integer\` */
          xyz: number | null
        }
      }
      "
  `)

  expect(logger.info).toHaveBeenCalledWith(expect.stringContaining('file1.ts updated, running codegen'))
  expect(logger.info).toHaveBeenCalledWith(expect.stringContaining('file1.ts done.'))

  expect(JSON.stringify(logger.info.mock.calls)).toContain('file1.ts updated, running codegen')
  expect(JSON.stringify(logger.info.mock.calls)).not.toContain('file2.ts updated, running codegen')
  expect(JSON.stringify(logger.info.mock.calls)).not.toContain('file2.ts done.')
})
