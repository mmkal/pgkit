import * as fs from 'fs'
import * as path from 'path'

import * as fsSyncer from 'fs-syncer'

import * as typegen from '../src'
import {getHelper} from './helper'

export const {typegenOptions, logger, poolHelper: helper} = getHelper({__filename})

beforeEach(() => {
  jest.clearAllMocks()
})

test('watch file system', async () => {
  const syncer = fsSyncer.jestFixture({
    targetState: {
      'file1.ts': `
        import {sql} from 'slonik'
        export default sql\`select 123 as abc\`
      `,
      'file2.ts': `
        import {sql} from 'slonik'
        export default sql\`select 123 as xyz\`
      `,
    },
  })

  syncer.sync()

  const {watch} = await typegen.generate(typegenOptions(syncer.baseDir))

  expect(syncer.yaml()).toMatchInlineSnapshot(`
    "---
    file1.ts: |-
      import {sql} from 'slonik'
      export default sql<queries.Abc>\`select 123 as abc\`
      
      export declare namespace queries {
        // Generated by @slonik/typegen
      
        /** - query: \`select 123 as abc\` */
        export interface Abc {
          /** regtype: \`integer\` */
          abc: number | null
        }
      }
      
    file2.ts: |-
      import {sql} from 'slonik'
      export default sql<queries.Xyz>\`select 123 as xyz\`
      
      export declare namespace queries {
        // Generated by @slonik/typegen
      
        /** - query: \`select 123 as xyz\` */
        export interface Xyz {
          /** regtype: \`integer\` */
          xyz: number | null
        }
      }
      "
  `)

  const watcher = watch()

  await new Promise(r => setTimeout(r, 1000))
  fs.writeFileSync(
    path.join(syncer.baseDir, 'file1.ts'),
    syncer.read()['file1.ts'].replace('select 123 as abc', 'select 123 as def'),
  )
  await new Promise(r => setTimeout(r, 1000))

  await watcher.close()

  expect(syncer.yaml()).toMatchInlineSnapshot(`
    "---
    file1.ts: |-
      import {sql} from 'slonik'
      export default sql<queries.Def>\`select 123 as def\`
      
      export declare namespace queries {
        // Generated by @slonik/typegen
      
        /** - query: \`select 123 as def\` */
        export interface Def {
          /** regtype: \`integer\` */
          def: number | null
        }
      }
      
    file2.ts: |-
      import {sql} from 'slonik'
      export default sql<queries.Xyz>\`select 123 as xyz\`
      
      export declare namespace queries {
        // Generated by @slonik/typegen
      
        /** - query: \`select 123 as xyz\` */
        export interface Xyz {
          /** regtype: \`integer\` */
          xyz: number | null
        }
      }
      "
  `)

  expect(logger.info).toHaveBeenCalledWith(expect.stringContaining('file1.ts was changed, running codegen'))
  expect(logger.info).toHaveBeenCalledWith(expect.stringContaining('file1.ts finished'))

  const watcherStart = logger.info.mock.calls.findIndex(([msg]) => msg.includes('Watching for file changes'))
  expect(watcherStart).not.toBe(-1)
  const watchLogs = JSON.stringify(logger.info.mock.calls.slice(watcherStart))
  expect(watchLogs).toContain('file1.ts was changed, running codegen')
  expect(watchLogs).not.toContain('file2.ts')
})

test('lazily watch file system', async () => {
  const syncer = fsSyncer.jestFixture({
    targetState: {
      'file1.ts': `
        import {sql} from 'slonik'
        export default sql\`select 123 as abc\`
      `,
    },
  })

  syncer.sync()

  const {watch} = await typegen.generate({
    ...typegenOptions(syncer.baseDir),
    lazy: true,
  })

  expect(logger.info).toHaveBeenCalledTimes(1)

  const watcher = watch()

  await new Promise(r => setTimeout(r, 1000))
  fs.writeFileSync(
    path.join(syncer.baseDir, 'file1.ts'),
    syncer.read()['file1.ts'].replace('select 123 as abc', 'select 123 as def'),
  )
  await new Promise(r => setTimeout(r, 1000))

  await watcher.close()

  expect(logger.info).toHaveBeenCalledWith(expect.stringContaining('file1.ts was changed, running codegen'))
  expect(syncer.yaml()).toMatchInlineSnapshot(`
    "---
    file1.ts: |-
      import {sql} from 'slonik'
      export default sql<queries.Def>\`select 123 as def\`
      
      export declare namespace queries {
        // Generated by @slonik/typegen
      
        /** - query: \`select 123 as def\` */
        export interface Def {
          /** regtype: \`integer\` */
          def: number | null
        }
      }
      "
  `)
})
